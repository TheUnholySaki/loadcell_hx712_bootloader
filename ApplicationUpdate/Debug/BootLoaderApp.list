
BootLoaderApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00007100  2**2
                  ALLOC
  2 .myBufBlockFLASH 0000000a  08009000  08009000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         0000374c  0800900c  0800900c  0000200c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .mysection    00000000  08018000  08018000  0000618c  2**0
                  CONTENTS
  5 .rodata       0000002c  0800c758  0800c758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0800c784  0800c784  0000618c  2**0
                  CONTENTS
  7 .ARM          00000000  0800c784  0800c784  0000618c  2**0
                  CONTENTS
  8 .preinit_array 00000000  0800c784  0800c784  0000618c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000004  0800c784  0800c784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fini_array   00000004  0800c788  0800c788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .data         0000000c  20000180  0800c78c  00006180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000000bc  2000018c  0800c798  0000618c  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  20000248  0800c798  00006248  2**0
                  ALLOC
 14 .ARM.attributes 00000029  00000000  00000000  0000618c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000b12c  00000000  00000000  000061b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001bc4  00000000  00000000  000112e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000c90  00000000  00000000  00012ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000009dd  00000000  00000000  00013b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00017854  00000000  00000000  00014515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000ed8a  00000000  00000000  0002bd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0008a1e5  00000000  00000000  0003aaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000c4cd8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000034ec  00000000  00000000  000c4d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000066  00000000  00000000  000c8208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800900c <__do_global_dtors_aux>:
 800900c:	b510      	push	{r4, lr}
 800900e:	4c05      	ldr	r4, [pc, #20]	@ (8009024 <__do_global_dtors_aux+0x18>)
 8009010:	7823      	ldrb	r3, [r4, #0]
 8009012:	b933      	cbnz	r3, 8009022 <__do_global_dtors_aux+0x16>
 8009014:	4b04      	ldr	r3, [pc, #16]	@ (8009028 <__do_global_dtors_aux+0x1c>)
 8009016:	b113      	cbz	r3, 800901e <__do_global_dtors_aux+0x12>
 8009018:	4804      	ldr	r0, [pc, #16]	@ (800902c <__do_global_dtors_aux+0x20>)
 800901a:	f3af 8000 	nop.w
 800901e:	2301      	movs	r3, #1
 8009020:	7023      	strb	r3, [r4, #0]
 8009022:	bd10      	pop	{r4, pc}
 8009024:	2000018c 	.word	0x2000018c
 8009028:	00000000 	.word	0x00000000
 800902c:	0800c740 	.word	0x0800c740

08009030 <frame_dummy>:
 8009030:	b508      	push	{r3, lr}
 8009032:	4b03      	ldr	r3, [pc, #12]	@ (8009040 <frame_dummy+0x10>)
 8009034:	b11b      	cbz	r3, 800903e <frame_dummy+0xe>
 8009036:	4903      	ldr	r1, [pc, #12]	@ (8009044 <frame_dummy+0x14>)
 8009038:	4803      	ldr	r0, [pc, #12]	@ (8009048 <frame_dummy+0x18>)
 800903a:	f3af 8000 	nop.w
 800903e:	bd08      	pop	{r3, pc}
 8009040:	00000000 	.word	0x00000000
 8009044:	20000190 	.word	0x20000190
 8009048:	0800c740 	.word	0x0800c740

0800904c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct BootloaderAPI *api = (struct BootloaderAPI *) 0x08018000;
 8009052:	4b12      	ldr	r3, [pc, #72]	@ (800909c <main+0x50>)
 8009054:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009056:	f000 fa91 	bl	800957c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800905a:	f000 f825 	bl	80090a8 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800905e:	b662      	cpsie	i
}
 8009060:	bf00      	nop
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009062:	f000 f8e1 	bl	8009228 <MX_GPIO_Init>
  MX_TIM2_Init();
 8009066:	f000 f893 	bl	8009190 <MX_TIM2_Init>
  MX_I2C1_Init();
 800906a:	f000 f863 	bl	8009134 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800906e:	480c      	ldr	r0, [pc, #48]	@ (80090a0 <main+0x54>)
 8009070:	f003 f8d2 	bl	800c218 <HAL_TIM_Base_Start>
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 8009074:	480b      	ldr	r0, [pc, #44]	@ (80090a4 <main+0x58>)
 8009076:	f000 ff8f 	bl	8009f98 <HAL_I2C_EnableListen_IT>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <main+0x38>
	  Error_Handler();
 8009080:	f000 f962 	bl	8009348 <Error_Handler>
  }
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009084:	4807      	ldr	r0, [pc, #28]	@ (80090a4 <main+0x58>)
 8009086:	f000 ffbc 	bl	800a002 <HAL_I2C_EV_IRQHandler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  (*Functions[0])(100);
//	  TurnOnLED(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0));
	  api->Blink(500);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009092:	4798      	blx	r3
	  PA17_test();
 8009094:	f000 fa38 	bl	8009508 <PA17_test>
	  api->Blink(500);
 8009098:	bf00      	nop
 800909a:	e7f6      	b.n	800908a <main+0x3e>
 800909c:	08018000 	.word	0x08018000
 80090a0:	200001fc 	.word	0x200001fc
 80090a4:	200001a8 	.word	0x200001a8

080090a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b090      	sub	sp, #64	@ 0x40
 80090ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80090ae:	f107 0318 	add.w	r3, r7, #24
 80090b2:	2228      	movs	r2, #40	@ 0x28
 80090b4:	2100      	movs	r1, #0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f003 fb16 	bl	800c6e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80090bc:	1d3b      	adds	r3, r7, #4
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	605a      	str	r2, [r3, #4]
 80090c4:	609a      	str	r2, [r3, #8]
 80090c6:	60da      	str	r2, [r3, #12]
 80090c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80090ca:	2301      	movs	r3, #1
 80090cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80090ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80090d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80090d4:	2300      	movs	r3, #0
 80090d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80090d8:	2301      	movs	r3, #1
 80090da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80090dc:	2302      	movs	r3, #2
 80090de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80090e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80090e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80090e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80090ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80090ec:	f107 0318 	add.w	r3, r7, #24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 fc45 	bl	800b980 <HAL_RCC_OscConfig>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80090fc:	f000 f924 	bl	8009348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009100:	230f      	movs	r3, #15
 8009102:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009104:	2302      	movs	r3, #2
 8009106:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800910c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009112:	2300      	movs	r3, #0
 8009114:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009116:	1d3b      	adds	r3, r7, #4
 8009118:	2102      	movs	r1, #2
 800911a:	4618      	mov	r0, r3
 800911c:	f002 feb2 	bl	800be84 <HAL_RCC_ClockConfig>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8009126:	f000 f90f 	bl	8009348 <Error_Handler>
  }
}
 800912a:	bf00      	nop
 800912c:	3740      	adds	r7, #64	@ 0x40
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009138:	4b12      	ldr	r3, [pc, #72]	@ (8009184 <MX_I2C1_Init+0x50>)
 800913a:	4a13      	ldr	r2, [pc, #76]	@ (8009188 <MX_I2C1_Init+0x54>)
 800913c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800913e:	4b11      	ldr	r3, [pc, #68]	@ (8009184 <MX_I2C1_Init+0x50>)
 8009140:	4a12      	ldr	r2, [pc, #72]	@ (800918c <MX_I2C1_Init+0x58>)
 8009142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009144:	4b0f      	ldr	r3, [pc, #60]	@ (8009184 <MX_I2C1_Init+0x50>)
 8009146:	2200      	movs	r2, #0
 8009148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 800914a:	4b0e      	ldr	r3, [pc, #56]	@ (8009184 <MX_I2C1_Init+0x50>)
 800914c:	2210      	movs	r2, #16
 800914e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009150:	4b0c      	ldr	r3, [pc, #48]	@ (8009184 <MX_I2C1_Init+0x50>)
 8009152:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009156:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009158:	4b0a      	ldr	r3, [pc, #40]	@ (8009184 <MX_I2C1_Init+0x50>)
 800915a:	2200      	movs	r2, #0
 800915c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800915e:	4b09      	ldr	r3, [pc, #36]	@ (8009184 <MX_I2C1_Init+0x50>)
 8009160:	2200      	movs	r2, #0
 8009162:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009164:	4b07      	ldr	r3, [pc, #28]	@ (8009184 <MX_I2C1_Init+0x50>)
 8009166:	2200      	movs	r2, #0
 8009168:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800916a:	4b06      	ldr	r3, [pc, #24]	@ (8009184 <MX_I2C1_Init+0x50>)
 800916c:	2280      	movs	r2, #128	@ 0x80
 800916e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009170:	4804      	ldr	r0, [pc, #16]	@ (8009184 <MX_I2C1_Init+0x50>)
 8009172:	f000 fdb9 	bl	8009ce8 <HAL_I2C_Init>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800917c:	f000 f8e4 	bl	8009348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009180:	bf00      	nop
 8009182:	bd80      	pop	{r7, pc}
 8009184:	200001a8 	.word	0x200001a8
 8009188:	40005400 	.word	0x40005400
 800918c:	000186a0 	.word	0x000186a0

08009190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009196:	f107 0308 	add.w	r3, r7, #8
 800919a:	2200      	movs	r2, #0
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	605a      	str	r2, [r3, #4]
 80091a0:	609a      	str	r2, [r3, #8]
 80091a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091a4:	463b      	mov	r3, r7
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80091ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009224 <MX_TIM2_Init+0x94>)
 80091ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80091b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80091b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009224 <MX_TIM2_Init+0x94>)
 80091b6:	2247      	movs	r2, #71	@ 0x47
 80091b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091ba:	4b1a      	ldr	r3, [pc, #104]	@ (8009224 <MX_TIM2_Init+0x94>)
 80091bc:	2200      	movs	r2, #0
 80091be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80091c0:	4b18      	ldr	r3, [pc, #96]	@ (8009224 <MX_TIM2_Init+0x94>)
 80091c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091c8:	4b16      	ldr	r3, [pc, #88]	@ (8009224 <MX_TIM2_Init+0x94>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80091ce:	4b15      	ldr	r3, [pc, #84]	@ (8009224 <MX_TIM2_Init+0x94>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80091d4:	4813      	ldr	r0, [pc, #76]	@ (8009224 <MX_TIM2_Init+0x94>)
 80091d6:	f002 ffcf 	bl	800c178 <HAL_TIM_Base_Init>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80091e0:	f000 f8b2 	bl	8009348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80091e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80091e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80091ea:	f107 0308 	add.w	r3, r7, #8
 80091ee:	4619      	mov	r1, r3
 80091f0:	480c      	ldr	r0, [pc, #48]	@ (8009224 <MX_TIM2_Init+0x94>)
 80091f2:	f003 f85b 	bl	800c2ac <HAL_TIM_ConfigClockSource>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80091fc:	f000 f8a4 	bl	8009348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009200:	2300      	movs	r3, #0
 8009202:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009204:	2300      	movs	r3, #0
 8009206:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009208:	463b      	mov	r3, r7
 800920a:	4619      	mov	r1, r3
 800920c:	4805      	ldr	r0, [pc, #20]	@ (8009224 <MX_TIM2_Init+0x94>)
 800920e:	f003 fa0d 	bl	800c62c <HAL_TIMEx_MasterConfigSynchronization>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8009218:	f000 f896 	bl	8009348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800921c:	bf00      	nop
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	200001fc 	.word	0x200001fc

08009228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800922e:	f107 0310 	add.w	r3, r7, #16
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	605a      	str	r2, [r3, #4]
 8009238:	609a      	str	r2, [r3, #8]
 800923a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800923c:	4b3e      	ldr	r3, [pc, #248]	@ (8009338 <MX_GPIO_Init+0x110>)
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	4a3d      	ldr	r2, [pc, #244]	@ (8009338 <MX_GPIO_Init+0x110>)
 8009242:	f043 0310 	orr.w	r3, r3, #16
 8009246:	6193      	str	r3, [r2, #24]
 8009248:	4b3b      	ldr	r3, [pc, #236]	@ (8009338 <MX_GPIO_Init+0x110>)
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	f003 0310 	and.w	r3, r3, #16
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009254:	4b38      	ldr	r3, [pc, #224]	@ (8009338 <MX_GPIO_Init+0x110>)
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	4a37      	ldr	r2, [pc, #220]	@ (8009338 <MX_GPIO_Init+0x110>)
 800925a:	f043 0320 	orr.w	r3, r3, #32
 800925e:	6193      	str	r3, [r2, #24]
 8009260:	4b35      	ldr	r3, [pc, #212]	@ (8009338 <MX_GPIO_Init+0x110>)
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	f003 0320 	and.w	r3, r3, #32
 8009268:	60bb      	str	r3, [r7, #8]
 800926a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800926c:	4b32      	ldr	r3, [pc, #200]	@ (8009338 <MX_GPIO_Init+0x110>)
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	4a31      	ldr	r2, [pc, #196]	@ (8009338 <MX_GPIO_Init+0x110>)
 8009272:	f043 0304 	orr.w	r3, r3, #4
 8009276:	6193      	str	r3, [r2, #24]
 8009278:	4b2f      	ldr	r3, [pc, #188]	@ (8009338 <MX_GPIO_Init+0x110>)
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	607b      	str	r3, [r7, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009284:	4b2c      	ldr	r3, [pc, #176]	@ (8009338 <MX_GPIO_Init+0x110>)
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	4a2b      	ldr	r2, [pc, #172]	@ (8009338 <MX_GPIO_Init+0x110>)
 800928a:	f043 0308 	orr.w	r3, r3, #8
 800928e:	6193      	str	r3, [r2, #24]
 8009290:	4b29      	ldr	r3, [pc, #164]	@ (8009338 <MX_GPIO_Init+0x110>)
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	f003 0308 	and.w	r3, r3, #8
 8009298:	603b      	str	r3, [r7, #0]
 800929a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800929c:	2200      	movs	r2, #0
 800929e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80092a2:	4826      	ldr	r0, [pc, #152]	@ (800933c <MX_GPIO_Init+0x114>)
 80092a4:	f000 fd08 	bl	8009cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80092a8:	2200      	movs	r2, #0
 80092aa:	2180      	movs	r1, #128	@ 0x80
 80092ac:	4824      	ldr	r0, [pc, #144]	@ (8009340 <MX_GPIO_Init+0x118>)
 80092ae:	f000 fd03 	bl	8009cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80092b2:	2200      	movs	r2, #0
 80092b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092b8:	4822      	ldr	r0, [pc, #136]	@ (8009344 <MX_GPIO_Init+0x11c>)
 80092ba:	f000 fcfd 	bl	8009cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80092be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80092c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092c4:	2301      	movs	r3, #1
 80092c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092cc:	2302      	movs	r3, #2
 80092ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092d0:	f107 0310 	add.w	r3, r7, #16
 80092d4:	4619      	mov	r1, r3
 80092d6:	4819      	ldr	r0, [pc, #100]	@ (800933c <MX_GPIO_Init+0x114>)
 80092d8:	f000 fb6a 	bl	80099b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80092dc:	2380      	movs	r3, #128	@ 0x80
 80092de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092e0:	2301      	movs	r3, #1
 80092e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092e8:	2302      	movs	r3, #2
 80092ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092ec:	f107 0310 	add.w	r3, r7, #16
 80092f0:	4619      	mov	r1, r3
 80092f2:	4813      	ldr	r0, [pc, #76]	@ (8009340 <MX_GPIO_Init+0x118>)
 80092f4:	f000 fb5c 	bl	80099b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80092f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009302:	2300      	movs	r3, #0
 8009304:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009306:	f107 0310 	add.w	r3, r7, #16
 800930a:	4619      	mov	r1, r3
 800930c:	480d      	ldr	r0, [pc, #52]	@ (8009344 <MX_GPIO_Init+0x11c>)
 800930e:	f000 fb4f 	bl	80099b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009312:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009318:	2301      	movs	r3, #1
 800931a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800931c:	2300      	movs	r3, #0
 800931e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009320:	2302      	movs	r3, #2
 8009322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009324:	f107 0310 	add.w	r3, r7, #16
 8009328:	4619      	mov	r1, r3
 800932a:	4806      	ldr	r0, [pc, #24]	@ (8009344 <MX_GPIO_Init+0x11c>)
 800932c:	f000 fb40 	bl	80099b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009330:	bf00      	nop
 8009332:	3720      	adds	r7, #32
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	40021000 	.word	0x40021000
 800933c:	40011000 	.word	0x40011000
 8009340:	40010800 	.word	0x40010800
 8009344:	40010c00 	.word	0x40010c00

08009348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800934c:	b672      	cpsid	i
}
 800934e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009350:	bf00      	nop
 8009352:	e7fd      	b.n	8009350 <Error_Handler+0x8>

08009354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800935a:	4b0e      	ldr	r3, [pc, #56]	@ (8009394 <HAL_MspInit+0x40>)
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	4a0d      	ldr	r2, [pc, #52]	@ (8009394 <HAL_MspInit+0x40>)
 8009360:	f043 0301 	orr.w	r3, r3, #1
 8009364:	6193      	str	r3, [r2, #24]
 8009366:	4b0b      	ldr	r3, [pc, #44]	@ (8009394 <HAL_MspInit+0x40>)
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	607b      	str	r3, [r7, #4]
 8009370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009372:	4b08      	ldr	r3, [pc, #32]	@ (8009394 <HAL_MspInit+0x40>)
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	4a07      	ldr	r2, [pc, #28]	@ (8009394 <HAL_MspInit+0x40>)
 8009378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800937c:	61d3      	str	r3, [r2, #28]
 800937e:	4b05      	ldr	r3, [pc, #20]	@ (8009394 <HAL_MspInit+0x40>)
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	bc80      	pop	{r7}
 8009392:	4770      	bx	lr
 8009394:	40021000 	.word	0x40021000

08009398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093a0:	f107 0310 	add.w	r3, r7, #16
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	605a      	str	r2, [r3, #4]
 80093aa:	609a      	str	r2, [r3, #8]
 80093ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009428 <HAL_I2C_MspInit+0x90>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d133      	bne.n	8009420 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093b8:	4b1c      	ldr	r3, [pc, #112]	@ (800942c <HAL_I2C_MspInit+0x94>)
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	4a1b      	ldr	r2, [pc, #108]	@ (800942c <HAL_I2C_MspInit+0x94>)
 80093be:	f043 0308 	orr.w	r3, r3, #8
 80093c2:	6193      	str	r3, [r2, #24]
 80093c4:	4b19      	ldr	r3, [pc, #100]	@ (800942c <HAL_I2C_MspInit+0x94>)
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80093d0:	23c0      	movs	r3, #192	@ 0xc0
 80093d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80093d4:	2312      	movs	r3, #18
 80093d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80093d8:	2303      	movs	r3, #3
 80093da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093dc:	f107 0310 	add.w	r3, r7, #16
 80093e0:	4619      	mov	r1, r3
 80093e2:	4813      	ldr	r0, [pc, #76]	@ (8009430 <HAL_I2C_MspInit+0x98>)
 80093e4:	f000 fae4 	bl	80099b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80093e8:	4b10      	ldr	r3, [pc, #64]	@ (800942c <HAL_I2C_MspInit+0x94>)
 80093ea:	69db      	ldr	r3, [r3, #28]
 80093ec:	4a0f      	ldr	r2, [pc, #60]	@ (800942c <HAL_I2C_MspInit+0x94>)
 80093ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80093f2:	61d3      	str	r3, [r2, #28]
 80093f4:	4b0d      	ldr	r3, [pc, #52]	@ (800942c <HAL_I2C_MspInit+0x94>)
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80093fc:	60bb      	str	r3, [r7, #8]
 80093fe:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8009400:	2200      	movs	r2, #0
 8009402:	2100      	movs	r1, #0
 8009404:	201f      	movs	r0, #31
 8009406:	f000 fa16 	bl	8009836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800940a:	201f      	movs	r0, #31
 800940c:	f000 fa2f 	bl	800986e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8009410:	2200      	movs	r2, #0
 8009412:	2100      	movs	r1, #0
 8009414:	2020      	movs	r0, #32
 8009416:	f000 fa0e 	bl	8009836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800941a:	2020      	movs	r0, #32
 800941c:	f000 fa27 	bl	800986e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009420:	bf00      	nop
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	40005400 	.word	0x40005400
 800942c:	40021000 	.word	0x40021000
 8009430:	40010c00 	.word	0x40010c00

08009434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009444:	d10b      	bne.n	800945e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009446:	4b08      	ldr	r3, [pc, #32]	@ (8009468 <HAL_TIM_Base_MspInit+0x34>)
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	4a07      	ldr	r2, [pc, #28]	@ (8009468 <HAL_TIM_Base_MspInit+0x34>)
 800944c:	f043 0301 	orr.w	r3, r3, #1
 8009450:	61d3      	str	r3, [r2, #28]
 8009452:	4b05      	ldr	r3, [pc, #20]	@ (8009468 <HAL_TIM_Base_MspInit+0x34>)
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800945e:	bf00      	nop
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	bc80      	pop	{r7}
 8009466:	4770      	bx	lr
 8009468:	40021000 	.word	0x40021000

0800946c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009470:	bf00      	nop
 8009472:	e7fd      	b.n	8009470 <NMI_Handler+0x4>

08009474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009478:	bf00      	nop
 800947a:	e7fd      	b.n	8009478 <HardFault_Handler+0x4>

0800947c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800947c:	b480      	push	{r7}
 800947e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009480:	bf00      	nop
 8009482:	e7fd      	b.n	8009480 <MemManage_Handler+0x4>

08009484 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009488:	bf00      	nop
 800948a:	e7fd      	b.n	8009488 <BusFault_Handler+0x4>

0800948c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800948c:	b480      	push	{r7}
 800948e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009490:	bf00      	nop
 8009492:	e7fd      	b.n	8009490 <UsageFault_Handler+0x4>

08009494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009494:	b480      	push	{r7}
 8009496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009498:	bf00      	nop
 800949a:	46bd      	mov	sp, r7
 800949c:	bc80      	pop	{r7}
 800949e:	4770      	bx	lr

080094a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80094a4:	bf00      	nop
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr

080094ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80094ac:	b480      	push	{r7}
 80094ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80094b0:	bf00      	nop
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr

080094b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80094bc:	f000 f8a4 	bl	8009608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80094c0:	bf00      	nop
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80094c8:	4802      	ldr	r0, [pc, #8]	@ (80094d4 <I2C1_EV_IRQHandler+0x10>)
 80094ca:	f000 fd9a 	bl	800a002 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80094ce:	bf00      	nop
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200001a8 	.word	0x200001a8

080094d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80094dc:	4802      	ldr	r0, [pc, #8]	@ (80094e8 <I2C1_ER_IRQHandler+0x10>)
 80094de:	f000 fee3 	bl	800a2a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80094e2:	bf00      	nop
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	200001a8 	.word	0x200001a8

080094ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80094ec:	b480      	push	{r7}
 80094ee:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80094f0:	4b03      	ldr	r3, [pc, #12]	@ (8009500 <SystemInit+0x14>)
 80094f2:	4a04      	ldr	r2, [pc, #16]	@ (8009504 <SystemInit+0x18>)
 80094f4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80094f6:	bf00      	nop
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bc80      	pop	{r7}
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	e000ed00 	.word	0xe000ed00
 8009504:	08008000 	.word	0x08008000

08009508 <PA17_test>:
#include "test.h"

void PA17_test(void){
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
	//testing_var = 1;

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800950c:	2201      	movs	r2, #1
 800950e:	2180      	movs	r1, #128	@ 0x80
 8009510:	4806      	ldr	r0, [pc, #24]	@ (800952c <PA17_test+0x24>)
 8009512:	f000 fbd1 	bl	8009cb8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8009516:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800951a:	f000 f891 	bl	8009640 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800951e:	2200      	movs	r2, #0
 8009520:	2180      	movs	r1, #128	@ 0x80
 8009522:	4802      	ldr	r0, [pc, #8]	@ (800952c <PA17_test+0x24>)
 8009524:	f000 fbc8 	bl	8009cb8 <HAL_GPIO_WritePin>

}
 8009528:	bf00      	nop
 800952a:	bd80      	pop	{r7, pc}
 800952c:	40010800 	.word	0x40010800

08009530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009530:	f7ff ffdc 	bl	80094ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009534:	480b      	ldr	r0, [pc, #44]	@ (8009564 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8009536:	490c      	ldr	r1, [pc, #48]	@ (8009568 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8009538:	4a0c      	ldr	r2, [pc, #48]	@ (800956c <LoopFillZerobss+0x16>)
  movs r3, #0
 800953a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800953c:	e002      	b.n	8009544 <LoopCopyDataInit>

0800953e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800953e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009542:	3304      	adds	r3, #4

08009544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009548:	d3f9      	bcc.n	800953e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800954a:	4a09      	ldr	r2, [pc, #36]	@ (8009570 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800954c:	4c09      	ldr	r4, [pc, #36]	@ (8009574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800954e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009550:	e001      	b.n	8009556 <LoopFillZerobss>

08009552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009554:	3204      	adds	r2, #4

08009556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009558:	d3fb      	bcc.n	8009552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800955a:	f003 f8cd 	bl	800c6f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800955e:	f7ff fd75 	bl	800904c <main>
  bx lr
 8009562:	4770      	bx	lr
  ldr r0, =_sdata
 8009564:	20000180 	.word	0x20000180
  ldr r1, =_edata
 8009568:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 800956c:	0800c78c 	.word	0x0800c78c
  ldr r2, =_sbss
 8009570:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8009574:	20000248 	.word	0x20000248

08009578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009578:	e7fe      	b.n	8009578 <ADC1_2_IRQHandler>
	...

0800957c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009580:	4b08      	ldr	r3, [pc, #32]	@ (80095a4 <HAL_Init+0x28>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a07      	ldr	r2, [pc, #28]	@ (80095a4 <HAL_Init+0x28>)
 8009586:	f043 0310 	orr.w	r3, r3, #16
 800958a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800958c:	2003      	movs	r0, #3
 800958e:	f000 f947 	bl	8009820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009592:	200f      	movs	r0, #15
 8009594:	f000 f808 	bl	80095a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009598:	f7ff fedc 	bl	8009354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	40022000 	.word	0x40022000

080095a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80095b0:	4b12      	ldr	r3, [pc, #72]	@ (80095fc <HAL_InitTick+0x54>)
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	4b12      	ldr	r3, [pc, #72]	@ (8009600 <HAL_InitTick+0x58>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	4619      	mov	r1, r3
 80095ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80095be:	fbb3 f3f1 	udiv	r3, r3, r1
 80095c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 f95f 	bl	800988a <HAL_SYSTICK_Config>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e00e      	b.n	80095f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b0f      	cmp	r3, #15
 80095da:	d80a      	bhi.n	80095f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80095dc:	2200      	movs	r2, #0
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	f000 f927 	bl	8009836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80095e8:	4a06      	ldr	r2, [pc, #24]	@ (8009604 <HAL_InitTick+0x5c>)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	e000      	b.n	80095f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20000180 	.word	0x20000180
 8009600:	20000188 	.word	0x20000188
 8009604:	20000184 	.word	0x20000184

08009608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009608:	b480      	push	{r7}
 800960a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800960c:	4b05      	ldr	r3, [pc, #20]	@ (8009624 <HAL_IncTick+0x1c>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <HAL_IncTick+0x20>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4413      	add	r3, r2
 8009618:	4a03      	ldr	r2, [pc, #12]	@ (8009628 <HAL_IncTick+0x20>)
 800961a:	6013      	str	r3, [r2, #0]
}
 800961c:	bf00      	nop
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr
 8009624:	20000188 	.word	0x20000188
 8009628:	20000244 	.word	0x20000244

0800962c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
  return uwTick;
 8009630:	4b02      	ldr	r3, [pc, #8]	@ (800963c <HAL_GetTick+0x10>)
 8009632:	681b      	ldr	r3, [r3, #0]
}
 8009634:	4618      	mov	r0, r3
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr
 800963c:	20000244 	.word	0x20000244

08009640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009648:	f7ff fff0 	bl	800962c <HAL_GetTick>
 800964c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009658:	d005      	beq.n	8009666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800965a:	4b0a      	ldr	r3, [pc, #40]	@ (8009684 <HAL_Delay+0x44>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009666:	bf00      	nop
 8009668:	f7ff ffe0 	bl	800962c <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	429a      	cmp	r2, r3
 8009676:	d8f7      	bhi.n	8009668 <HAL_Delay+0x28>
  {
  }
}
 8009678:	bf00      	nop
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20000188 	.word	0x20000188

08009688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f003 0307 	and.w	r3, r3, #7
 8009696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009698:	4b0c      	ldr	r3, [pc, #48]	@ (80096cc <__NVIC_SetPriorityGrouping+0x44>)
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80096a4:	4013      	ands	r3, r2
 80096a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80096b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80096b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096ba:	4a04      	ldr	r2, [pc, #16]	@ (80096cc <__NVIC_SetPriorityGrouping+0x44>)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	60d3      	str	r3, [r2, #12]
}
 80096c0:	bf00      	nop
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bc80      	pop	{r7}
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	e000ed00 	.word	0xe000ed00

080096d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80096d4:	4b04      	ldr	r3, [pc, #16]	@ (80096e8 <__NVIC_GetPriorityGrouping+0x18>)
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	0a1b      	lsrs	r3, r3, #8
 80096da:	f003 0307 	and.w	r3, r3, #7
}
 80096de:	4618      	mov	r0, r3
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	e000ed00 	.word	0xe000ed00

080096ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	db0b      	blt.n	8009716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	f003 021f 	and.w	r2, r3, #31
 8009704:	4906      	ldr	r1, [pc, #24]	@ (8009720 <__NVIC_EnableIRQ+0x34>)
 8009706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	2001      	movs	r0, #1
 800970e:	fa00 f202 	lsl.w	r2, r0, r2
 8009712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr
 8009720:	e000e100 	.word	0xe000e100

08009724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	6039      	str	r1, [r7, #0]
 800972e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009734:	2b00      	cmp	r3, #0
 8009736:	db0a      	blt.n	800974e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	b2da      	uxtb	r2, r3
 800973c:	490c      	ldr	r1, [pc, #48]	@ (8009770 <__NVIC_SetPriority+0x4c>)
 800973e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009742:	0112      	lsls	r2, r2, #4
 8009744:	b2d2      	uxtb	r2, r2
 8009746:	440b      	add	r3, r1
 8009748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800974c:	e00a      	b.n	8009764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	b2da      	uxtb	r2, r3
 8009752:	4908      	ldr	r1, [pc, #32]	@ (8009774 <__NVIC_SetPriority+0x50>)
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	f003 030f 	and.w	r3, r3, #15
 800975a:	3b04      	subs	r3, #4
 800975c:	0112      	lsls	r2, r2, #4
 800975e:	b2d2      	uxtb	r2, r2
 8009760:	440b      	add	r3, r1
 8009762:	761a      	strb	r2, [r3, #24]
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	bc80      	pop	{r7}
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	e000e100 	.word	0xe000e100
 8009774:	e000ed00 	.word	0xe000ed00

08009778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009778:	b480      	push	{r7}
 800977a:	b089      	sub	sp, #36	@ 0x24
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	f1c3 0307 	rsb	r3, r3, #7
 8009792:	2b04      	cmp	r3, #4
 8009794:	bf28      	it	cs
 8009796:	2304      	movcs	r3, #4
 8009798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	3304      	adds	r3, #4
 800979e:	2b06      	cmp	r3, #6
 80097a0:	d902      	bls.n	80097a8 <NVIC_EncodePriority+0x30>
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	3b03      	subs	r3, #3
 80097a6:	e000      	b.n	80097aa <NVIC_EncodePriority+0x32>
 80097a8:	2300      	movs	r3, #0
 80097aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097ac:	f04f 32ff 	mov.w	r2, #4294967295
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	fa02 f303 	lsl.w	r3, r2, r3
 80097b6:	43da      	mvns	r2, r3
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	401a      	ands	r2, r3
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097c0:	f04f 31ff 	mov.w	r1, #4294967295
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	fa01 f303 	lsl.w	r3, r1, r3
 80097ca:	43d9      	mvns	r1, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097d0:	4313      	orrs	r3, r2
         );
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3724      	adds	r7, #36	@ 0x24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bc80      	pop	{r7}
 80097da:	4770      	bx	lr

080097dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097ec:	d301      	bcc.n	80097f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80097ee:	2301      	movs	r3, #1
 80097f0:	e00f      	b.n	8009812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80097f2:	4a0a      	ldr	r2, [pc, #40]	@ (800981c <SysTick_Config+0x40>)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80097fa:	210f      	movs	r1, #15
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	f7ff ff90 	bl	8009724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009804:	4b05      	ldr	r3, [pc, #20]	@ (800981c <SysTick_Config+0x40>)
 8009806:	2200      	movs	r2, #0
 8009808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800980a:	4b04      	ldr	r3, [pc, #16]	@ (800981c <SysTick_Config+0x40>)
 800980c:	2207      	movs	r2, #7
 800980e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	e000e010 	.word	0xe000e010

08009820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ff2d 	bl	8009688 <__NVIC_SetPriorityGrouping>
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009836:	b580      	push	{r7, lr}
 8009838:	b086      	sub	sp, #24
 800983a:	af00      	add	r7, sp, #0
 800983c:	4603      	mov	r3, r0
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	607a      	str	r2, [r7, #4]
 8009842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009844:	2300      	movs	r3, #0
 8009846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009848:	f7ff ff42 	bl	80096d0 <__NVIC_GetPriorityGrouping>
 800984c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	68b9      	ldr	r1, [r7, #8]
 8009852:	6978      	ldr	r0, [r7, #20]
 8009854:	f7ff ff90 	bl	8009778 <NVIC_EncodePriority>
 8009858:	4602      	mov	r2, r0
 800985a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff ff5f 	bl	8009724 <__NVIC_SetPriority>
}
 8009866:	bf00      	nop
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b082      	sub	sp, #8
 8009872:	af00      	add	r7, sp, #0
 8009874:	4603      	mov	r3, r0
 8009876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff ff35 	bl	80096ec <__NVIC_EnableIRQ>
}
 8009882:	bf00      	nop
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff ffa2 	bl	80097dc <SysTick_Config>
 8009898:	4603      	mov	r3, r0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d005      	beq.n	80098c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2204      	movs	r2, #4
 80098c0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	73fb      	strb	r3, [r7, #15]
 80098c6:	e051      	b.n	800996c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f022 020e 	bic.w	r2, r2, #14
 80098d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f022 0201 	bic.w	r2, r2, #1
 80098e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a22      	ldr	r2, [pc, #136]	@ (8009978 <HAL_DMA_Abort_IT+0xd4>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d029      	beq.n	8009946 <HAL_DMA_Abort_IT+0xa2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a21      	ldr	r2, [pc, #132]	@ (800997c <HAL_DMA_Abort_IT+0xd8>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d022      	beq.n	8009942 <HAL_DMA_Abort_IT+0x9e>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a1f      	ldr	r2, [pc, #124]	@ (8009980 <HAL_DMA_Abort_IT+0xdc>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d01a      	beq.n	800993c <HAL_DMA_Abort_IT+0x98>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a1e      	ldr	r2, [pc, #120]	@ (8009984 <HAL_DMA_Abort_IT+0xe0>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d012      	beq.n	8009936 <HAL_DMA_Abort_IT+0x92>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a1c      	ldr	r2, [pc, #112]	@ (8009988 <HAL_DMA_Abort_IT+0xe4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d00a      	beq.n	8009930 <HAL_DMA_Abort_IT+0x8c>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a1b      	ldr	r2, [pc, #108]	@ (800998c <HAL_DMA_Abort_IT+0xe8>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d102      	bne.n	800992a <HAL_DMA_Abort_IT+0x86>
 8009924:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009928:	e00e      	b.n	8009948 <HAL_DMA_Abort_IT+0xa4>
 800992a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800992e:	e00b      	b.n	8009948 <HAL_DMA_Abort_IT+0xa4>
 8009930:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009934:	e008      	b.n	8009948 <HAL_DMA_Abort_IT+0xa4>
 8009936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800993a:	e005      	b.n	8009948 <HAL_DMA_Abort_IT+0xa4>
 800993c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009940:	e002      	b.n	8009948 <HAL_DMA_Abort_IT+0xa4>
 8009942:	2310      	movs	r3, #16
 8009944:	e000      	b.n	8009948 <HAL_DMA_Abort_IT+0xa4>
 8009946:	2301      	movs	r3, #1
 8009948:	4a11      	ldr	r2, [pc, #68]	@ (8009990 <HAL_DMA_Abort_IT+0xec>)
 800994a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	4798      	blx	r3
    } 
  }
  return status;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	40020008 	.word	0x40020008
 800997c:	4002001c 	.word	0x4002001c
 8009980:	40020030 	.word	0x40020030
 8009984:	40020044 	.word	0x40020044
 8009988:	40020058 	.word	0x40020058
 800998c:	4002006c 	.word	0x4002006c
 8009990:	40020000 	.word	0x40020000

08009994 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80099a2:	b2db      	uxtb	r3, r3
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr
	...

080099b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b08b      	sub	sp, #44	@ 0x2c
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80099ba:	2300      	movs	r3, #0
 80099bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80099be:	2300      	movs	r3, #0
 80099c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80099c2:	e169      	b.n	8009c98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80099c4:	2201      	movs	r2, #1
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	fa02 f303 	lsl.w	r3, r2, r3
 80099cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	4013      	ands	r3, r2
 80099d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	429a      	cmp	r2, r3
 80099de:	f040 8158 	bne.w	8009c92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	4a9a      	ldr	r2, [pc, #616]	@ (8009c50 <HAL_GPIO_Init+0x2a0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d05e      	beq.n	8009aaa <HAL_GPIO_Init+0xfa>
 80099ec:	4a98      	ldr	r2, [pc, #608]	@ (8009c50 <HAL_GPIO_Init+0x2a0>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d875      	bhi.n	8009ade <HAL_GPIO_Init+0x12e>
 80099f2:	4a98      	ldr	r2, [pc, #608]	@ (8009c54 <HAL_GPIO_Init+0x2a4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d058      	beq.n	8009aaa <HAL_GPIO_Init+0xfa>
 80099f8:	4a96      	ldr	r2, [pc, #600]	@ (8009c54 <HAL_GPIO_Init+0x2a4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d86f      	bhi.n	8009ade <HAL_GPIO_Init+0x12e>
 80099fe:	4a96      	ldr	r2, [pc, #600]	@ (8009c58 <HAL_GPIO_Init+0x2a8>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d052      	beq.n	8009aaa <HAL_GPIO_Init+0xfa>
 8009a04:	4a94      	ldr	r2, [pc, #592]	@ (8009c58 <HAL_GPIO_Init+0x2a8>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d869      	bhi.n	8009ade <HAL_GPIO_Init+0x12e>
 8009a0a:	4a94      	ldr	r2, [pc, #592]	@ (8009c5c <HAL_GPIO_Init+0x2ac>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d04c      	beq.n	8009aaa <HAL_GPIO_Init+0xfa>
 8009a10:	4a92      	ldr	r2, [pc, #584]	@ (8009c5c <HAL_GPIO_Init+0x2ac>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d863      	bhi.n	8009ade <HAL_GPIO_Init+0x12e>
 8009a16:	4a92      	ldr	r2, [pc, #584]	@ (8009c60 <HAL_GPIO_Init+0x2b0>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d046      	beq.n	8009aaa <HAL_GPIO_Init+0xfa>
 8009a1c:	4a90      	ldr	r2, [pc, #576]	@ (8009c60 <HAL_GPIO_Init+0x2b0>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d85d      	bhi.n	8009ade <HAL_GPIO_Init+0x12e>
 8009a22:	2b12      	cmp	r3, #18
 8009a24:	d82a      	bhi.n	8009a7c <HAL_GPIO_Init+0xcc>
 8009a26:	2b12      	cmp	r3, #18
 8009a28:	d859      	bhi.n	8009ade <HAL_GPIO_Init+0x12e>
 8009a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a30 <HAL_GPIO_Init+0x80>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009aab 	.word	0x08009aab
 8009a34:	08009a85 	.word	0x08009a85
 8009a38:	08009a97 	.word	0x08009a97
 8009a3c:	08009ad9 	.word	0x08009ad9
 8009a40:	08009adf 	.word	0x08009adf
 8009a44:	08009adf 	.word	0x08009adf
 8009a48:	08009adf 	.word	0x08009adf
 8009a4c:	08009adf 	.word	0x08009adf
 8009a50:	08009adf 	.word	0x08009adf
 8009a54:	08009adf 	.word	0x08009adf
 8009a58:	08009adf 	.word	0x08009adf
 8009a5c:	08009adf 	.word	0x08009adf
 8009a60:	08009adf 	.word	0x08009adf
 8009a64:	08009adf 	.word	0x08009adf
 8009a68:	08009adf 	.word	0x08009adf
 8009a6c:	08009adf 	.word	0x08009adf
 8009a70:	08009adf 	.word	0x08009adf
 8009a74:	08009a8d 	.word	0x08009a8d
 8009a78:	08009aa1 	.word	0x08009aa1
 8009a7c:	4a79      	ldr	r2, [pc, #484]	@ (8009c64 <HAL_GPIO_Init+0x2b4>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009a82:	e02c      	b.n	8009ade <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	623b      	str	r3, [r7, #32]
          break;
 8009a8a:	e029      	b.n	8009ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	3304      	adds	r3, #4
 8009a92:	623b      	str	r3, [r7, #32]
          break;
 8009a94:	e024      	b.n	8009ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	623b      	str	r3, [r7, #32]
          break;
 8009a9e:	e01f      	b.n	8009ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	330c      	adds	r3, #12
 8009aa6:	623b      	str	r3, [r7, #32]
          break;
 8009aa8:	e01a      	b.n	8009ae0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d102      	bne.n	8009ab8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009ab2:	2304      	movs	r3, #4
 8009ab4:	623b      	str	r3, [r7, #32]
          break;
 8009ab6:	e013      	b.n	8009ae0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d105      	bne.n	8009acc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009ac0:	2308      	movs	r3, #8
 8009ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	69fa      	ldr	r2, [r7, #28]
 8009ac8:	611a      	str	r2, [r3, #16]
          break;
 8009aca:	e009      	b.n	8009ae0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009acc:	2308      	movs	r3, #8
 8009ace:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	615a      	str	r2, [r3, #20]
          break;
 8009ad6:	e003      	b.n	8009ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	623b      	str	r3, [r7, #32]
          break;
 8009adc:	e000      	b.n	8009ae0 <HAL_GPIO_Init+0x130>
          break;
 8009ade:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	2bff      	cmp	r3, #255	@ 0xff
 8009ae4:	d801      	bhi.n	8009aea <HAL_GPIO_Init+0x13a>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	e001      	b.n	8009aee <HAL_GPIO_Init+0x13e>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3304      	adds	r3, #4
 8009aee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	2bff      	cmp	r3, #255	@ 0xff
 8009af4:	d802      	bhi.n	8009afc <HAL_GPIO_Init+0x14c>
 8009af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	e002      	b.n	8009b02 <HAL_GPIO_Init+0x152>
 8009afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afe:	3b08      	subs	r3, #8
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	210f      	movs	r1, #15
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b10:	43db      	mvns	r3, r3
 8009b12:	401a      	ands	r2, r3
 8009b14:	6a39      	ldr	r1, [r7, #32]
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	fa01 f303 	lsl.w	r3, r1, r3
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 80b1 	beq.w	8009c92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009b30:	4b4d      	ldr	r3, [pc, #308]	@ (8009c68 <HAL_GPIO_Init+0x2b8>)
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	4a4c      	ldr	r2, [pc, #304]	@ (8009c68 <HAL_GPIO_Init+0x2b8>)
 8009b36:	f043 0301 	orr.w	r3, r3, #1
 8009b3a:	6193      	str	r3, [r2, #24]
 8009b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8009c68 <HAL_GPIO_Init+0x2b8>)
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	60bb      	str	r3, [r7, #8]
 8009b46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009b48:	4a48      	ldr	r2, [pc, #288]	@ (8009c6c <HAL_GPIO_Init+0x2bc>)
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4c:	089b      	lsrs	r3, r3, #2
 8009b4e:	3302      	adds	r3, #2
 8009b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	220f      	movs	r2, #15
 8009b60:	fa02 f303 	lsl.w	r3, r2, r3
 8009b64:	43db      	mvns	r3, r3
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	4013      	ands	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a40      	ldr	r2, [pc, #256]	@ (8009c70 <HAL_GPIO_Init+0x2c0>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d013      	beq.n	8009b9c <HAL_GPIO_Init+0x1ec>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a3f      	ldr	r2, [pc, #252]	@ (8009c74 <HAL_GPIO_Init+0x2c4>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d00d      	beq.n	8009b98 <HAL_GPIO_Init+0x1e8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a3e      	ldr	r2, [pc, #248]	@ (8009c78 <HAL_GPIO_Init+0x2c8>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d007      	beq.n	8009b94 <HAL_GPIO_Init+0x1e4>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a3d      	ldr	r2, [pc, #244]	@ (8009c7c <HAL_GPIO_Init+0x2cc>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d101      	bne.n	8009b90 <HAL_GPIO_Init+0x1e0>
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e006      	b.n	8009b9e <HAL_GPIO_Init+0x1ee>
 8009b90:	2304      	movs	r3, #4
 8009b92:	e004      	b.n	8009b9e <HAL_GPIO_Init+0x1ee>
 8009b94:	2302      	movs	r3, #2
 8009b96:	e002      	b.n	8009b9e <HAL_GPIO_Init+0x1ee>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e000      	b.n	8009b9e <HAL_GPIO_Init+0x1ee>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba0:	f002 0203 	and.w	r2, r2, #3
 8009ba4:	0092      	lsls	r2, r2, #2
 8009ba6:	4093      	lsls	r3, r2
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009bae:	492f      	ldr	r1, [pc, #188]	@ (8009c6c <HAL_GPIO_Init+0x2bc>)
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	089b      	lsrs	r3, r3, #2
 8009bb4:	3302      	adds	r3, #2
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d006      	beq.n	8009bd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	492c      	ldr	r1, [pc, #176]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	608b      	str	r3, [r1, #8]
 8009bd4:	e006      	b.n	8009be4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009bd8:	689a      	ldr	r2, [r3, #8]
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	43db      	mvns	r3, r3
 8009bde:	4928      	ldr	r1, [pc, #160]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d006      	beq.n	8009bfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009bf0:	4b23      	ldr	r3, [pc, #140]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009bf2:	68da      	ldr	r2, [r3, #12]
 8009bf4:	4922      	ldr	r1, [pc, #136]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	60cb      	str	r3, [r1, #12]
 8009bfc:	e006      	b.n	8009c0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009bfe:	4b20      	ldr	r3, [pc, #128]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	43db      	mvns	r3, r3
 8009c06:	491e      	ldr	r1, [pc, #120]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d006      	beq.n	8009c26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009c18:	4b19      	ldr	r3, [pc, #100]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	4918      	ldr	r1, [pc, #96]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	604b      	str	r3, [r1, #4]
 8009c24:	e006      	b.n	8009c34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009c26:	4b16      	ldr	r3, [pc, #88]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	4914      	ldr	r1, [pc, #80]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009c30:	4013      	ands	r3, r2
 8009c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d021      	beq.n	8009c84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009c40:	4b0f      	ldr	r3, [pc, #60]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	490e      	ldr	r1, [pc, #56]	@ (8009c80 <HAL_GPIO_Init+0x2d0>)
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	600b      	str	r3, [r1, #0]
 8009c4c:	e021      	b.n	8009c92 <HAL_GPIO_Init+0x2e2>
 8009c4e:	bf00      	nop
 8009c50:	10320000 	.word	0x10320000
 8009c54:	10310000 	.word	0x10310000
 8009c58:	10220000 	.word	0x10220000
 8009c5c:	10210000 	.word	0x10210000
 8009c60:	10120000 	.word	0x10120000
 8009c64:	10110000 	.word	0x10110000
 8009c68:	40021000 	.word	0x40021000
 8009c6c:	40010000 	.word	0x40010000
 8009c70:	40010800 	.word	0x40010800
 8009c74:	40010c00 	.word	0x40010c00
 8009c78:	40011000 	.word	0x40011000
 8009c7c:	40011400 	.word	0x40011400
 8009c80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009c84:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <HAL_GPIO_Init+0x304>)
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	43db      	mvns	r3, r3
 8009c8c:	4909      	ldr	r1, [pc, #36]	@ (8009cb4 <HAL_GPIO_Init+0x304>)
 8009c8e:	4013      	ands	r3, r2
 8009c90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c94:	3301      	adds	r3, #1
 8009c96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f47f ae8e 	bne.w	80099c4 <HAL_GPIO_Init+0x14>
  }
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	372c      	adds	r7, #44	@ 0x2c
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bc80      	pop	{r7}
 8009cb2:	4770      	bx	lr
 8009cb4:	40010400 	.word	0x40010400

08009cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	807b      	strh	r3, [r7, #2]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009cc8:	787b      	ldrb	r3, [r7, #1]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cce:	887a      	ldrh	r2, [r7, #2]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009cd4:	e003      	b.n	8009cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009cd6:	887b      	ldrh	r3, [r7, #2]
 8009cd8:	041a      	lsls	r2, r3, #16
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	611a      	str	r2, [r3, #16]
}
 8009cde:	bf00      	nop
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bc80      	pop	{r7}
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d101      	bne.n	8009cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e12b      	b.n	8009f52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d106      	bne.n	8009d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff fb42 	bl	8009398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2224      	movs	r2, #36	@ 0x24
 8009d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0201 	bic.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009d4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d4c:	f002 f9e2 	bl	800c114 <HAL_RCC_GetPCLK1Freq>
 8009d50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	4a81      	ldr	r2, [pc, #516]	@ (8009f5c <HAL_I2C_Init+0x274>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d807      	bhi.n	8009d6c <HAL_I2C_Init+0x84>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4a80      	ldr	r2, [pc, #512]	@ (8009f60 <HAL_I2C_Init+0x278>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	bf94      	ite	ls
 8009d64:	2301      	movls	r3, #1
 8009d66:	2300      	movhi	r3, #0
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	e006      	b.n	8009d7a <HAL_I2C_Init+0x92>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8009f64 <HAL_I2C_Init+0x27c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	bf94      	ite	ls
 8009d74:	2301      	movls	r3, #1
 8009d76:	2300      	movhi	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e0e7      	b.n	8009f52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4a78      	ldr	r2, [pc, #480]	@ (8009f68 <HAL_I2C_Init+0x280>)
 8009d86:	fba2 2303 	umull	r2, r3, r2, r3
 8009d8a:	0c9b      	lsrs	r3, r3, #18
 8009d8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	4a6a      	ldr	r2, [pc, #424]	@ (8009f5c <HAL_I2C_Init+0x274>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d802      	bhi.n	8009dbc <HAL_I2C_Init+0xd4>
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	3301      	adds	r3, #1
 8009dba:	e009      	b.n	8009dd0 <HAL_I2C_Init+0xe8>
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009dc2:	fb02 f303 	mul.w	r3, r2, r3
 8009dc6:	4a69      	ldr	r2, [pc, #420]	@ (8009f6c <HAL_I2C_Init+0x284>)
 8009dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dcc:	099b      	lsrs	r3, r3, #6
 8009dce:	3301      	adds	r3, #1
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	6812      	ldr	r2, [r2, #0]
 8009dd4:	430b      	orrs	r3, r1
 8009dd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009de2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	495c      	ldr	r1, [pc, #368]	@ (8009f5c <HAL_I2C_Init+0x274>)
 8009dec:	428b      	cmp	r3, r1
 8009dee:	d819      	bhi.n	8009e24 <HAL_I2C_Init+0x13c>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	1e59      	subs	r1, r3, #1
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8009dfe:	1c59      	adds	r1, r3, #1
 8009e00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009e04:	400b      	ands	r3, r1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <HAL_I2C_Init+0x138>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	1e59      	subs	r1, r3, #1
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e18:	3301      	adds	r3, #1
 8009e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e1e:	e051      	b.n	8009ec4 <HAL_I2C_Init+0x1dc>
 8009e20:	2304      	movs	r3, #4
 8009e22:	e04f      	b.n	8009ec4 <HAL_I2C_Init+0x1dc>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d111      	bne.n	8009e50 <HAL_I2C_Init+0x168>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	1e58      	subs	r0, r3, #1
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6859      	ldr	r1, [r3, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	440b      	add	r3, r1
 8009e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e3e:	3301      	adds	r3, #1
 8009e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	bf0c      	ite	eq
 8009e48:	2301      	moveq	r3, #1
 8009e4a:	2300      	movne	r3, #0
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	e012      	b.n	8009e76 <HAL_I2C_Init+0x18e>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	1e58      	subs	r0, r3, #1
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6859      	ldr	r1, [r3, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	440b      	add	r3, r1
 8009e5e:	0099      	lsls	r1, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e66:	3301      	adds	r3, #1
 8009e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bf0c      	ite	eq
 8009e70:	2301      	moveq	r3, #1
 8009e72:	2300      	movne	r3, #0
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <HAL_I2C_Init+0x196>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e022      	b.n	8009ec4 <HAL_I2C_Init+0x1dc>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10e      	bne.n	8009ea4 <HAL_I2C_Init+0x1bc>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	1e58      	subs	r0, r3, #1
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6859      	ldr	r1, [r3, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	440b      	add	r3, r1
 8009e94:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e98:	3301      	adds	r3, #1
 8009e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ea2:	e00f      	b.n	8009ec4 <HAL_I2C_Init+0x1dc>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	1e58      	subs	r0, r3, #1
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6859      	ldr	r1, [r3, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	0099      	lsls	r1, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eba:	3301      	adds	r3, #1
 8009ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ec0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	6809      	ldr	r1, [r1, #0]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	69da      	ldr	r2, [r3, #28]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	431a      	orrs	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009ef2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	6911      	ldr	r1, [r2, #16]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	68d2      	ldr	r2, [r2, #12]
 8009efe:	4311      	orrs	r1, r2
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	6812      	ldr	r2, [r2, #0]
 8009f04:	430b      	orrs	r3, r1
 8009f06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	695a      	ldr	r2, [r3, #20]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0201 	orr.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2220      	movs	r2, #32
 8009f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	000186a0 	.word	0x000186a0
 8009f60:	001e847f 	.word	0x001e847f
 8009f64:	003d08ff 	.word	0x003d08ff
 8009f68:	431bde83 	.word	0x431bde83
 8009f6c:	10624dd3 	.word	0x10624dd3

08009f70 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f82:	2b80      	cmp	r3, #128	@ 0x80
 8009f84:	d103      	bne.n	8009f8e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	611a      	str	r2, [r3, #16]
  }
}
 8009f8e:	bf00      	nop
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bc80      	pop	{r7}
 8009f96:	4770      	bx	lr

08009f98 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d124      	bne.n	8009ff6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2228      	movs	r2, #40	@ 0x28
 8009fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d007      	beq.n	8009fd2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f042 0201 	orr.w	r2, r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009fe0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8009ff0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e000      	b.n	8009ff8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009ff6:	2302      	movs	r3, #2
  }
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bc80      	pop	{r7}
 800a000:	4770      	bx	lr

0800a002 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b088      	sub	sp, #32
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a022:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a02a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	2b10      	cmp	r3, #16
 800a030:	d003      	beq.n	800a03a <HAL_I2C_EV_IRQHandler+0x38>
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	2b40      	cmp	r3, #64	@ 0x40
 800a036:	f040 80b1 	bne.w	800a19c <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10d      	bne.n	800a070 <HAL_I2C_EV_IRQHandler+0x6e>
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a05a:	d003      	beq.n	800a064 <HAL_I2C_EV_IRQHandler+0x62>
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a062:	d101      	bne.n	800a068 <HAL_I2C_EV_IRQHandler+0x66>
 800a064:	2301      	movs	r3, #1
 800a066:	e000      	b.n	800a06a <HAL_I2C_EV_IRQHandler+0x68>
 800a068:	2300      	movs	r3, #0
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	f000 8114 	beq.w	800a298 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00b      	beq.n	800a092 <HAL_I2C_EV_IRQHandler+0x90>
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a080:	2b00      	cmp	r3, #0
 800a082:	d006      	beq.n	800a092 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 fc61 	bl	800b94c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fd60 	bl	800ab50 <I2C_Master_SB>
 800a090:	e083      	b.n	800a19a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	f003 0308 	and.w	r3, r3, #8
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d008      	beq.n	800a0ae <HAL_I2C_EV_IRQHandler+0xac>
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fdd7 	bl	800ac5a <I2C_Master_ADD10>
 800a0ac:	e075      	b.n	800a19a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	f003 0302 	and.w	r3, r3, #2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d008      	beq.n	800a0ca <HAL_I2C_EV_IRQHandler+0xc8>
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fdf2 	bl	800acac <I2C_Master_ADDR>
 800a0c8:	e067      	b.n	800a19a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d036      	beq.n	800a142 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0e2:	f000 80db 	beq.w	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00d      	beq.n	800a10c <HAL_I2C_EV_IRQHandler+0x10a>
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d008      	beq.n	800a10c <HAL_I2C_EV_IRQHandler+0x10a>
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	f003 0304 	and.w	r3, r3, #4
 800a100:	2b00      	cmp	r3, #0
 800a102:	d103      	bne.n	800a10c <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f9d4 	bl	800a4b2 <I2C_MasterTransmit_TXE>
 800a10a:	e046      	b.n	800a19a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	f003 0304 	and.w	r3, r3, #4
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 80c2 	beq.w	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 80bc 	beq.w	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a124:	7bbb      	ldrb	r3, [r7, #14]
 800a126:	2b21      	cmp	r3, #33	@ 0x21
 800a128:	d103      	bne.n	800a132 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fa5d 	bl	800a5ea <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a130:	e0b4      	b.n	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	2b40      	cmp	r3, #64	@ 0x40
 800a136:	f040 80b1 	bne.w	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 facb 	bl	800a6d6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a140:	e0ac      	b.n	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a14c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a150:	f000 80a4 	beq.w	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00d      	beq.n	800a17a <HAL_I2C_EV_IRQHandler+0x178>
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a164:	2b00      	cmp	r3, #0
 800a166:	d008      	beq.n	800a17a <HAL_I2C_EV_IRQHandler+0x178>
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	f003 0304 	and.w	r3, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d103      	bne.n	800a17a <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fb47 	bl	800a806 <I2C_MasterReceive_RXNE>
 800a178:	e00f      	b.n	800a19a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	f003 0304 	and.w	r3, r3, #4
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 808b 	beq.w	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f000 8085 	beq.w	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fbf2 	bl	800a97c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a198:	e080      	b.n	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
 800a19a:	e07f      	b.n	800a29c <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d004      	beq.n	800a1ae <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	61fb      	str	r3, [r7, #28]
 800a1ac:	e007      	b.n	800a1be <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	f003 0302 	and.w	r3, r3, #2
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d011      	beq.n	800a1ec <HAL_I2C_EV_IRQHandler+0x1ea>
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00c      	beq.n	800a1ec <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a1e2:	69b9      	ldr	r1, [r7, #24]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 ffb8 	bl	800b15a <I2C_Slave_ADDR>
 800a1ea:	e05a      	b.n	800a2a2 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f003 0310 	and.w	r3, r3, #16
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d008      	beq.n	800a208 <HAL_I2C_EV_IRQHandler+0x206>
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fff3 	bl	800b1ec <I2C_Slave_STOPF>
 800a206:	e04c      	b.n	800a2a2 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	2b21      	cmp	r3, #33	@ 0x21
 800a20c:	d002      	beq.n	800a214 <HAL_I2C_EV_IRQHandler+0x212>
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
 800a210:	2b29      	cmp	r3, #41	@ 0x29
 800a212:	d120      	bne.n	800a256 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00d      	beq.n	800a23a <HAL_I2C_EV_IRQHandler+0x238>
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a224:	2b00      	cmp	r3, #0
 800a226:	d008      	beq.n	800a23a <HAL_I2C_EV_IRQHandler+0x238>
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	f003 0304 	and.w	r3, r3, #4
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d103      	bne.n	800a23a <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fed5 	bl	800afe2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a238:	e032      	b.n	800a2a0 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	d02d      	beq.n	800a2a0 <HAL_I2C_EV_IRQHandler+0x29e>
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d028      	beq.n	800a2a0 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 ff04 	bl	800b05c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a254:	e024      	b.n	800a2a0 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00d      	beq.n	800a27c <HAL_I2C_EV_IRQHandler+0x27a>
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a266:	2b00      	cmp	r3, #0
 800a268:	d008      	beq.n	800a27c <HAL_I2C_EV_IRQHandler+0x27a>
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d103      	bne.n	800a27c <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 ff11 	bl	800b09c <I2C_SlaveReceive_RXNE>
 800a27a:	e012      	b.n	800a2a2 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	f003 0304 	and.w	r3, r3, #4
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00d      	beq.n	800a2a2 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d008      	beq.n	800a2a2 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 ff41 	bl	800b118 <I2C_SlaveReceive_BTF>
 800a296:	e004      	b.n	800a2a2 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a298:	bf00      	nop
 800a29a:	e002      	b.n	800a2a2 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a29c:	bf00      	nop
 800a29e:	e000      	b.n	800a2a2 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a2a0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a2a2:	3720      	adds	r7, #32
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08a      	sub	sp, #40	@ 0x28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a2ca:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d015      	beq.n	800a302 <HAL_I2C_ER_IRQHandler+0x5a>
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d010      	beq.n	800a302 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	f043 0301 	orr.w	r3, r3, #1
 800a2e6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a2f0:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a300:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00d      	beq.n	800a328 <HAL_I2C_ER_IRQHandler+0x80>
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a312:	2b00      	cmp	r3, #0
 800a314:	d008      	beq.n	800a328 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a318:	f043 0302 	orr.w	r3, r3, #2
 800a31c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800a326:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d03e      	beq.n	800a3b0 <HAL_I2C_ER_IRQHandler+0x108>
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d039      	beq.n	800a3b0 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800a33c:	7efb      	ldrb	r3, [r7, #27]
 800a33e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a344:	b29b      	uxth	r3, r3
 800a346:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a34e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a354:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a356:	7ebb      	ldrb	r3, [r7, #26]
 800a358:	2b20      	cmp	r3, #32
 800a35a:	d112      	bne.n	800a382 <HAL_I2C_ER_IRQHandler+0xda>
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10f      	bne.n	800a382 <HAL_I2C_ER_IRQHandler+0xda>
 800a362:	7cfb      	ldrb	r3, [r7, #19]
 800a364:	2b21      	cmp	r3, #33	@ 0x21
 800a366:	d008      	beq.n	800a37a <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a368:	7cfb      	ldrb	r3, [r7, #19]
 800a36a:	2b29      	cmp	r3, #41	@ 0x29
 800a36c:	d005      	beq.n	800a37a <HAL_I2C_ER_IRQHandler+0xd2>
 800a36e:	7cfb      	ldrb	r3, [r7, #19]
 800a370:	2b28      	cmp	r3, #40	@ 0x28
 800a372:	d106      	bne.n	800a382 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b21      	cmp	r3, #33	@ 0x21
 800a378:	d103      	bne.n	800a382 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 f866 	bl	800b44c <I2C_Slave_AF>
 800a380:	e016      	b.n	800a3b0 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a38a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38e:	f043 0304 	orr.w	r3, r3, #4
 800a392:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a394:	7efb      	ldrb	r3, [r7, #27]
 800a396:	2b10      	cmp	r3, #16
 800a398:	d002      	beq.n	800a3a0 <HAL_I2C_ER_IRQHandler+0xf8>
 800a39a:	7efb      	ldrb	r3, [r7, #27]
 800a39c:	2b40      	cmp	r3, #64	@ 0x40
 800a39e:	d107      	bne.n	800a3b0 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3ae:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00d      	beq.n	800a3d6 <HAL_I2C_ER_IRQHandler+0x12e>
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d008      	beq.n	800a3d6 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c6:	f043 0308 	orr.w	r3, r3, #8
 800a3ca:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800a3d4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d008      	beq.n	800a3ee <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f001 f8a3 	bl	800b534 <I2C_ITError>
  }
}
 800a3ee:	bf00      	nop
 800a3f0:	3728      	adds	r7, #40	@ 0x28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a3fe:	bf00      	nop
 800a400:	370c      	adds	r7, #12
 800a402:	46bd      	mov	sp, r7
 800a404:	bc80      	pop	{r7}
 800a406:	4770      	bx	lr

0800a408 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr

0800a41a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	bc80      	pop	{r7}
 800a42a:	4770      	bx	lr

0800a42c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	bc80      	pop	{r7}
 800a43c:	4770      	bx	lr

0800a43e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
 800a44a:	4613      	mov	r3, r2
 800a44c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a44e:	bf00      	nop
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	bc80      	pop	{r7}
 800a456:	4770      	bx	lr

0800a458 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	bc80      	pop	{r7}
 800a468:	4770      	bx	lr

0800a46a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b083      	sub	sp, #12
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a472:	bf00      	nop
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	bc80      	pop	{r7}
 800a47a:	4770      	bx	lr

0800a47c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	bc80      	pop	{r7}
 800a48c:	4770      	bx	lr

0800a48e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bc80      	pop	{r7}
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bc80      	pop	{r7}
 800a4b0:	4770      	bx	lr

0800a4b2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4c8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d150      	bne.n	800a57a <I2C_MasterTransmit_TXE+0xc8>
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	2b21      	cmp	r3, #33	@ 0x21
 800a4dc:	d14d      	bne.n	800a57a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b08      	cmp	r3, #8
 800a4e2:	d01d      	beq.n	800a520 <I2C_MasterTransmit_TXE+0x6e>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b20      	cmp	r3, #32
 800a4e8:	d01a      	beq.n	800a520 <I2C_MasterTransmit_TXE+0x6e>
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a4f0:	d016      	beq.n	800a520 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a500:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2211      	movs	r2, #17
 800a506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff ff6c 	bl	800a3f6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a51e:	e060      	b.n	800a5e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a52e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a53e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b40      	cmp	r3, #64	@ 0x40
 800a558:	d107      	bne.n	800a56a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7ff ff81 	bl	800a46a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a568:	e03b      	b.n	800a5e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff ff3f 	bl	800a3f6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a578:	e033      	b.n	800a5e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	2b21      	cmp	r3, #33	@ 0x21
 800a57e:	d005      	beq.n	800a58c <I2C_MasterTransmit_TXE+0xda>
 800a580:	7bbb      	ldrb	r3, [r7, #14]
 800a582:	2b40      	cmp	r3, #64	@ 0x40
 800a584:	d12d      	bne.n	800a5e2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	2b22      	cmp	r3, #34	@ 0x22
 800a58a:	d12a      	bne.n	800a5e2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a590:	b29b      	uxth	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d108      	bne.n	800a5a8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5a4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a5a6:	e01c      	b.n	800a5e2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b40      	cmp	r3, #64	@ 0x40
 800a5b2:	d103      	bne.n	800a5bc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f88e 	bl	800a6d6 <I2C_MemoryTransmit_TXE_BTF>
}
 800a5ba:	e012      	b.n	800a5e2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c0:	781a      	ldrb	r2, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a5e0:	e7ff      	b.n	800a5e2 <I2C_MasterTransmit_TXE+0x130>
 800a5e2:	bf00      	nop
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b21      	cmp	r3, #33	@ 0x21
 800a602:	d164      	bne.n	800a6ce <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a608:	b29b      	uxth	r3, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d012      	beq.n	800a634 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a612:	781a      	ldrb	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a628:	b29b      	uxth	r3, r3
 800a62a:	3b01      	subs	r3, #1
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a632:	e04c      	b.n	800a6ce <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b08      	cmp	r3, #8
 800a638:	d01d      	beq.n	800a676 <I2C_MasterTransmit_BTF+0x8c>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b20      	cmp	r3, #32
 800a63e:	d01a      	beq.n	800a676 <I2C_MasterTransmit_BTF+0x8c>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a646:	d016      	beq.n	800a676 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a656:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2211      	movs	r2, #17
 800a65c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7ff fec1 	bl	800a3f6 <HAL_I2C_MasterTxCpltCallback>
}
 800a674:	e02b      	b.n	800a6ce <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a684:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a694:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b40      	cmp	r3, #64	@ 0x40
 800a6ae:	d107      	bne.n	800a6c0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7ff fed6 	bl	800a46a <HAL_I2C_MemTxCpltCallback>
}
 800a6be:	e006      	b.n	800a6ce <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7ff fe94 	bl	800a3f6 <HAL_I2C_MasterTxCpltCallback>
}
 800a6ce:	bf00      	nop
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d11d      	bne.n	800a72a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d10b      	bne.n	800a70e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a706:	1c9a      	adds	r2, r3, #2
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800a70c:	e077      	b.n	800a7fe <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a712:	b29b      	uxth	r3, r3
 800a714:	121b      	asrs	r3, r3, #8
 800a716:	b2da      	uxtb	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a728:	e069      	b.n	800a7fe <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d10b      	bne.n	800a74a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a736:	b2da      	uxtb	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a748:	e059      	b.n	800a7fe <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d152      	bne.n	800a7f8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	2b22      	cmp	r3, #34	@ 0x22
 800a756:	d10d      	bne.n	800a774 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a766:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a772:	e044      	b.n	800a7fe <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a778:	b29b      	uxth	r3, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d015      	beq.n	800a7aa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	2b21      	cmp	r3, #33	@ 0x21
 800a782:	d112      	bne.n	800a7aa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a788:	781a      	ldrb	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a794:	1c5a      	adds	r2, r3, #1
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a7a8:	e029      	b.n	800a7fe <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d124      	bne.n	800a7fe <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
 800a7b6:	2b21      	cmp	r3, #33	@ 0x21
 800a7b8:	d121      	bne.n	800a7fe <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	685a      	ldr	r2, [r3, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a7c8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7d8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff fe3a 	bl	800a46a <HAL_I2C_MemTxCpltCallback>
}
 800a7f6:	e002      	b.n	800a7fe <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7ff fbb9 	bl	8009f70 <I2C_Flush_DR>
}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b22      	cmp	r3, #34	@ 0x22
 800a818:	f040 80ac 	bne.w	800a974 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a820:	b29b      	uxth	r3, r3
 800a822:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b03      	cmp	r3, #3
 800a828:	d921      	bls.n	800a86e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	691a      	ldr	r2, [r3, #16]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a834:	b2d2      	uxtb	r2, r2
 800a836:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a846:	b29b      	uxth	r3, r3
 800a848:	3b01      	subs	r3, #1
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a854:	b29b      	uxth	r3, r3
 800a856:	2b03      	cmp	r3, #3
 800a858:	f040 808c 	bne.w	800a974 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a86a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800a86c:	e082      	b.n	800a974 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a872:	2b02      	cmp	r3, #2
 800a874:	d075      	beq.n	800a962 <I2C_MasterReceive_RXNE+0x15c>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d002      	beq.n	800a882 <I2C_MasterReceive_RXNE+0x7c>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d16f      	bne.n	800a962 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 f830 	bl	800b8e8 <I2C_WaitOnSTOPRequestThroughIT>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d142      	bne.n	800a914 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a89c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a8ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	691a      	ldr	r2, [r3, #16]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b8:	b2d2      	uxtb	r2, r2
 800a8ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b40      	cmp	r3, #64	@ 0x40
 800a8e6:	d10a      	bne.n	800a8fe <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff fdc0 	bl	800a47c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a8fc:	e03a      	b.n	800a974 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2212      	movs	r2, #18
 800a90a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff fd7b 	bl	800a408 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a912:	e02f      	b.n	800a974 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	685a      	ldr	r2, [r3, #4]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a922:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	691a      	ldr	r2, [r3, #16]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92e:	b2d2      	uxtb	r2, r2
 800a930:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a940:	b29b      	uxth	r3, r3
 800a942:	3b01      	subs	r3, #1
 800a944:	b29a      	uxth	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7ff fd97 	bl	800a48e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a960:	e008      	b.n	800a974 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a970:	605a      	str	r2, [r3, #4]
}
 800a972:	e7ff      	b.n	800a974 <I2C_MasterReceive_RXNE+0x16e>
 800a974:	bf00      	nop
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a988:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a98e:	b29b      	uxth	r3, r3
 800a990:	2b04      	cmp	r3, #4
 800a992:	d11b      	bne.n	800a9cc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9a2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	691a      	ldr	r2, [r3, #16]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ae:	b2d2      	uxtb	r2, r2
 800a9b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a9ca:	e0bd      	b.n	800ab48 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d129      	bne.n	800aa2a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	d00a      	beq.n	800aa02 <I2C_MasterReceive_BTF+0x86>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d007      	beq.n	800aa02 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa00:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	691a      	ldr	r2, [r3, #16]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0c:	b2d2      	uxtb	r2, r2
 800aa0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	3b01      	subs	r3, #1
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800aa28:	e08e      	b.n	800ab48 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d176      	bne.n	800ab22 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d002      	beq.n	800aa40 <I2C_MasterReceive_BTF+0xc4>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b10      	cmp	r3, #16
 800aa3e:	d108      	bne.n	800aa52 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	e019      	b.n	800aa86 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b04      	cmp	r3, #4
 800aa56:	d002      	beq.n	800aa5e <I2C_MasterReceive_BTF+0xe2>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d108      	bne.n	800aa70 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	e00a      	b.n	800aa86 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2b10      	cmp	r3, #16
 800aa74:	d007      	beq.n	800aa86 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa84:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	691a      	ldr	r2, [r3, #16]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa90:	b2d2      	uxtb	r2, r2
 800aa92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	691a      	ldr	r2, [r3, #16]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab6:	b2d2      	uxtb	r2, r2
 800aab8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aabe:	1c5a      	adds	r2, r3, #1
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	3b01      	subs	r3, #1
 800aacc:	b29a      	uxth	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800aae0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2220      	movs	r2, #32
 800aae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b40      	cmp	r3, #64	@ 0x40
 800aaf4:	d10a      	bne.n	800ab0c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fcb9 	bl	800a47c <HAL_I2C_MemRxCpltCallback>
}
 800ab0a:	e01d      	b.n	800ab48 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2212      	movs	r2, #18
 800ab18:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff fc74 	bl	800a408 <HAL_I2C_MasterRxCpltCallback>
}
 800ab20:	e012      	b.n	800ab48 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	691a      	ldr	r2, [r3, #16]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2c:	b2d2      	uxtb	r2, r2
 800ab2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	3b01      	subs	r3, #1
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ab48:	bf00      	nop
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b40      	cmp	r3, #64	@ 0x40
 800ab62:	d117      	bne.n	800ab94 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d109      	bne.n	800ab80 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	461a      	mov	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ab7c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800ab7e:	e067      	b.n	800ac50 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	f043 0301 	orr.w	r3, r3, #1
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	611a      	str	r2, [r3, #16]
}
 800ab92:	e05d      	b.n	800ac50 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab9c:	d133      	bne.n	800ac06 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b21      	cmp	r3, #33	@ 0x21
 800aba8:	d109      	bne.n	800abbe <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	461a      	mov	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800abba:	611a      	str	r2, [r3, #16]
 800abbc:	e008      	b.n	800abd0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	f043 0301 	orr.w	r3, r3, #1
 800abc8:	b2da      	uxtb	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d004      	beq.n	800abe2 <I2C_Master_SB+0x92>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d108      	bne.n	800abf4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d032      	beq.n	800ac50 <I2C_Master_SB+0x100>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d02d      	beq.n	800ac50 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac02:	605a      	str	r2, [r3, #4]
}
 800ac04:	e024      	b.n	800ac50 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10e      	bne.n	800ac2c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	11db      	asrs	r3, r3, #7
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	f003 0306 	and.w	r3, r3, #6
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	f063 030f 	orn	r3, r3, #15
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	611a      	str	r2, [r3, #16]
}
 800ac2a:	e011      	b.n	800ac50 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d10d      	bne.n	800ac50 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	11db      	asrs	r3, r3, #7
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	f003 0306 	and.w	r3, r3, #6
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	f063 030e 	orn	r3, r3, #14
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	611a      	str	r2, [r3, #16]
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bc80      	pop	{r7}
 800ac58:	4770      	bx	lr

0800ac5a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac66:	b2da      	uxtb	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d004      	beq.n	800ac80 <I2C_Master_ADD10+0x26>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d108      	bne.n	800ac92 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00c      	beq.n	800aca2 <I2C_Master_ADD10+0x48>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d007      	beq.n	800aca2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aca0:	605a      	str	r2, [r3, #4]
  }
}
 800aca2:	bf00      	nop
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bc80      	pop	{r7}
 800acaa:	4770      	bx	lr

0800acac <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800acac:	b480      	push	{r7}
 800acae:	b091      	sub	sp, #68	@ 0x44
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800acba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc8:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b22      	cmp	r3, #34	@ 0x22
 800acd4:	f040 8174 	bne.w	800afc0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10f      	bne.n	800ad00 <I2C_Master_ADDR+0x54>
 800ace0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ace4:	2b40      	cmp	r3, #64	@ 0x40
 800ace6:	d10b      	bne.n	800ad00 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ace8:	2300      	movs	r3, #0
 800acea:	633b      	str	r3, [r7, #48]	@ 0x30
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800acfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfe:	e16b      	b.n	800afd8 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d11d      	bne.n	800ad44 <I2C_Master_ADDR+0x98>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ad10:	d118      	bne.n	800ad44 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad12:	2300      	movs	r3, #0
 800ad14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad36:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	651a      	str	r2, [r3, #80]	@ 0x50
 800ad42:	e149      	b.n	800afd8 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d113      	bne.n	800ad76 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad4e:	2300      	movs	r3, #0
 800ad50:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad62:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	e120      	b.n	800afb8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	f040 808a 	bne.w	800ae96 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800ad82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ad88:	d137      	bne.n	800adfa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad98:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ada4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ada8:	d113      	bne.n	800add2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adb8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adba:	2300      	movs	r3, #0
 800adbc:	627b      	str	r3, [r7, #36]	@ 0x24
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	627b      	str	r3, [r7, #36]	@ 0x24
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	e0f2      	b.n	800afb8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800add2:	2300      	movs	r3, #0
 800add4:	623b      	str	r3, [r7, #32]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	623b      	str	r3, [r7, #32]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	623b      	str	r3, [r7, #32]
 800ade6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	e0de      	b.n	800afb8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800adfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfc:	2b08      	cmp	r3, #8
 800adfe:	d02e      	beq.n	800ae5e <I2C_Master_ADDR+0x1b2>
 800ae00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae02:	2b20      	cmp	r3, #32
 800ae04:	d02b      	beq.n	800ae5e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800ae06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae08:	2b12      	cmp	r3, #18
 800ae0a:	d102      	bne.n	800ae12 <I2C_Master_ADDR+0x166>
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d125      	bne.n	800ae5e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ae12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d00e      	beq.n	800ae36 <I2C_Master_ADDR+0x18a>
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d00b      	beq.n	800ae36 <I2C_Master_ADDR+0x18a>
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae20:	2b10      	cmp	r3, #16
 800ae22:	d008      	beq.n	800ae36 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	e007      	b.n	800ae46 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae44:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae46:	2300      	movs	r3, #0
 800ae48:	61fb      	str	r3, [r7, #28]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	695b      	ldr	r3, [r3, #20]
 800ae50:	61fb      	str	r3, [r7, #28]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	61fb      	str	r3, [r7, #28]
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	e0ac      	b.n	800afb8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae6c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61bb      	str	r3, [r7, #24]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	61bb      	str	r3, [r7, #24]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	61bb      	str	r3, [r7, #24]
 800ae82:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	e090      	b.n	800afb8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d158      	bne.n	800af52 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800aea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea2:	2b04      	cmp	r3, #4
 800aea4:	d021      	beq.n	800aeea <I2C_Master_ADDR+0x23e>
 800aea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d01e      	beq.n	800aeea <I2C_Master_ADDR+0x23e>
 800aeac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeae:	2b10      	cmp	r3, #16
 800aeb0:	d01b      	beq.n	800aeea <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aec0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aec2:	2300      	movs	r3, #0
 800aec4:	617b      	str	r3, [r7, #20]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	617b      	str	r3, [r7, #20]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aee6:	601a      	str	r2, [r3, #0]
 800aee8:	e012      	b.n	800af10 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aef8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aefa:	2300      	movs	r3, #0
 800aefc:	613b      	str	r3, [r7, #16]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	613b      	str	r3, [r7, #16]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	613b      	str	r3, [r7, #16]
 800af0e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af1e:	d14b      	bne.n	800afb8 <I2C_Master_ADDR+0x30c>
 800af20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800af26:	d00b      	beq.n	800af40 <I2C_Master_ADDR+0x294>
 800af28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d008      	beq.n	800af40 <I2C_Master_ADDR+0x294>
 800af2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af30:	2b08      	cmp	r3, #8
 800af32:	d005      	beq.n	800af40 <I2C_Master_ADDR+0x294>
 800af34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af36:	2b10      	cmp	r3, #16
 800af38:	d002      	beq.n	800af40 <I2C_Master_ADDR+0x294>
 800af3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	d13b      	bne.n	800afb8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800af4e:	605a      	str	r2, [r3, #4]
 800af50:	e032      	b.n	800afb8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af60:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af70:	d117      	bne.n	800afa2 <I2C_Master_ADDR+0x2f6>
 800af72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800af78:	d00b      	beq.n	800af92 <I2C_Master_ADDR+0x2e6>
 800af7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d008      	beq.n	800af92 <I2C_Master_ADDR+0x2e6>
 800af80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af82:	2b08      	cmp	r3, #8
 800af84:	d005      	beq.n	800af92 <I2C_Master_ADDR+0x2e6>
 800af86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af88:	2b10      	cmp	r3, #16
 800af8a:	d002      	beq.n	800af92 <I2C_Master_ADDR+0x2e6>
 800af8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8e:	2b20      	cmp	r3, #32
 800af90:	d107      	bne.n	800afa2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800afa0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	60fb      	str	r3, [r7, #12]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800afbe:	e00b      	b.n	800afd8 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afc0:	2300      	movs	r3, #0
 800afc2:	60bb      	str	r3, [r7, #8]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	60bb      	str	r3, [r7, #8]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	60bb      	str	r3, [r7, #8]
 800afd4:	68bb      	ldr	r3, [r7, #8]
}
 800afd6:	e7ff      	b.n	800afd8 <I2C_Master_ADDR+0x32c>
 800afd8:	bf00      	nop
 800afda:	3744      	adds	r7, #68	@ 0x44
 800afdc:	46bd      	mov	sp, r7
 800afde:	bc80      	pop	{r7}
 800afe0:	4770      	bx	lr

0800afe2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b084      	sub	sp, #16
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aff0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d02b      	beq.n	800b054 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b000:	781a      	ldrb	r2, [r3, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b00c:	1c5a      	adds	r2, r3, #1
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b016:	b29b      	uxth	r3, r3
 800b018:	3b01      	subs	r3, #1
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b024:	b29b      	uxth	r3, r3
 800b026:	2b00      	cmp	r3, #0
 800b028:	d114      	bne.n	800b054 <I2C_SlaveTransmit_TXE+0x72>
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2b29      	cmp	r3, #41	@ 0x29
 800b02e:	d111      	bne.n	800b054 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b03e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2221      	movs	r2, #33	@ 0x21
 800b044:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2228      	movs	r2, #40	@ 0x28
 800b04a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7ff f9e3 	bl	800a41a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b054:	bf00      	nop
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b068:	b29b      	uxth	r3, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d011      	beq.n	800b092 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b072:	781a      	ldrb	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b088:	b29b      	uxth	r3, r3
 800b08a:	3b01      	subs	r3, #1
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b092:	bf00      	nop
 800b094:	370c      	adds	r7, #12
 800b096:	46bd      	mov	sp, r7
 800b098:	bc80      	pop	{r7}
 800b09a:	4770      	bx	lr

0800b09c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d02c      	beq.n	800b110 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	691a      	ldr	r2, [r3, #16]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c0:	b2d2      	uxtb	r2, r2
 800b0c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d114      	bne.n	800b110 <I2C_SlaveReceive_RXNE+0x74>
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0ea:	d111      	bne.n	800b110 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685a      	ldr	r2, [r3, #4]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2222      	movs	r2, #34	@ 0x22
 800b100:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2228      	movs	r2, #40	@ 0x28
 800b106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7ff f98e 	bl	800a42c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b110:	bf00      	nop
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b124:	b29b      	uxth	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d012      	beq.n	800b150 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	691a      	ldr	r2, [r3, #16]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b134:	b2d2      	uxtb	r2, r2
 800b136:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b146:	b29b      	uxth	r3, r3
 800b148:	3b01      	subs	r3, #1
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	bc80      	pop	{r7}
 800b158:	4770      	bx	lr

0800b15a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b174:	2b28      	cmp	r3, #40	@ 0x28
 800b176:	d125      	bne.n	800b1c4 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b186:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	f003 0304 	and.w	r3, r3, #4
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b192:	2301      	movs	r3, #1
 800b194:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d103      	bne.n	800b1a8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	81bb      	strh	r3, [r7, #12]
 800b1a6:	e002      	b.n	800b1ae <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b1b6:	89ba      	ldrh	r2, [r7, #12]
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7ff f93e 	bl	800a43e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b1c2:	e00e      	b.n	800b1e2 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60bb      	str	r3, [r7, #8]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	60bb      	str	r3, [r7, #8]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	60bb      	str	r3, [r7, #8]
 800b1d8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b20a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b20c:	2300      	movs	r3, #0
 800b20e:	60bb      	str	r3, [r7, #8]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	60bb      	str	r3, [r7, #8]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f042 0201 	orr.w	r2, r2, #1
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b238:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b248:	d172      	bne.n	800b330 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	2b22      	cmp	r3, #34	@ 0x22
 800b24e:	d002      	beq.n	800b256 <I2C_Slave_STOPF+0x6a>
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	2b2a      	cmp	r3, #42	@ 0x2a
 800b254:	d135      	bne.n	800b2c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	b29a      	uxth	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b268:	b29b      	uxth	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b272:	f043 0204 	orr.w	r2, r3, #4
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b288:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fb80 	bl	8009994 <HAL_DMA_GetState>
 800b294:	4603      	mov	r3, r0
 800b296:	2b01      	cmp	r3, #1
 800b298:	d049      	beq.n	800b32e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b29e:	4a69      	ldr	r2, [pc, #420]	@ (800b444 <I2C_Slave_STOPF+0x258>)
 800b2a0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe fafc 	bl	80098a4 <HAL_DMA_Abort_IT>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d03d      	beq.n	800b32e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b2c0:	e035      	b.n	800b32e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	b29a      	uxth	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d005      	beq.n	800b2e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2de:	f043 0204 	orr.w	r2, r3, #4
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b2f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe fb4a 	bl	8009994 <HAL_DMA_GetState>
 800b300:	4603      	mov	r3, r0
 800b302:	2b01      	cmp	r3, #1
 800b304:	d014      	beq.n	800b330 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b30a:	4a4e      	ldr	r2, [pc, #312]	@ (800b444 <I2C_Slave_STOPF+0x258>)
 800b30c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe fac6 	bl	80098a4 <HAL_DMA_Abort_IT>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d008      	beq.n	800b330 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b328:	4610      	mov	r0, r2
 800b32a:	4798      	blx	r3
 800b32c:	e000      	b.n	800b330 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b32e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b334:	b29b      	uxth	r3, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d03e      	beq.n	800b3b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b04      	cmp	r3, #4
 800b346:	d112      	bne.n	800b36e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	691a      	ldr	r2, [r3, #16]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b352:	b2d2      	uxtb	r2, r2
 800b354:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b364:	b29b      	uxth	r3, r3
 800b366:	3b01      	subs	r3, #1
 800b368:	b29a      	uxth	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b378:	2b40      	cmp	r3, #64	@ 0x40
 800b37a:	d112      	bne.n	800b3a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	691a      	ldr	r2, [r3, #16]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38e:	1c5a      	adds	r2, r3, #1
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b398:	b29b      	uxth	r3, r3
 800b39a:	3b01      	subs	r3, #1
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d005      	beq.n	800b3b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3b0:	f043 0204 	orr.w	r2, r3, #4
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d003      	beq.n	800b3c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f8b7 	bl	800b534 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b3c6:	e039      	b.n	800b43c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3cc:	d109      	bne.n	800b3e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2228      	movs	r2, #40	@ 0x28
 800b3d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff f825 	bl	800a42c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b28      	cmp	r3, #40	@ 0x28
 800b3ec:	d111      	bne.n	800b412 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a15      	ldr	r2, [pc, #84]	@ (800b448 <I2C_Slave_STOPF+0x25c>)
 800b3f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7ff f824 	bl	800a458 <HAL_I2C_ListenCpltCallback>
}
 800b410:	e014      	b.n	800b43c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b416:	2b22      	cmp	r3, #34	@ 0x22
 800b418:	d002      	beq.n	800b420 <I2C_Slave_STOPF+0x234>
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
 800b41c:	2b22      	cmp	r3, #34	@ 0x22
 800b41e:	d10d      	bne.n	800b43c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2220      	movs	r2, #32
 800b42a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f7fe fff8 	bl	800a42c <HAL_I2C_SlaveRxCpltCallback>
}
 800b43c:	bf00      	nop
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	0800b799 	.word	0x0800b799
 800b448:	ffff0000 	.word	0xffff0000

0800b44c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b45a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b460:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b08      	cmp	r3, #8
 800b466:	d002      	beq.n	800b46e <I2C_Slave_AF+0x22>
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	2b20      	cmp	r3, #32
 800b46c:	d129      	bne.n	800b4c2 <I2C_Slave_AF+0x76>
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	2b28      	cmp	r3, #40	@ 0x28
 800b472:	d126      	bne.n	800b4c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a2e      	ldr	r2, [pc, #184]	@ (800b530 <I2C_Slave_AF+0xe4>)
 800b478:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b488:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b492:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2220      	movs	r2, #32
 800b4ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7fe ffcc 	bl	800a458 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b4c0:	e031      	b.n	800b526 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	2b21      	cmp	r3, #33	@ 0x21
 800b4c6:	d129      	bne.n	800b51c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a19      	ldr	r2, [pc, #100]	@ (800b530 <I2C_Slave_AF+0xe4>)
 800b4cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2221      	movs	r2, #33	@ 0x21
 800b4d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b4f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b4fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b50c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7fe fd2e 	bl	8009f70 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7fe ff80 	bl	800a41a <HAL_I2C_SlaveTxCpltCallback>
}
 800b51a:	e004      	b.n	800b526 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b524:	615a      	str	r2, [r3, #20]
}
 800b526:	bf00      	nop
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	ffff0000 	.word	0xffff0000

0800b534 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b542:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b54a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
 800b54e:	2b10      	cmp	r3, #16
 800b550:	d002      	beq.n	800b558 <I2C_ITError+0x24>
 800b552:	7bbb      	ldrb	r3, [r7, #14]
 800b554:	2b40      	cmp	r3, #64	@ 0x40
 800b556:	d10a      	bne.n	800b56e <I2C_ITError+0x3a>
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	2b22      	cmp	r3, #34	@ 0x22
 800b55c:	d107      	bne.n	800b56e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b56c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
 800b570:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b574:	2b28      	cmp	r3, #40	@ 0x28
 800b576:	d107      	bne.n	800b588 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2228      	movs	r2, #40	@ 0x28
 800b582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b586:	e015      	b.n	800b5b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b596:	d00a      	beq.n	800b5ae <I2C_ITError+0x7a>
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	2b60      	cmp	r3, #96	@ 0x60
 800b59c:	d007      	beq.n	800b5ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2220      	movs	r2, #32
 800b5a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5c2:	d162      	bne.n	800b68a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	685a      	ldr	r2, [r3, #4]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b5d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d020      	beq.n	800b624 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5e6:	4a6a      	ldr	r2, [pc, #424]	@ (800b790 <I2C_ITError+0x25c>)
 800b5e8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe f958 	bl	80098a4 <HAL_DMA_Abort_IT>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 8089 	beq.w	800b70e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f022 0201 	bic.w	r2, r2, #1
 800b60a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b61e:	4610      	mov	r0, r2
 800b620:	4798      	blx	r3
 800b622:	e074      	b.n	800b70e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b628:	4a59      	ldr	r2, [pc, #356]	@ (800b790 <I2C_ITError+0x25c>)
 800b62a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b630:	4618      	mov	r0, r3
 800b632:	f7fe f937 	bl	80098a4 <HAL_DMA_Abort_IT>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d068      	beq.n	800b70e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b646:	2b40      	cmp	r3, #64	@ 0x40
 800b648:	d10b      	bne.n	800b662 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	691a      	ldr	r2, [r3, #16]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b654:	b2d2      	uxtb	r2, r2
 800b656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b65c:	1c5a      	adds	r2, r3, #1
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f022 0201 	bic.w	r2, r2, #1
 800b670:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2220      	movs	r2, #32
 800b676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b67e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b684:	4610      	mov	r0, r2
 800b686:	4798      	blx	r3
 800b688:	e041      	b.n	800b70e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b60      	cmp	r3, #96	@ 0x60
 800b694:	d125      	bne.n	800b6e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2220      	movs	r2, #32
 800b69a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6ae:	2b40      	cmp	r3, #64	@ 0x40
 800b6b0:	d10b      	bne.n	800b6ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	691a      	ldr	r2, [r3, #16]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6c4:	1c5a      	adds	r2, r3, #1
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f022 0201 	bic.w	r2, r2, #1
 800b6d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7fe fee0 	bl	800a4a0 <HAL_I2C_AbortCpltCallback>
 800b6e0:	e015      	b.n	800b70e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6ec:	2b40      	cmp	r3, #64	@ 0x40
 800b6ee:	d10b      	bne.n	800b708 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	691a      	ldr	r2, [r3, #16]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fa:	b2d2      	uxtb	r2, r2
 800b6fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7fe fec0 	bl	800a48e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b712:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10e      	bne.n	800b73c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b724:	2b00      	cmp	r3, #0
 800b726:	d109      	bne.n	800b73c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d104      	bne.n	800b73c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d007      	beq.n	800b74c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b74a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b752:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d113      	bne.n	800b788 <I2C_ITError+0x254>
 800b760:	7bfb      	ldrb	r3, [r7, #15]
 800b762:	2b28      	cmp	r3, #40	@ 0x28
 800b764:	d110      	bne.n	800b788 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a0a      	ldr	r2, [pc, #40]	@ (800b794 <I2C_ITError+0x260>)
 800b76a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2220      	movs	r2, #32
 800b776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7fe fe68 	bl	800a458 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b788:	bf00      	nop
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	0800b799 	.word	0x0800b799
 800b794:	ffff0000 	.word	0xffff0000

0800b798 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7b0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b7b2:	4b4b      	ldr	r3, [pc, #300]	@ (800b8e0 <I2C_DMAAbort+0x148>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	08db      	lsrs	r3, r3, #3
 800b7b8:	4a4a      	ldr	r2, [pc, #296]	@ (800b8e4 <I2C_DMAAbort+0x14c>)
 800b7ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b7be:	0a1a      	lsrs	r2, r3, #8
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4413      	add	r3, r2
 800b7c6:	00da      	lsls	r2, r3, #3
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d6:	f043 0220 	orr.w	r2, r3, #32
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800b7de:	e00a      	b.n	800b7f6 <I2C_DMAAbort+0x5e>
    }
    count--;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7f4:	d0ea      	beq.n	800b7cc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b802:	2200      	movs	r2, #0
 800b804:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d003      	beq.n	800b816 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b812:	2200      	movs	r2, #0
 800b814:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b824:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2200      	movs	r2, #0
 800b82a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b830:	2b00      	cmp	r3, #0
 800b832:	d003      	beq.n	800b83c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b838:	2200      	movs	r2, #0
 800b83a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b840:	2b00      	cmp	r3, #0
 800b842:	d003      	beq.n	800b84c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b848:	2200      	movs	r2, #0
 800b84a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f022 0201 	bic.w	r2, r2, #1
 800b85a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b862:	b2db      	uxtb	r3, r3
 800b864:	2b60      	cmp	r3, #96	@ 0x60
 800b866:	d10e      	bne.n	800b886 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2220      	movs	r2, #32
 800b86c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2200      	movs	r2, #0
 800b87c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b87e:	6978      	ldr	r0, [r7, #20]
 800b880:	f7fe fe0e 	bl	800a4a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b884:	e027      	b.n	800b8d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b886:	7cfb      	ldrb	r3, [r7, #19]
 800b888:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b88c:	2b28      	cmp	r3, #40	@ 0x28
 800b88e:	d117      	bne.n	800b8c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f042 0201 	orr.w	r2, r2, #1
 800b89e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b8ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2228      	movs	r2, #40	@ 0x28
 800b8ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b8be:	e007      	b.n	800b8d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b8d0:	6978      	ldr	r0, [r7, #20]
 800b8d2:	f7fe fddc 	bl	800a48e <HAL_I2C_ErrorCallback>
}
 800b8d6:	bf00      	nop
 800b8d8:	3718      	adds	r7, #24
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	20000180 	.word	0x20000180
 800b8e4:	14f8b589 	.word	0x14f8b589

0800b8e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800b8f4:	4b13      	ldr	r3, [pc, #76]	@ (800b944 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	08db      	lsrs	r3, r3, #3
 800b8fa:	4a13      	ldr	r2, [pc, #76]	@ (800b948 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800b8fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b900:	0a1a      	lsrs	r2, r3, #8
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d107      	bne.n	800b926 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b91a:	f043 0220 	orr.w	r2, r3, #32
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e008      	b.n	800b938 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b934:	d0e9      	beq.n	800b90a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bc80      	pop	{r7}
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20000180 	.word	0x20000180
 800b948:	14f8b589 	.word	0x14f8b589

0800b94c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b958:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800b95c:	d103      	bne.n	800b966 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b964:	e007      	b.n	800b976 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800b96e:	d102      	bne.n	800b976 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2208      	movs	r2, #8
 800b974:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b976:	bf00      	nop
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bc80      	pop	{r7}
 800b97e:	4770      	bx	lr

0800b980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e272      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 8087 	beq.w	800baae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b9a0:	4b92      	ldr	r3, [pc, #584]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f003 030c 	and.w	r3, r3, #12
 800b9a8:	2b04      	cmp	r3, #4
 800b9aa:	d00c      	beq.n	800b9c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b9ac:	4b8f      	ldr	r3, [pc, #572]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	f003 030c 	and.w	r3, r3, #12
 800b9b4:	2b08      	cmp	r3, #8
 800b9b6:	d112      	bne.n	800b9de <HAL_RCC_OscConfig+0x5e>
 800b9b8:	4b8c      	ldr	r3, [pc, #560]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9c4:	d10b      	bne.n	800b9de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9c6:	4b89      	ldr	r3, [pc, #548]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d06c      	beq.n	800baac <HAL_RCC_OscConfig+0x12c>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d168      	bne.n	800baac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e24c      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9e6:	d106      	bne.n	800b9f6 <HAL_RCC_OscConfig+0x76>
 800b9e8:	4b80      	ldr	r3, [pc, #512]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a7f      	ldr	r2, [pc, #508]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800b9ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	e02e      	b.n	800ba54 <HAL_RCC_OscConfig+0xd4>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10c      	bne.n	800ba18 <HAL_RCC_OscConfig+0x98>
 800b9fe:	4b7b      	ldr	r3, [pc, #492]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a7a      	ldr	r2, [pc, #488]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	4b78      	ldr	r3, [pc, #480]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a77      	ldr	r2, [pc, #476]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	e01d      	b.n	800ba54 <HAL_RCC_OscConfig+0xd4>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba20:	d10c      	bne.n	800ba3c <HAL_RCC_OscConfig+0xbc>
 800ba22:	4b72      	ldr	r3, [pc, #456]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a71      	ldr	r2, [pc, #452]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ba2c:	6013      	str	r3, [r2, #0]
 800ba2e:	4b6f      	ldr	r3, [pc, #444]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a6e      	ldr	r2, [pc, #440]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba38:	6013      	str	r3, [r2, #0]
 800ba3a:	e00b      	b.n	800ba54 <HAL_RCC_OscConfig+0xd4>
 800ba3c:	4b6b      	ldr	r3, [pc, #428]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a6a      	ldr	r2, [pc, #424]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	4b68      	ldr	r3, [pc, #416]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a67      	ldr	r2, [pc, #412]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d013      	beq.n	800ba84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba5c:	f7fd fde6 	bl	800962c <HAL_GetTick>
 800ba60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba62:	e008      	b.n	800ba76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba64:	f7fd fde2 	bl	800962c <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	2b64      	cmp	r3, #100	@ 0x64
 800ba70:	d901      	bls.n	800ba76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e200      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba76:	4b5d      	ldr	r3, [pc, #372]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d0f0      	beq.n	800ba64 <HAL_RCC_OscConfig+0xe4>
 800ba82:	e014      	b.n	800baae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba84:	f7fd fdd2 	bl	800962c <HAL_GetTick>
 800ba88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba8a:	e008      	b.n	800ba9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba8c:	f7fd fdce 	bl	800962c <HAL_GetTick>
 800ba90:	4602      	mov	r2, r0
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	2b64      	cmp	r3, #100	@ 0x64
 800ba98:	d901      	bls.n	800ba9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	e1ec      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba9e:	4b53      	ldr	r3, [pc, #332]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1f0      	bne.n	800ba8c <HAL_RCC_OscConfig+0x10c>
 800baaa:	e000      	b.n	800baae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800baac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d063      	beq.n	800bb82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800baba:	4b4c      	ldr	r3, [pc, #304]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f003 030c 	and.w	r3, r3, #12
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00b      	beq.n	800bade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bac6:	4b49      	ldr	r3, [pc, #292]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f003 030c 	and.w	r3, r3, #12
 800bace:	2b08      	cmp	r3, #8
 800bad0:	d11c      	bne.n	800bb0c <HAL_RCC_OscConfig+0x18c>
 800bad2:	4b46      	ldr	r3, [pc, #280]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bada:	2b00      	cmp	r3, #0
 800badc:	d116      	bne.n	800bb0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bade:	4b43      	ldr	r3, [pc, #268]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 0302 	and.w	r3, r3, #2
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d005      	beq.n	800baf6 <HAL_RCC_OscConfig+0x176>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d001      	beq.n	800baf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e1c0      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baf6:	4b3d      	ldr	r3, [pc, #244]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	00db      	lsls	r3, r3, #3
 800bb04:	4939      	ldr	r1, [pc, #228]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800bb06:	4313      	orrs	r3, r2
 800bb08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb0a:	e03a      	b.n	800bb82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d020      	beq.n	800bb56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb14:	4b36      	ldr	r3, [pc, #216]	@ (800bbf0 <HAL_RCC_OscConfig+0x270>)
 800bb16:	2201      	movs	r2, #1
 800bb18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb1a:	f7fd fd87 	bl	800962c <HAL_GetTick>
 800bb1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb20:	e008      	b.n	800bb34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb22:	f7fd fd83 	bl	800962c <HAL_GetTick>
 800bb26:	4602      	mov	r2, r0
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d901      	bls.n	800bb34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e1a1      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb34:	4b2d      	ldr	r3, [pc, #180]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d0f0      	beq.n	800bb22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb40:	4b2a      	ldr	r3, [pc, #168]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	4927      	ldr	r1, [pc, #156]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	600b      	str	r3, [r1, #0]
 800bb54:	e015      	b.n	800bb82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb56:	4b26      	ldr	r3, [pc, #152]	@ (800bbf0 <HAL_RCC_OscConfig+0x270>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb5c:	f7fd fd66 	bl	800962c <HAL_GetTick>
 800bb60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb62:	e008      	b.n	800bb76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb64:	f7fd fd62 	bl	800962c <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d901      	bls.n	800bb76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bb72:	2303      	movs	r3, #3
 800bb74:	e180      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb76:	4b1d      	ldr	r3, [pc, #116]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f003 0302 	and.w	r3, r3, #2
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1f0      	bne.n	800bb64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 0308 	and.w	r3, r3, #8
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d03a      	beq.n	800bc04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d019      	beq.n	800bbca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb96:	4b17      	ldr	r3, [pc, #92]	@ (800bbf4 <HAL_RCC_OscConfig+0x274>)
 800bb98:	2201      	movs	r2, #1
 800bb9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb9c:	f7fd fd46 	bl	800962c <HAL_GetTick>
 800bba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bba2:	e008      	b.n	800bbb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bba4:	f7fd fd42 	bl	800962c <HAL_GetTick>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d901      	bls.n	800bbb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	e160      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bbb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bbec <HAL_RCC_OscConfig+0x26c>)
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbba:	f003 0302 	and.w	r3, r3, #2
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0f0      	beq.n	800bba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	f000 faba 	bl	800c13c <RCC_Delay>
 800bbc8:	e01c      	b.n	800bc04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bbca:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf4 <HAL_RCC_OscConfig+0x274>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bbd0:	f7fd fd2c 	bl	800962c <HAL_GetTick>
 800bbd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbd6:	e00f      	b.n	800bbf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbd8:	f7fd fd28 	bl	800962c <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d908      	bls.n	800bbf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	e146      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
 800bbea:	bf00      	nop
 800bbec:	40021000 	.word	0x40021000
 800bbf0:	42420000 	.word	0x42420000
 800bbf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbf8:	4b92      	ldr	r3, [pc, #584]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbfc:	f003 0302 	and.w	r3, r3, #2
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1e9      	bne.n	800bbd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f003 0304 	and.w	r3, r3, #4
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 80a6 	beq.w	800bd5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc12:	2300      	movs	r3, #0
 800bc14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc16:	4b8b      	ldr	r3, [pc, #556]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10d      	bne.n	800bc3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc22:	4b88      	ldr	r3, [pc, #544]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bc24:	69db      	ldr	r3, [r3, #28]
 800bc26:	4a87      	ldr	r2, [pc, #540]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bc28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc2c:	61d3      	str	r3, [r2, #28]
 800bc2e:	4b85      	ldr	r3, [pc, #532]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bc30:	69db      	ldr	r3, [r3, #28]
 800bc32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc36:	60bb      	str	r3, [r7, #8]
 800bc38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc3e:	4b82      	ldr	r3, [pc, #520]	@ (800be48 <HAL_RCC_OscConfig+0x4c8>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d118      	bne.n	800bc7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc4a:	4b7f      	ldr	r3, [pc, #508]	@ (800be48 <HAL_RCC_OscConfig+0x4c8>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a7e      	ldr	r2, [pc, #504]	@ (800be48 <HAL_RCC_OscConfig+0x4c8>)
 800bc50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc56:	f7fd fce9 	bl	800962c <HAL_GetTick>
 800bc5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc5c:	e008      	b.n	800bc70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc5e:	f7fd fce5 	bl	800962c <HAL_GetTick>
 800bc62:	4602      	mov	r2, r0
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	2b64      	cmp	r3, #100	@ 0x64
 800bc6a:	d901      	bls.n	800bc70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e103      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc70:	4b75      	ldr	r3, [pc, #468]	@ (800be48 <HAL_RCC_OscConfig+0x4c8>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0f0      	beq.n	800bc5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d106      	bne.n	800bc92 <HAL_RCC_OscConfig+0x312>
 800bc84:	4b6f      	ldr	r3, [pc, #444]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bc86:	6a1b      	ldr	r3, [r3, #32]
 800bc88:	4a6e      	ldr	r2, [pc, #440]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bc8a:	f043 0301 	orr.w	r3, r3, #1
 800bc8e:	6213      	str	r3, [r2, #32]
 800bc90:	e02d      	b.n	800bcee <HAL_RCC_OscConfig+0x36e>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10c      	bne.n	800bcb4 <HAL_RCC_OscConfig+0x334>
 800bc9a:	4b6a      	ldr	r3, [pc, #424]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	4a69      	ldr	r2, [pc, #420]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bca0:	f023 0301 	bic.w	r3, r3, #1
 800bca4:	6213      	str	r3, [r2, #32]
 800bca6:	4b67      	ldr	r3, [pc, #412]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	4a66      	ldr	r2, [pc, #408]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bcac:	f023 0304 	bic.w	r3, r3, #4
 800bcb0:	6213      	str	r3, [r2, #32]
 800bcb2:	e01c      	b.n	800bcee <HAL_RCC_OscConfig+0x36e>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	2b05      	cmp	r3, #5
 800bcba:	d10c      	bne.n	800bcd6 <HAL_RCC_OscConfig+0x356>
 800bcbc:	4b61      	ldr	r3, [pc, #388]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bcbe:	6a1b      	ldr	r3, [r3, #32]
 800bcc0:	4a60      	ldr	r2, [pc, #384]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bcc2:	f043 0304 	orr.w	r3, r3, #4
 800bcc6:	6213      	str	r3, [r2, #32]
 800bcc8:	4b5e      	ldr	r3, [pc, #376]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bcca:	6a1b      	ldr	r3, [r3, #32]
 800bccc:	4a5d      	ldr	r2, [pc, #372]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bcce:	f043 0301 	orr.w	r3, r3, #1
 800bcd2:	6213      	str	r3, [r2, #32]
 800bcd4:	e00b      	b.n	800bcee <HAL_RCC_OscConfig+0x36e>
 800bcd6:	4b5b      	ldr	r3, [pc, #364]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	4a5a      	ldr	r2, [pc, #360]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bcdc:	f023 0301 	bic.w	r3, r3, #1
 800bce0:	6213      	str	r3, [r2, #32]
 800bce2:	4b58      	ldr	r3, [pc, #352]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bce4:	6a1b      	ldr	r3, [r3, #32]
 800bce6:	4a57      	ldr	r2, [pc, #348]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bce8:	f023 0304 	bic.w	r3, r3, #4
 800bcec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d015      	beq.n	800bd22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bcf6:	f7fd fc99 	bl	800962c <HAL_GetTick>
 800bcfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcfc:	e00a      	b.n	800bd14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcfe:	f7fd fc95 	bl	800962c <HAL_GetTick>
 800bd02:	4602      	mov	r2, r0
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	1ad3      	subs	r3, r2, r3
 800bd08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d901      	bls.n	800bd14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e0b1      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd14:	4b4b      	ldr	r3, [pc, #300]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bd16:	6a1b      	ldr	r3, [r3, #32]
 800bd18:	f003 0302 	and.w	r3, r3, #2
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d0ee      	beq.n	800bcfe <HAL_RCC_OscConfig+0x37e>
 800bd20:	e014      	b.n	800bd4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd22:	f7fd fc83 	bl	800962c <HAL_GetTick>
 800bd26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd28:	e00a      	b.n	800bd40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd2a:	f7fd fc7f 	bl	800962c <HAL_GetTick>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d901      	bls.n	800bd40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e09b      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd40:	4b40      	ldr	r3, [pc, #256]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	f003 0302 	and.w	r3, r3, #2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1ee      	bne.n	800bd2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d105      	bne.n	800bd5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd52:	4b3c      	ldr	r3, [pc, #240]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	4a3b      	ldr	r2, [pc, #236]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bd58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 8087 	beq.w	800be76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bd68:	4b36      	ldr	r3, [pc, #216]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	f003 030c 	and.w	r3, r3, #12
 800bd70:	2b08      	cmp	r3, #8
 800bd72:	d061      	beq.n	800be38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	69db      	ldr	r3, [r3, #28]
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d146      	bne.n	800be0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd7c:	4b33      	ldr	r3, [pc, #204]	@ (800be4c <HAL_RCC_OscConfig+0x4cc>)
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd82:	f7fd fc53 	bl	800962c <HAL_GetTick>
 800bd86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bd88:	e008      	b.n	800bd9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd8a:	f7fd fc4f 	bl	800962c <HAL_GetTick>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d901      	bls.n	800bd9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e06d      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bd9c:	4b29      	ldr	r3, [pc, #164]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1f0      	bne.n	800bd8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
 800bdac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdb0:	d108      	bne.n	800bdc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bdb2:	4b24      	ldr	r3, [pc, #144]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	4921      	ldr	r1, [pc, #132]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bdc4:	4b1f      	ldr	r3, [pc, #124]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a19      	ldr	r1, [r3, #32]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd4:	430b      	orrs	r3, r1
 800bdd6:	491b      	ldr	r1, [pc, #108]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bddc:	4b1b      	ldr	r3, [pc, #108]	@ (800be4c <HAL_RCC_OscConfig+0x4cc>)
 800bdde:	2201      	movs	r2, #1
 800bde0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bde2:	f7fd fc23 	bl	800962c <HAL_GetTick>
 800bde6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bde8:	e008      	b.n	800bdfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdea:	f7fd fc1f 	bl	800962c <HAL_GetTick>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d901      	bls.n	800bdfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bdf8:	2303      	movs	r3, #3
 800bdfa:	e03d      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bdfc:	4b11      	ldr	r3, [pc, #68]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d0f0      	beq.n	800bdea <HAL_RCC_OscConfig+0x46a>
 800be08:	e035      	b.n	800be76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be0a:	4b10      	ldr	r3, [pc, #64]	@ (800be4c <HAL_RCC_OscConfig+0x4cc>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be10:	f7fd fc0c 	bl	800962c <HAL_GetTick>
 800be14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be16:	e008      	b.n	800be2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be18:	f7fd fc08 	bl	800962c <HAL_GetTick>
 800be1c:	4602      	mov	r2, r0
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	1ad3      	subs	r3, r2, r3
 800be22:	2b02      	cmp	r3, #2
 800be24:	d901      	bls.n	800be2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800be26:	2303      	movs	r3, #3
 800be28:	e026      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800be2a:	4b06      	ldr	r3, [pc, #24]	@ (800be44 <HAL_RCC_OscConfig+0x4c4>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1f0      	bne.n	800be18 <HAL_RCC_OscConfig+0x498>
 800be36:	e01e      	b.n	800be76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	69db      	ldr	r3, [r3, #28]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d107      	bne.n	800be50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e019      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
 800be44:	40021000 	.word	0x40021000
 800be48:	40007000 	.word	0x40007000
 800be4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800be50:	4b0b      	ldr	r3, [pc, #44]	@ (800be80 <HAL_RCC_OscConfig+0x500>)
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a1b      	ldr	r3, [r3, #32]
 800be60:	429a      	cmp	r2, r3
 800be62:	d106      	bne.n	800be72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be6e:	429a      	cmp	r2, r3
 800be70:	d001      	beq.n	800be76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800be72:	2301      	movs	r3, #1
 800be74:	e000      	b.n	800be78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	40021000 	.word	0x40021000

0800be84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e0d0      	b.n	800c03a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be98:	4b6a      	ldr	r3, [pc, #424]	@ (800c044 <HAL_RCC_ClockConfig+0x1c0>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0307 	and.w	r3, r3, #7
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d910      	bls.n	800bec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bea6:	4b67      	ldr	r3, [pc, #412]	@ (800c044 <HAL_RCC_ClockConfig+0x1c0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f023 0207 	bic.w	r2, r3, #7
 800beae:	4965      	ldr	r1, [pc, #404]	@ (800c044 <HAL_RCC_ClockConfig+0x1c0>)
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800beb6:	4b63      	ldr	r3, [pc, #396]	@ (800c044 <HAL_RCC_ClockConfig+0x1c0>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 0307 	and.w	r3, r3, #7
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d001      	beq.n	800bec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	e0b8      	b.n	800c03a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f003 0302 	and.w	r3, r3, #2
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d020      	beq.n	800bf16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0304 	and.w	r3, r3, #4
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d005      	beq.n	800beec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bee0:	4b59      	ldr	r3, [pc, #356]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	4a58      	ldr	r2, [pc, #352]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bee6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800beea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0308 	and.w	r3, r3, #8
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bef8:	4b53      	ldr	r3, [pc, #332]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	4a52      	ldr	r2, [pc, #328]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800befe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800bf02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf04:	4b50      	ldr	r3, [pc, #320]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	494d      	ldr	r1, [pc, #308]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bf12:	4313      	orrs	r3, r2
 800bf14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d040      	beq.n	800bfa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d107      	bne.n	800bf3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf2a:	4b47      	ldr	r3, [pc, #284]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d115      	bne.n	800bf62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e07f      	b.n	800c03a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d107      	bne.n	800bf52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf42:	4b41      	ldr	r3, [pc, #260]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d109      	bne.n	800bf62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e073      	b.n	800c03a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf52:	4b3d      	ldr	r3, [pc, #244]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f003 0302 	and.w	r3, r3, #2
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d101      	bne.n	800bf62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e06b      	b.n	800c03a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf62:	4b39      	ldr	r3, [pc, #228]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	f023 0203 	bic.w	r2, r3, #3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	4936      	ldr	r1, [pc, #216]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bf74:	f7fd fb5a 	bl	800962c <HAL_GetTick>
 800bf78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf7a:	e00a      	b.n	800bf92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf7c:	f7fd fb56 	bl	800962c <HAL_GetTick>
 800bf80:	4602      	mov	r2, r0
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d901      	bls.n	800bf92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	e053      	b.n	800c03a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf92:	4b2d      	ldr	r3, [pc, #180]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	f003 020c 	and.w	r2, r3, #12
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d1eb      	bne.n	800bf7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bfa4:	4b27      	ldr	r3, [pc, #156]	@ (800c044 <HAL_RCC_ClockConfig+0x1c0>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 0307 	and.w	r3, r3, #7
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d210      	bcs.n	800bfd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfb2:	4b24      	ldr	r3, [pc, #144]	@ (800c044 <HAL_RCC_ClockConfig+0x1c0>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f023 0207 	bic.w	r2, r3, #7
 800bfba:	4922      	ldr	r1, [pc, #136]	@ (800c044 <HAL_RCC_ClockConfig+0x1c0>)
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfc2:	4b20      	ldr	r3, [pc, #128]	@ (800c044 <HAL_RCC_ClockConfig+0x1c0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	683a      	ldr	r2, [r7, #0]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d001      	beq.n	800bfd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e032      	b.n	800c03a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0304 	and.w	r3, r3, #4
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d008      	beq.n	800bff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bfe0:	4b19      	ldr	r3, [pc, #100]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	4916      	ldr	r1, [pc, #88]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800bfee:	4313      	orrs	r3, r2
 800bff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 0308 	and.w	r3, r3, #8
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d009      	beq.n	800c012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bffe:	4b12      	ldr	r3, [pc, #72]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	691b      	ldr	r3, [r3, #16]
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	490e      	ldr	r1, [pc, #56]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c012:	f000 f821 	bl	800c058 <HAL_RCC_GetSysClockFreq>
 800c016:	4602      	mov	r2, r0
 800c018:	4b0b      	ldr	r3, [pc, #44]	@ (800c048 <HAL_RCC_ClockConfig+0x1c4>)
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	091b      	lsrs	r3, r3, #4
 800c01e:	f003 030f 	and.w	r3, r3, #15
 800c022:	490a      	ldr	r1, [pc, #40]	@ (800c04c <HAL_RCC_ClockConfig+0x1c8>)
 800c024:	5ccb      	ldrb	r3, [r1, r3]
 800c026:	fa22 f303 	lsr.w	r3, r2, r3
 800c02a:	4a09      	ldr	r2, [pc, #36]	@ (800c050 <HAL_RCC_ClockConfig+0x1cc>)
 800c02c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c02e:	4b09      	ldr	r3, [pc, #36]	@ (800c054 <HAL_RCC_ClockConfig+0x1d0>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4618      	mov	r0, r3
 800c034:	f7fd fab8 	bl	80095a8 <HAL_InitTick>

  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	40022000 	.word	0x40022000
 800c048:	40021000 	.word	0x40021000
 800c04c:	0800c758 	.word	0x0800c758
 800c050:	20000180 	.word	0x20000180
 800c054:	20000184 	.word	0x20000184

0800c058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c058:	b480      	push	{r7}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c05e:	2300      	movs	r3, #0
 800c060:	60fb      	str	r3, [r7, #12]
 800c062:	2300      	movs	r3, #0
 800c064:	60bb      	str	r3, [r7, #8]
 800c066:	2300      	movs	r3, #0
 800c068:	617b      	str	r3, [r7, #20]
 800c06a:	2300      	movs	r3, #0
 800c06c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c06e:	2300      	movs	r3, #0
 800c070:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c072:	4b1e      	ldr	r3, [pc, #120]	@ (800c0ec <HAL_RCC_GetSysClockFreq+0x94>)
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f003 030c 	and.w	r3, r3, #12
 800c07e:	2b04      	cmp	r3, #4
 800c080:	d002      	beq.n	800c088 <HAL_RCC_GetSysClockFreq+0x30>
 800c082:	2b08      	cmp	r3, #8
 800c084:	d003      	beq.n	800c08e <HAL_RCC_GetSysClockFreq+0x36>
 800c086:	e027      	b.n	800c0d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c088:	4b19      	ldr	r3, [pc, #100]	@ (800c0f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c08a:	613b      	str	r3, [r7, #16]
      break;
 800c08c:	e027      	b.n	800c0de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	0c9b      	lsrs	r3, r3, #18
 800c092:	f003 030f 	and.w	r3, r3, #15
 800c096:	4a17      	ldr	r2, [pc, #92]	@ (800c0f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c098:	5cd3      	ldrb	r3, [r2, r3]
 800c09a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d010      	beq.n	800c0c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c0a6:	4b11      	ldr	r3, [pc, #68]	@ (800c0ec <HAL_RCC_GetSysClockFreq+0x94>)
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	0c5b      	lsrs	r3, r3, #17
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	4a11      	ldr	r2, [pc, #68]	@ (800c0f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c0b2:	5cd3      	ldrb	r3, [r2, r3]
 800c0b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a0d      	ldr	r2, [pc, #52]	@ (800c0f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c0ba:	fb03 f202 	mul.w	r2, r3, r2
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c4:	617b      	str	r3, [r7, #20]
 800c0c6:	e004      	b.n	800c0d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a0c      	ldr	r2, [pc, #48]	@ (800c0fc <HAL_RCC_GetSysClockFreq+0xa4>)
 800c0cc:	fb02 f303 	mul.w	r3, r2, r3
 800c0d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	613b      	str	r3, [r7, #16]
      break;
 800c0d6:	e002      	b.n	800c0de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c0d8:	4b05      	ldr	r3, [pc, #20]	@ (800c0f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800c0da:	613b      	str	r3, [r7, #16]
      break;
 800c0dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c0de:	693b      	ldr	r3, [r7, #16]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	371c      	adds	r7, #28
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bc80      	pop	{r7}
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	40021000 	.word	0x40021000
 800c0f0:	007a1200 	.word	0x007a1200
 800c0f4:	0800c770 	.word	0x0800c770
 800c0f8:	0800c780 	.word	0x0800c780
 800c0fc:	003d0900 	.word	0x003d0900

0800c100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c100:	b480      	push	{r7}
 800c102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c104:	4b02      	ldr	r3, [pc, #8]	@ (800c110 <HAL_RCC_GetHCLKFreq+0x10>)
 800c106:	681b      	ldr	r3, [r3, #0]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bc80      	pop	{r7}
 800c10e:	4770      	bx	lr
 800c110:	20000180 	.word	0x20000180

0800c114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c118:	f7ff fff2 	bl	800c100 <HAL_RCC_GetHCLKFreq>
 800c11c:	4602      	mov	r2, r0
 800c11e:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	0a1b      	lsrs	r3, r3, #8
 800c124:	f003 0307 	and.w	r3, r3, #7
 800c128:	4903      	ldr	r1, [pc, #12]	@ (800c138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c12a:	5ccb      	ldrb	r3, [r1, r3]
 800c12c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c130:	4618      	mov	r0, r3
 800c132:	bd80      	pop	{r7, pc}
 800c134:	40021000 	.word	0x40021000
 800c138:	0800c768 	.word	0x0800c768

0800c13c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c144:	4b0a      	ldr	r3, [pc, #40]	@ (800c170 <RCC_Delay+0x34>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a0a      	ldr	r2, [pc, #40]	@ (800c174 <RCC_Delay+0x38>)
 800c14a:	fba2 2303 	umull	r2, r3, r2, r3
 800c14e:	0a5b      	lsrs	r3, r3, #9
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	fb02 f303 	mul.w	r3, r2, r3
 800c156:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c158:	bf00      	nop
  }
  while (Delay --);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	1e5a      	subs	r2, r3, #1
 800c15e:	60fa      	str	r2, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1f9      	bne.n	800c158 <RCC_Delay+0x1c>
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bc80      	pop	{r7}
 800c16e:	4770      	bx	lr
 800c170:	20000180 	.word	0x20000180
 800c174:	10624dd3 	.word	0x10624dd3

0800c178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e041      	b.n	800c20e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2b00      	cmp	r3, #0
 800c194:	d106      	bne.n	800c1a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7fd f948 	bl	8009434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2202      	movs	r2, #2
 800c1a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	f000 f940 	bl	800c43c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d001      	beq.n	800c230 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e032      	b.n	800c296 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2202      	movs	r2, #2
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a18      	ldr	r2, [pc, #96]	@ (800c2a0 <HAL_TIM_Base_Start+0x88>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d00e      	beq.n	800c260 <HAL_TIM_Base_Start+0x48>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c24a:	d009      	beq.n	800c260 <HAL_TIM_Base_Start+0x48>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a14      	ldr	r2, [pc, #80]	@ (800c2a4 <HAL_TIM_Base_Start+0x8c>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d004      	beq.n	800c260 <HAL_TIM_Base_Start+0x48>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a13      	ldr	r2, [pc, #76]	@ (800c2a8 <HAL_TIM_Base_Start+0x90>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d111      	bne.n	800c284 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2b06      	cmp	r3, #6
 800c270:	d010      	beq.n	800c294 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f042 0201 	orr.w	r2, r2, #1
 800c280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c282:	e007      	b.n	800c294 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f042 0201 	orr.w	r2, r2, #1
 800c292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3714      	adds	r7, #20
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bc80      	pop	{r7}
 800c29e:	4770      	bx	lr
 800c2a0:	40012c00 	.word	0x40012c00
 800c2a4:	40000400 	.word	0x40000400
 800c2a8:	40000800 	.word	0x40000800

0800c2ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d101      	bne.n	800c2c8 <HAL_TIM_ConfigClockSource+0x1c>
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	e0b4      	b.n	800c432 <HAL_TIM_ConfigClockSource+0x186>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c2e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c2ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68ba      	ldr	r2, [r7, #8]
 800c2f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c300:	d03e      	beq.n	800c380 <HAL_TIM_ConfigClockSource+0xd4>
 800c302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c306:	f200 8087 	bhi.w	800c418 <HAL_TIM_ConfigClockSource+0x16c>
 800c30a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c30e:	f000 8086 	beq.w	800c41e <HAL_TIM_ConfigClockSource+0x172>
 800c312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c316:	d87f      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x16c>
 800c318:	2b70      	cmp	r3, #112	@ 0x70
 800c31a:	d01a      	beq.n	800c352 <HAL_TIM_ConfigClockSource+0xa6>
 800c31c:	2b70      	cmp	r3, #112	@ 0x70
 800c31e:	d87b      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x16c>
 800c320:	2b60      	cmp	r3, #96	@ 0x60
 800c322:	d050      	beq.n	800c3c6 <HAL_TIM_ConfigClockSource+0x11a>
 800c324:	2b60      	cmp	r3, #96	@ 0x60
 800c326:	d877      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x16c>
 800c328:	2b50      	cmp	r3, #80	@ 0x50
 800c32a:	d03c      	beq.n	800c3a6 <HAL_TIM_ConfigClockSource+0xfa>
 800c32c:	2b50      	cmp	r3, #80	@ 0x50
 800c32e:	d873      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x16c>
 800c330:	2b40      	cmp	r3, #64	@ 0x40
 800c332:	d058      	beq.n	800c3e6 <HAL_TIM_ConfigClockSource+0x13a>
 800c334:	2b40      	cmp	r3, #64	@ 0x40
 800c336:	d86f      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x16c>
 800c338:	2b30      	cmp	r3, #48	@ 0x30
 800c33a:	d064      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x15a>
 800c33c:	2b30      	cmp	r3, #48	@ 0x30
 800c33e:	d86b      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x16c>
 800c340:	2b20      	cmp	r3, #32
 800c342:	d060      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x15a>
 800c344:	2b20      	cmp	r3, #32
 800c346:	d867      	bhi.n	800c418 <HAL_TIM_ConfigClockSource+0x16c>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d05c      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x15a>
 800c34c:	2b10      	cmp	r3, #16
 800c34e:	d05a      	beq.n	800c406 <HAL_TIM_ConfigClockSource+0x15a>
 800c350:	e062      	b.n	800c418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c362:	f000 f944 	bl	800c5ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	609a      	str	r2, [r3, #8]
      break;
 800c37e:	e04f      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c390:	f000 f92d 	bl	800c5ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	689a      	ldr	r2, [r3, #8]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c3a2:	609a      	str	r2, [r3, #8]
      break;
 800c3a4:	e03c      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f000 f8a4 	bl	800c500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2150      	movs	r1, #80	@ 0x50
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 f8fb 	bl	800c5ba <TIM_ITRx_SetConfig>
      break;
 800c3c4:	e02c      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	f000 f8c2 	bl	800c55c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2160      	movs	r1, #96	@ 0x60
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f8eb 	bl	800c5ba <TIM_ITRx_SetConfig>
      break;
 800c3e4:	e01c      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f000 f884 	bl	800c500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2140      	movs	r1, #64	@ 0x40
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 f8db 	bl	800c5ba <TIM_ITRx_SetConfig>
      break;
 800c404:	e00c      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4619      	mov	r1, r3
 800c410:	4610      	mov	r0, r2
 800c412:	f000 f8d2 	bl	800c5ba <TIM_ITRx_SetConfig>
      break;
 800c416:	e003      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c418:	2301      	movs	r3, #1
 800c41a:	73fb      	strb	r3, [r7, #15]
      break;
 800c41c:	e000      	b.n	800c420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c41e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c430:	7bfb      	ldrb	r3, [r7, #15]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
	...

0800c43c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a29      	ldr	r2, [pc, #164]	@ (800c4f4 <TIM_Base_SetConfig+0xb8>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d00b      	beq.n	800c46c <TIM_Base_SetConfig+0x30>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c45a:	d007      	beq.n	800c46c <TIM_Base_SetConfig+0x30>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a26      	ldr	r2, [pc, #152]	@ (800c4f8 <TIM_Base_SetConfig+0xbc>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d003      	beq.n	800c46c <TIM_Base_SetConfig+0x30>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4a25      	ldr	r2, [pc, #148]	@ (800c4fc <TIM_Base_SetConfig+0xc0>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d108      	bne.n	800c47e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a1c      	ldr	r2, [pc, #112]	@ (800c4f4 <TIM_Base_SetConfig+0xb8>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d00b      	beq.n	800c49e <TIM_Base_SetConfig+0x62>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c48c:	d007      	beq.n	800c49e <TIM_Base_SetConfig+0x62>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a19      	ldr	r2, [pc, #100]	@ (800c4f8 <TIM_Base_SetConfig+0xbc>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d003      	beq.n	800c49e <TIM_Base_SetConfig+0x62>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a18      	ldr	r2, [pc, #96]	@ (800c4fc <TIM_Base_SetConfig+0xc0>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d108      	bne.n	800c4b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	689a      	ldr	r2, [r3, #8]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a07      	ldr	r2, [pc, #28]	@ (800c4f4 <TIM_Base_SetConfig+0xb8>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d103      	bne.n	800c4e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	691a      	ldr	r2, [r3, #16]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	615a      	str	r2, [r3, #20]
}
 800c4ea:	bf00      	nop
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bc80      	pop	{r7}
 800c4f2:	4770      	bx	lr
 800c4f4:	40012c00 	.word	0x40012c00
 800c4f8:	40000400 	.word	0x40000400
 800c4fc:	40000800 	.word	0x40000800

0800c500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c500:	b480      	push	{r7}
 800c502:	b087      	sub	sp, #28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6a1b      	ldr	r3, [r3, #32]
 800c510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	f023 0201 	bic.w	r2, r3, #1
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c52a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	011b      	lsls	r3, r3, #4
 800c530:	693a      	ldr	r2, [r7, #16]
 800c532:	4313      	orrs	r3, r2
 800c534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	f023 030a 	bic.w	r3, r3, #10
 800c53c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	4313      	orrs	r3, r2
 800c544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	621a      	str	r2, [r3, #32]
}
 800c552:	bf00      	nop
 800c554:	371c      	adds	r7, #28
 800c556:	46bd      	mov	sp, r7
 800c558:	bc80      	pop	{r7}
 800c55a:	4770      	bx	lr

0800c55c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b087      	sub	sp, #28
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6a1b      	ldr	r3, [r3, #32]
 800c56c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	f023 0210 	bic.w	r2, r3, #16
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	031b      	lsls	r3, r3, #12
 800c58c:	693a      	ldr	r2, [r7, #16]
 800c58e:	4313      	orrs	r3, r2
 800c590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c598:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	011b      	lsls	r3, r3, #4
 800c59e:	697a      	ldr	r2, [r7, #20]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	621a      	str	r2, [r3, #32]
}
 800c5b0:	bf00      	nop
 800c5b2:	371c      	adds	r7, #28
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bc80      	pop	{r7}
 800c5b8:	4770      	bx	lr

0800c5ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	f043 0307 	orr.w	r3, r3, #7
 800c5dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	609a      	str	r2, [r3, #8]
}
 800c5e4:	bf00      	nop
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bc80      	pop	{r7}
 800c5ec:	4770      	bx	lr

0800c5ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b087      	sub	sp, #28
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	60f8      	str	r0, [r7, #12]
 800c5f6:	60b9      	str	r1, [r7, #8]
 800c5f8:	607a      	str	r2, [r7, #4]
 800c5fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c608:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	021a      	lsls	r2, r3, #8
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	431a      	orrs	r2, r3
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	4313      	orrs	r3, r2
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	4313      	orrs	r3, r2
 800c61a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	609a      	str	r2, [r3, #8]
}
 800c622:	bf00      	nop
 800c624:	371c      	adds	r7, #28
 800c626:	46bd      	mov	sp, r7
 800c628:	bc80      	pop	{r7}
 800c62a:	4770      	bx	lr

0800c62c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d101      	bne.n	800c644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c640:	2302      	movs	r3, #2
 800c642:	e046      	b.n	800c6d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2202      	movs	r2, #2
 800c650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c66a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	4313      	orrs	r3, r2
 800c674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a16      	ldr	r2, [pc, #88]	@ (800c6dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d00e      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c690:	d009      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a12      	ldr	r2, [pc, #72]	@ (800c6e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d004      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a10      	ldr	r2, [pc, #64]	@ (800c6e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d10c      	bne.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bc80      	pop	{r7}
 800c6da:	4770      	bx	lr
 800c6dc:	40012c00 	.word	0x40012c00
 800c6e0:	40000400 	.word	0x40000400
 800c6e4:	40000800 	.word	0x40000800

0800c6e8 <memset>:
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	4402      	add	r2, r0
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d100      	bne.n	800c6f2 <memset+0xa>
 800c6f0:	4770      	bx	lr
 800c6f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6f6:	e7f9      	b.n	800c6ec <memset+0x4>

0800c6f8 <__libc_init_array>:
 800c6f8:	b570      	push	{r4, r5, r6, lr}
 800c6fa:	2600      	movs	r6, #0
 800c6fc:	4d0c      	ldr	r5, [pc, #48]	@ (800c730 <__libc_init_array+0x38>)
 800c6fe:	4c0d      	ldr	r4, [pc, #52]	@ (800c734 <__libc_init_array+0x3c>)
 800c700:	1b64      	subs	r4, r4, r5
 800c702:	10a4      	asrs	r4, r4, #2
 800c704:	42a6      	cmp	r6, r4
 800c706:	d109      	bne.n	800c71c <__libc_init_array+0x24>
 800c708:	f000 f81a 	bl	800c740 <_init>
 800c70c:	2600      	movs	r6, #0
 800c70e:	4d0a      	ldr	r5, [pc, #40]	@ (800c738 <__libc_init_array+0x40>)
 800c710:	4c0a      	ldr	r4, [pc, #40]	@ (800c73c <__libc_init_array+0x44>)
 800c712:	1b64      	subs	r4, r4, r5
 800c714:	10a4      	asrs	r4, r4, #2
 800c716:	42a6      	cmp	r6, r4
 800c718:	d105      	bne.n	800c726 <__libc_init_array+0x2e>
 800c71a:	bd70      	pop	{r4, r5, r6, pc}
 800c71c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c720:	4798      	blx	r3
 800c722:	3601      	adds	r6, #1
 800c724:	e7ee      	b.n	800c704 <__libc_init_array+0xc>
 800c726:	f855 3b04 	ldr.w	r3, [r5], #4
 800c72a:	4798      	blx	r3
 800c72c:	3601      	adds	r6, #1
 800c72e:	e7f2      	b.n	800c716 <__libc_init_array+0x1e>
 800c730:	0800c784 	.word	0x0800c784
 800c734:	0800c784 	.word	0x0800c784
 800c738:	0800c784 	.word	0x0800c784
 800c73c:	0800c788 	.word	0x0800c788

0800c740 <_init>:
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	bf00      	nop
 800c744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c746:	bc08      	pop	{r3}
 800c748:	469e      	mov	lr, r3
 800c74a:	4770      	bx	lr

0800c74c <_fini>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	bf00      	nop
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr
