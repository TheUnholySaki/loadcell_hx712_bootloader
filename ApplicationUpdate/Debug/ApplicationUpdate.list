
ApplicationUpdate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a4  0801010c  0801010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mysection    00000000  08018000  08018000  0000605c  2**0
                  CONTENTS
  3 .rodata       00000064  080148b0  080148b0  000058b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08014914  08014914  0000605c  2**0
                  CONTENTS
  5 .ARM          00000000  08014914  08014914  0000605c  2**0
                  CONTENTS
  6 .preinit_array 00000000  08014914  08014914  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08014914  08014914  00005914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08014918  08014918  00005918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000005c  20000000  0801491c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000240  20000060  08014978  00006060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  08014978  000062a0  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba81  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f47  00000000  00000000  00011b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00013a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a71  00000000  00000000  000147a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001738a  00000000  00000000  00015219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010067  00000000  00000000  0002c5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a9ae  00000000  00000000  0003c60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c6fb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d28  00000000  00000000  000c6ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  000cad24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0801010c <__do_global_dtors_aux>:
 801010c:	b510      	push	{r4, lr}
 801010e:	4c05      	ldr	r4, [pc, #20]	@ (8010124 <__do_global_dtors_aux+0x18>)
 8010110:	7823      	ldrb	r3, [r4, #0]
 8010112:	b933      	cbnz	r3, 8010122 <__do_global_dtors_aux+0x16>
 8010114:	4b04      	ldr	r3, [pc, #16]	@ (8010128 <__do_global_dtors_aux+0x1c>)
 8010116:	b113      	cbz	r3, 801011e <__do_global_dtors_aux+0x12>
 8010118:	4804      	ldr	r0, [pc, #16]	@ (801012c <__do_global_dtors_aux+0x20>)
 801011a:	f3af 8000 	nop.w
 801011e:	2301      	movs	r3, #1
 8010120:	7023      	strb	r3, [r4, #0]
 8010122:	bd10      	pop	{r4, pc}
 8010124:	20000060 	.word	0x20000060
 8010128:	00000000 	.word	0x00000000
 801012c:	08014898 	.word	0x08014898

08010130 <frame_dummy>:
 8010130:	b508      	push	{r3, lr}
 8010132:	4b03      	ldr	r3, [pc, #12]	@ (8010140 <frame_dummy+0x10>)
 8010134:	b11b      	cbz	r3, 801013e <frame_dummy+0xe>
 8010136:	4903      	ldr	r1, [pc, #12]	@ (8010144 <frame_dummy+0x14>)
 8010138:	4803      	ldr	r0, [pc, #12]	@ (8010148 <frame_dummy+0x18>)
 801013a:	f3af 8000 	nop.w
 801013e:	bd08      	pop	{r3, pc}
 8010140:	00000000 	.word	0x00000000
 8010144:	20000064 	.word	0x20000064
 8010148:	08014898 	.word	0x08014898

0801014c <getHX712>:
#include "loadcell_hx712.h"


uint32_t getHX712(uint8_t speed)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b086      	sub	sp, #24
 8010150:	af00      	add	r7, sp, #0
 8010152:	4603      	mov	r3, r0
 8010154:	71fb      	strb	r3, [r7, #7]
//__disable_irq();
  uint32_t data = 0;
 8010156:	2300      	movs	r3, #0
 8010158:	617b      	str	r3, [r7, #20]
  uint32_t tick = 0;
 801015a:	2300      	movs	r3, #0
 801015c:	613b      	str	r3, [r7, #16]
  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET)
 801015e:	e009      	b.n	8010174 <getHX712+0x28>
  {

    if (tick < 100000) tick++;
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	4a34      	ldr	r2, [pc, #208]	@ (8010234 <getHX712+0xe8>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d803      	bhi.n	8010170 <getHX712+0x24>
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	3301      	adds	r3, #1
 801016c:	613b      	str	r3, [r7, #16]
 801016e:	e001      	b.n	8010174 <getHX712+0x28>
    else return 0;
 8010170:	2300      	movs	r3, #0
 8010172:	e05a      	b.n	801022a <getHX712+0xde>
  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET)
 8010174:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010178:	482f      	ldr	r0, [pc, #188]	@ (8010238 <getHX712+0xec>)
 801017a:	f001 f8c7 	bl	801130c <HAL_GPIO_ReadPin>
 801017e:	4603      	mov	r3, r0
 8010180:	2b01      	cmp	r3, #1
 8010182:	d0ed      	beq.n	8010160 <getHX712+0x14>
  }
  for(int8_t len=0; len<24 ; len++)
 8010184:	2300      	movs	r3, #0
 8010186:	73fb      	strb	r3, [r7, #15]
 8010188:	e025      	b.n	80101d6 <getHX712+0x8a>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 801018a:	2201      	movs	r2, #1
 801018c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010190:	4829      	ldr	r0, [pc, #164]	@ (8010238 <getHX712+0xec>)
 8010192:	f001 f8d2 	bl	801133a <HAL_GPIO_WritePin>
    microDelay(1);
 8010196:	2001      	movs	r0, #1
 8010198:	f000 f878 	bl	801028c <microDelay>
    data = data << 1;
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	005b      	lsls	r3, r3, #1
 80101a0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80101a2:	2200      	movs	r2, #0
 80101a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80101a8:	4823      	ldr	r0, [pc, #140]	@ (8010238 <getHX712+0xec>)
 80101aa:	f001 f8c6 	bl	801133a <HAL_GPIO_WritePin>
    microDelay(1);
 80101ae:	2001      	movs	r0, #1
 80101b0:	f000 f86c 	bl	801028c <microDelay>
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET)
 80101b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80101b8:	481f      	ldr	r0, [pc, #124]	@ (8010238 <getHX712+0xec>)
 80101ba:	f001 f8a7 	bl	801130c <HAL_GPIO_ReadPin>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d102      	bne.n	80101ca <getHX712+0x7e>
      data ++;
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	3301      	adds	r3, #1
 80101c8:	617b      	str	r3, [r7, #20]
  for(int8_t len=0; len<24 ; len++)
 80101ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	3301      	adds	r3, #1
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	73fb      	strb	r3, [r7, #15]
 80101d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101da:	2b17      	cmp	r3, #23
 80101dc:	ddd5      	ble.n	801018a <getHX712+0x3e>
  }

  for (int i = 0; i<speed; i++){
 80101de:	2300      	movs	r3, #0
 80101e0:	60bb      	str	r3, [r7, #8]
 80101e2:	e014      	b.n	801020e <getHX712+0xc2>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80101e4:	2201      	movs	r2, #1
 80101e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80101ea:	4813      	ldr	r0, [pc, #76]	@ (8010238 <getHX712+0xec>)
 80101ec:	f001 f8a5 	bl	801133a <HAL_GPIO_WritePin>
	  microDelay(1);
 80101f0:	2001      	movs	r0, #1
 80101f2:	f000 f84b 	bl	801028c <microDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80101f6:	2200      	movs	r2, #0
 80101f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80101fc:	480e      	ldr	r0, [pc, #56]	@ (8010238 <getHX712+0xec>)
 80101fe:	f001 f89c 	bl	801133a <HAL_GPIO_WritePin>
	  microDelay(1);
 8010202:	2001      	movs	r0, #1
 8010204:	f000 f842 	bl	801028c <microDelay>
  for (int i = 0; i<speed; i++){
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	3301      	adds	r3, #1
 801020c:	60bb      	str	r3, [r7, #8]
 801020e:	79fb      	ldrb	r3, [r7, #7]
 8010210:	68ba      	ldr	r2, [r7, #8]
 8010212:	429a      	cmp	r2, r3
 8010214:	dbe6      	blt.n	80101e4 <getHX712+0x98>
  }

  data = data ^ 0x800000;
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 801021c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 801021e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010222:	4806      	ldr	r0, [pc, #24]	@ (801023c <getHX712+0xf0>)
 8010224:	f001 f8a1 	bl	801136a <HAL_GPIO_TogglePin>
  //__enable_irq();

  return data;
 8010228:	697b      	ldr	r3, [r7, #20]
}
 801022a:	4618      	mov	r0, r3
 801022c:	3718      	adds	r7, #24
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	0001869f 	.word	0x0001869f
 8010238:	40010c00 	.word	0x40010c00
 801023c:	40011000 	.word	0x40011000

08010240 <int_to_string>:


void int_to_string(int num, uint8_t* str) {
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
    // in case of negative
    if (num < 0) {
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	da07      	bge.n	8010260 <int_to_string+0x20>
        *str++ = '-';
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	603a      	str	r2, [r7, #0]
 8010256:	222d      	movs	r2, #45	@ 0x2d
 8010258:	701a      	strb	r2, [r3, #0]
        num = -num;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	425b      	negs	r3, r3
 801025e:	607b      	str	r3, [r7, #4]
    }
    // Convert integer part to string
    sprintf((char*)str, "%d", num);
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	4909      	ldr	r1, [pc, #36]	@ (8010288 <int_to_string+0x48>)
 8010264:	6838      	ldr	r0, [r7, #0]
 8010266:	f003 fe67 	bl	8013f38 <siprintf>
    // Move the pointer to the end of the integer part
    while (*str != '\0') {
 801026a:	e002      	b.n	8010272 <int_to_string+0x32>
        str++;
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	3301      	adds	r3, #1
 8010270:	603b      	str	r3, [r7, #0]
    while (*str != '\0') {
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d1f8      	bne.n	801026c <int_to_string+0x2c>
    }
    // Null-terminate the string
    *str = '\0';
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	2200      	movs	r2, #0
 801027e:	701a      	strb	r2, [r3, #0]
}
 8010280:	bf00      	nop
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	080148b0 	.word	0x080148b0

0801028c <microDelay>:
	void(*TurnOff)(void);
	void(*test)(void);
};

void microDelay(uint32_t delay)
{
 801028c:	b480      	push	{r7}
 801028e:	b087      	sub	sp, #28
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8010294:	4b21      	ldr	r3, [pc, #132]	@ (801031c <microDelay+0x90>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	2200      	movs	r2, #0
 801029a:	625a      	str	r2, [r3, #36]	@ 0x24
  uint32_t overflow_flag = 0;
 801029c:	2300      	movs	r3, #0
 801029e:	617b      	str	r3, [r7, #20]
  uint32_t delay_ms = 0;
 80102a0:	2300      	movs	r3, #0
 80102a2:	613b      	str	r3, [r7, #16]
  uint16_t delay_us = 0;
 80102a4:	2300      	movs	r3, #0
 80102a6:	81fb      	strh	r3, [r7, #14]

  // delay handling
  delay_ms = delay/1000; //x ms
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	4a1d      	ldr	r2, [pc, #116]	@ (8010320 <microDelay+0x94>)
 80102ac:	fba2 2303 	umull	r2, r3, r2, r3
 80102b0:	099b      	lsrs	r3, r3, #6
 80102b2:	613b      	str	r3, [r7, #16]
  delay_us = delay%1000;
 80102b4:	687a      	ldr	r2, [r7, #4]
 80102b6:	4b1a      	ldr	r3, [pc, #104]	@ (8010320 <microDelay+0x94>)
 80102b8:	fba3 1302 	umull	r1, r3, r3, r2
 80102bc:	099b      	lsrs	r3, r3, #6
 80102be:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80102c2:	fb01 f303 	mul.w	r3, r1, r3
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	81fb      	strh	r3, [r7, #14]

  while (!((overflow_flag >= delay_ms) & (__HAL_TIM_GET_COUNTER(&htim2) >= delay_us))){
 80102ca:	e00d      	b.n	80102e8 <microDelay+0x5c>
	if (__HAL_TIM_GET_COUNTER(&htim2) >= 1000-1){
 80102cc:	4b13      	ldr	r3, [pc, #76]	@ (801031c <microDelay+0x90>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102d2:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d906      	bls.n	80102e8 <microDelay+0x5c>
	  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80102da:	4b10      	ldr	r3, [pc, #64]	@ (801031c <microDelay+0x90>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2200      	movs	r2, #0
 80102e0:	625a      	str	r2, [r3, #36]	@ 0x24
	  overflow_flag++;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	3301      	adds	r3, #1
 80102e6:	617b      	str	r3, [r7, #20]
  while (!((overflow_flag >= delay_ms) & (__HAL_TIM_GET_COUNTER(&htim2) >= delay_us))){
 80102e8:	697a      	ldr	r2, [r7, #20]
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	bf34      	ite	cc
 80102f0:	2301      	movcc	r3, #1
 80102f2:	2300      	movcs	r3, #0
 80102f4:	b2da      	uxtb	r2, r3
 80102f6:	4b09      	ldr	r3, [pc, #36]	@ (801031c <microDelay+0x90>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80102fc:	89fb      	ldrh	r3, [r7, #14]
 80102fe:	4299      	cmp	r1, r3
 8010300:	bf34      	ite	cc
 8010302:	2301      	movcc	r3, #1
 8010304:	2300      	movcs	r3, #0
 8010306:	b2db      	uxtb	r3, r3
 8010308:	4313      	orrs	r3, r2
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1dd      	bne.n	80102cc <microDelay+0x40>
	}
  }
}
 8010310:	bf00      	nop
 8010312:	bf00      	nop
 8010314:	371c      	adds	r7, #28
 8010316:	46bd      	mov	sp, r7
 8010318:	bc80      	pop	{r7}
 801031a:	4770      	bx	lr
 801031c:	200000d0 	.word	0x200000d0
 8010320:	10624dd3 	.word	0x10624dd3

08010324 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f001 fa71 	bl	8011814 <HAL_I2C_EnableListen_IT>
}
 8010332:	bf00      	nop
 8010334:	3708      	adds	r7, #8
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
	...

0801033c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	460b      	mov	r3, r1
 8010346:	70fb      	strb	r3, [r7, #3]
 8010348:	4613      	mov	r3, r2
 801034a:	803b      	strh	r3, [r7, #0]
	//HAL_I2C_DisableListen_IT(&hi2c1);
  if (TransferDirection  == I2C_DIRECTION_RECEIVE){
 801034c:	78fb      	ldrb	r3, [r7, #3]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d106      	bne.n	8010360 <HAL_I2C_AddrCallback+0x24>
	  //TxData[TXDATA_SIZE] = "1234";
	  //
	  HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, TxData, TXDATA_SIZE, I2C_FIRST_FRAME);
 8010352:	2301      	movs	r3, #1
 8010354:	220a      	movs	r2, #10
 8010356:	490b      	ldr	r1, [pc, #44]	@ (8010384 <HAL_I2C_AddrCallback+0x48>)
 8010358:	480b      	ldr	r0, [pc, #44]	@ (8010388 <HAL_I2C_AddrCallback+0x4c>)
 801035a:	f001 f977 	bl	801164c <HAL_I2C_Slave_Seq_Transmit_IT>
  } else if (TransferDirection  == I2C_DIRECTION_TRANSMIT){
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
	  HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, receive_data, 1, I2C_FIRST_AND_LAST_FRAME);
  }
  //HAL_I2C_EnableListen_IT(&hi2c1);
}
 801035e:	e00c      	b.n	801037a <HAL_I2C_AddrCallback+0x3e>
  } else if (TransferDirection  == I2C_DIRECTION_TRANSMIT){
 8010360:	78fb      	ldrb	r3, [r7, #3]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d109      	bne.n	801037a <HAL_I2C_AddrCallback+0x3e>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8010366:	2180      	movs	r1, #128	@ 0x80
 8010368:	4808      	ldr	r0, [pc, #32]	@ (801038c <HAL_I2C_AddrCallback+0x50>)
 801036a:	f000 fffe 	bl	801136a <HAL_GPIO_TogglePin>
	  HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, receive_data, 1, I2C_FIRST_AND_LAST_FRAME);
 801036e:	2308      	movs	r3, #8
 8010370:	2201      	movs	r2, #1
 8010372:	4907      	ldr	r1, [pc, #28]	@ (8010390 <HAL_I2C_AddrCallback+0x54>)
 8010374:	4804      	ldr	r0, [pc, #16]	@ (8010388 <HAL_I2C_AddrCallback+0x4c>)
 8010376:	f001 f9db 	bl	8011730 <HAL_I2C_Slave_Seq_Receive_IT>
}
 801037a:	bf00      	nop
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	20000118 	.word	0x20000118
 8010388:	2000007c 	.word	0x2000007c
 801038c:	40010800 	.word	0x40010800
 8010390:	20000124 	.word	0x20000124

08010394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801039a:	f000 fae5 	bl	8010968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801039e:	f000 f84b 	bl	8010438 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80103a2:	b662      	cpsie	i
}
 80103a4:	bf00      	nop
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80103a6:	f000 f907 	bl	80105b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80103aa:	f000 f8b9 	bl	8010520 <MX_TIM2_Init>
  MX_I2C1_Init();
 80103ae:	f000 f889 	bl	80104c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80103b2:	481a      	ldr	r0, [pc, #104]	@ (801041c <main+0x88>)
 80103b4:	f003 fb58 	bl	8013a68 <HAL_TIM_Base_Start>
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 80103b8:	4819      	ldr	r0, [pc, #100]	@ (8010420 <main+0x8c>)
 80103ba:	f001 fa2b 	bl	8011814 <HAL_I2C_EnableListen_IT>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d001      	beq.n	80103c8 <main+0x34>
	  Error_Handler();
 80103c4:	f000 f994 	bl	80106f0 <Error_Handler>
  }
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80103c8:	4815      	ldr	r0, [pc, #84]	@ (8010420 <main+0x8c>)
 80103ca:	f001 fa58 	bl	801187e <HAL_I2C_EV_IRQHandler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //__disable_irq();
	  //PA17_test();//FF9BF000
	  weight = getHX712(3);
 80103ce:	2003      	movs	r0, #3
 80103d0:	f7ff febc 	bl	801014c <getHX712>
 80103d4:	4603      	mov	r3, r0
 80103d6:	4a13      	ldr	r2, [pc, #76]	@ (8010424 <main+0x90>)
 80103d8:	6013      	str	r3, [r2, #0]
	  int_to_string(weight, TxData);
 80103da:	4b12      	ldr	r3, [pc, #72]	@ (8010424 <main+0x90>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4912      	ldr	r1, [pc, #72]	@ (8010428 <main+0x94>)
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff ff2d 	bl	8010240 <int_to_string>

	  //check for approve of update
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET){
 80103e6:	2102      	movs	r1, #2
 80103e8:	4810      	ldr	r0, [pc, #64]	@ (801042c <main+0x98>)
 80103ea:	f000 ff8f 	bl	801130c <HAL_GPIO_ReadPin>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	d1ec      	bne.n	80103ce <main+0x3a>
		  HAL_FLASH_Unlock();
 80103f4:	f000 fd1e 	bl	8010e34 <HAL_FLASH_Unlock>
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, UPDATE_FLAG_ADDRESS, 0x01);
 80103f8:	f04f 0201 	mov.w	r2, #1
 80103fc:	f04f 0300 	mov.w	r3, #0
 8010400:	490b      	ldr	r1, [pc, #44]	@ (8010430 <main+0x9c>)
 8010402:	2002      	movs	r0, #2
 8010404:	f000 fca6 	bl	8010d54 <HAL_FLASH_Program>
		  CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 8010408:	4b0a      	ldr	r3, [pc, #40]	@ (8010434 <main+0xa0>)
 801040a:	691b      	ldr	r3, [r3, #16]
 801040c:	4a09      	ldr	r2, [pc, #36]	@ (8010434 <main+0xa0>)
 801040e:	f023 0301 	bic.w	r3, r3, #1
 8010412:	6113      	str	r3, [r2, #16]
		  HAL_FLASH_Lock();
 8010414:	f000 fd34 	bl	8010e80 <HAL_FLASH_Lock>
	  weight = getHX712(3);
 8010418:	e7d9      	b.n	80103ce <main+0x3a>
 801041a:	bf00      	nop
 801041c:	200000d0 	.word	0x200000d0
 8010420:	2000007c 	.word	0x2000007c
 8010424:	20000128 	.word	0x20000128
 8010428:	20000118 	.word	0x20000118
 801042c:	40010c00 	.word	0x40010c00
 8010430:	0801f004 	.word	0x0801f004
 8010434:	40022000 	.word	0x40022000

08010438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b090      	sub	sp, #64	@ 0x40
 801043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801043e:	f107 0318 	add.w	r3, r7, #24
 8010442:	2228      	movs	r2, #40	@ 0x28
 8010444:	2100      	movs	r1, #0
 8010446:	4618      	mov	r0, r3
 8010448:	f003 fd96 	bl	8013f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801044c:	1d3b      	adds	r3, r7, #4
 801044e:	2200      	movs	r2, #0
 8010450:	601a      	str	r2, [r3, #0]
 8010452:	605a      	str	r2, [r3, #4]
 8010454:	609a      	str	r2, [r3, #8]
 8010456:	60da      	str	r2, [r3, #12]
 8010458:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 801045a:	2301      	movs	r3, #1
 801045c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801045e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8010462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8010464:	2300      	movs	r3, #0
 8010466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010468:	2301      	movs	r3, #1
 801046a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801046c:	2302      	movs	r3, #2
 801046e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010470:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8010474:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8010476:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 801047a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801047c:	f107 0318 	add.w	r3, r7, #24
 8010480:	4618      	mov	r0, r3
 8010482:	f002 fea5 	bl	80131d0 <HAL_RCC_OscConfig>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d001      	beq.n	8010490 <SystemClock_Config+0x58>
  {
    Error_Handler();
 801048c:	f000 f930 	bl	80106f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010490:	230f      	movs	r3, #15
 8010492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010494:	2302      	movs	r3, #2
 8010496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010498:	2300      	movs	r3, #0
 801049a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801049c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80104a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80104a6:	1d3b      	adds	r3, r7, #4
 80104a8:	2102      	movs	r1, #2
 80104aa:	4618      	mov	r0, r3
 80104ac:	f003 f912 	bl	80136d4 <HAL_RCC_ClockConfig>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80104b6:	f000 f91b 	bl	80106f0 <Error_Handler>
  }
}
 80104ba:	bf00      	nop
 80104bc:	3740      	adds	r7, #64	@ 0x40
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
	...

080104c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80104c8:	4b12      	ldr	r3, [pc, #72]	@ (8010514 <MX_I2C1_Init+0x50>)
 80104ca:	4a13      	ldr	r2, [pc, #76]	@ (8010518 <MX_I2C1_Init+0x54>)
 80104cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80104ce:	4b11      	ldr	r3, [pc, #68]	@ (8010514 <MX_I2C1_Init+0x50>)
 80104d0:	4a12      	ldr	r2, [pc, #72]	@ (801051c <MX_I2C1_Init+0x58>)
 80104d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80104d4:	4b0f      	ldr	r3, [pc, #60]	@ (8010514 <MX_I2C1_Init+0x50>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 80104da:	4b0e      	ldr	r3, [pc, #56]	@ (8010514 <MX_I2C1_Init+0x50>)
 80104dc:	2210      	movs	r2, #16
 80104de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80104e0:	4b0c      	ldr	r3, [pc, #48]	@ (8010514 <MX_I2C1_Init+0x50>)
 80104e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80104e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80104e8:	4b0a      	ldr	r3, [pc, #40]	@ (8010514 <MX_I2C1_Init+0x50>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80104ee:	4b09      	ldr	r3, [pc, #36]	@ (8010514 <MX_I2C1_Init+0x50>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80104f4:	4b07      	ldr	r3, [pc, #28]	@ (8010514 <MX_I2C1_Init+0x50>)
 80104f6:	2200      	movs	r2, #0
 80104f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80104fa:	4b06      	ldr	r3, [pc, #24]	@ (8010514 <MX_I2C1_Init+0x50>)
 80104fc:	2280      	movs	r2, #128	@ 0x80
 80104fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010500:	4804      	ldr	r0, [pc, #16]	@ (8010514 <MX_I2C1_Init+0x50>)
 8010502:	f000 ff4b 	bl	801139c <HAL_I2C_Init>
 8010506:	4603      	mov	r3, r0
 8010508:	2b00      	cmp	r3, #0
 801050a:	d001      	beq.n	8010510 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801050c:	f000 f8f0 	bl	80106f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8010510:	bf00      	nop
 8010512:	bd80      	pop	{r7, pc}
 8010514:	2000007c 	.word	0x2000007c
 8010518:	40005400 	.word	0x40005400
 801051c:	000186a0 	.word	0x000186a0

08010520 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b086      	sub	sp, #24
 8010524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010526:	f107 0308 	add.w	r3, r7, #8
 801052a:	2200      	movs	r2, #0
 801052c:	601a      	str	r2, [r3, #0]
 801052e:	605a      	str	r2, [r3, #4]
 8010530:	609a      	str	r2, [r3, #8]
 8010532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010534:	463b      	mov	r3, r7
 8010536:	2200      	movs	r2, #0
 8010538:	601a      	str	r2, [r3, #0]
 801053a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 801053c:	4b1d      	ldr	r3, [pc, #116]	@ (80105b4 <MX_TIM2_Init+0x94>)
 801053e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8010542:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8010544:	4b1b      	ldr	r3, [pc, #108]	@ (80105b4 <MX_TIM2_Init+0x94>)
 8010546:	2247      	movs	r2, #71	@ 0x47
 8010548:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801054a:	4b1a      	ldr	r3, [pc, #104]	@ (80105b4 <MX_TIM2_Init+0x94>)
 801054c:	2200      	movs	r2, #0
 801054e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8010550:	4b18      	ldr	r3, [pc, #96]	@ (80105b4 <MX_TIM2_Init+0x94>)
 8010552:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010556:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010558:	4b16      	ldr	r3, [pc, #88]	@ (80105b4 <MX_TIM2_Init+0x94>)
 801055a:	2200      	movs	r2, #0
 801055c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801055e:	4b15      	ldr	r3, [pc, #84]	@ (80105b4 <MX_TIM2_Init+0x94>)
 8010560:	2200      	movs	r2, #0
 8010562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8010564:	4813      	ldr	r0, [pc, #76]	@ (80105b4 <MX_TIM2_Init+0x94>)
 8010566:	f003 fa2f 	bl	80139c8 <HAL_TIM_Base_Init>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d001      	beq.n	8010574 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8010570:	f000 f8be 	bl	80106f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010578:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801057a:	f107 0308 	add.w	r3, r7, #8
 801057e:	4619      	mov	r1, r3
 8010580:	480c      	ldr	r0, [pc, #48]	@ (80105b4 <MX_TIM2_Init+0x94>)
 8010582:	f003 fabb 	bl	8013afc <HAL_TIM_ConfigClockSource>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d001      	beq.n	8010590 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 801058c:	f000 f8b0 	bl	80106f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010590:	2300      	movs	r3, #0
 8010592:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010594:	2300      	movs	r3, #0
 8010596:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8010598:	463b      	mov	r3, r7
 801059a:	4619      	mov	r1, r3
 801059c:	4805      	ldr	r0, [pc, #20]	@ (80105b4 <MX_TIM2_Init+0x94>)
 801059e:	f003 fc6d 	bl	8013e7c <HAL_TIMEx_MasterConfigSynchronization>
 80105a2:	4603      	mov	r3, r0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d001      	beq.n	80105ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80105a8:	f000 f8a2 	bl	80106f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80105ac:	bf00      	nop
 80105ae:	3718      	adds	r7, #24
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	200000d0 	.word	0x200000d0

080105b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b088      	sub	sp, #32
 80105bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105be:	f107 0310 	add.w	r3, r7, #16
 80105c2:	2200      	movs	r2, #0
 80105c4:	601a      	str	r2, [r3, #0]
 80105c6:	605a      	str	r2, [r3, #4]
 80105c8:	609a      	str	r2, [r3, #8]
 80105ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80105cc:	4b44      	ldr	r3, [pc, #272]	@ (80106e0 <MX_GPIO_Init+0x128>)
 80105ce:	699b      	ldr	r3, [r3, #24]
 80105d0:	4a43      	ldr	r2, [pc, #268]	@ (80106e0 <MX_GPIO_Init+0x128>)
 80105d2:	f043 0310 	orr.w	r3, r3, #16
 80105d6:	6193      	str	r3, [r2, #24]
 80105d8:	4b41      	ldr	r3, [pc, #260]	@ (80106e0 <MX_GPIO_Init+0x128>)
 80105da:	699b      	ldr	r3, [r3, #24]
 80105dc:	f003 0310 	and.w	r3, r3, #16
 80105e0:	60fb      	str	r3, [r7, #12]
 80105e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80105e4:	4b3e      	ldr	r3, [pc, #248]	@ (80106e0 <MX_GPIO_Init+0x128>)
 80105e6:	699b      	ldr	r3, [r3, #24]
 80105e8:	4a3d      	ldr	r2, [pc, #244]	@ (80106e0 <MX_GPIO_Init+0x128>)
 80105ea:	f043 0320 	orr.w	r3, r3, #32
 80105ee:	6193      	str	r3, [r2, #24]
 80105f0:	4b3b      	ldr	r3, [pc, #236]	@ (80106e0 <MX_GPIO_Init+0x128>)
 80105f2:	699b      	ldr	r3, [r3, #24]
 80105f4:	f003 0320 	and.w	r3, r3, #32
 80105f8:	60bb      	str	r3, [r7, #8]
 80105fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80105fc:	4b38      	ldr	r3, [pc, #224]	@ (80106e0 <MX_GPIO_Init+0x128>)
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	4a37      	ldr	r2, [pc, #220]	@ (80106e0 <MX_GPIO_Init+0x128>)
 8010602:	f043 0304 	orr.w	r3, r3, #4
 8010606:	6193      	str	r3, [r2, #24]
 8010608:	4b35      	ldr	r3, [pc, #212]	@ (80106e0 <MX_GPIO_Init+0x128>)
 801060a:	699b      	ldr	r3, [r3, #24]
 801060c:	f003 0304 	and.w	r3, r3, #4
 8010610:	607b      	str	r3, [r7, #4]
 8010612:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010614:	4b32      	ldr	r3, [pc, #200]	@ (80106e0 <MX_GPIO_Init+0x128>)
 8010616:	699b      	ldr	r3, [r3, #24]
 8010618:	4a31      	ldr	r2, [pc, #196]	@ (80106e0 <MX_GPIO_Init+0x128>)
 801061a:	f043 0308 	orr.w	r3, r3, #8
 801061e:	6193      	str	r3, [r2, #24]
 8010620:	4b2f      	ldr	r3, [pc, #188]	@ (80106e0 <MX_GPIO_Init+0x128>)
 8010622:	699b      	ldr	r3, [r3, #24]
 8010624:	f003 0308 	and.w	r3, r3, #8
 8010628:	603b      	str	r3, [r7, #0]
 801062a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 801062c:	2200      	movs	r2, #0
 801062e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010632:	482c      	ldr	r0, [pc, #176]	@ (80106e4 <MX_GPIO_Init+0x12c>)
 8010634:	f000 fe81 	bl	801133a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8010638:	2200      	movs	r2, #0
 801063a:	2180      	movs	r1, #128	@ 0x80
 801063c:	482a      	ldr	r0, [pc, #168]	@ (80106e8 <MX_GPIO_Init+0x130>)
 801063e:	f000 fe7c 	bl	801133a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8010642:	2200      	movs	r2, #0
 8010644:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010648:	4828      	ldr	r0, [pc, #160]	@ (80106ec <MX_GPIO_Init+0x134>)
 801064a:	f000 fe76 	bl	801133a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 801064e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010654:	2301      	movs	r3, #1
 8010656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010658:	2300      	movs	r3, #0
 801065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801065c:	2302      	movs	r3, #2
 801065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010660:	f107 0310 	add.w	r3, r7, #16
 8010664:	4619      	mov	r1, r3
 8010666:	481f      	ldr	r0, [pc, #124]	@ (80106e4 <MX_GPIO_Init+0x12c>)
 8010668:	f000 fccc 	bl	8011004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801066c:	2380      	movs	r3, #128	@ 0x80
 801066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010670:	2301      	movs	r3, #1
 8010672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010674:	2300      	movs	r3, #0
 8010676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010678:	2302      	movs	r3, #2
 801067a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801067c:	f107 0310 	add.w	r3, r7, #16
 8010680:	4619      	mov	r1, r3
 8010682:	4819      	ldr	r0, [pc, #100]	@ (80106e8 <MX_GPIO_Init+0x130>)
 8010684:	f000 fcbe 	bl	8011004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8010688:	2301      	movs	r3, #1
 801068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801068c:	2300      	movs	r3, #0
 801068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010690:	2302      	movs	r3, #2
 8010692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010694:	f107 0310 	add.w	r3, r7, #16
 8010698:	4619      	mov	r1, r3
 801069a:	4814      	ldr	r0, [pc, #80]	@ (80106ec <MX_GPIO_Init+0x134>)
 801069c:	f000 fcb2 	bl	8011004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80106a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80106a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80106a6:	2300      	movs	r3, #0
 80106a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106aa:	2300      	movs	r3, #0
 80106ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80106ae:	f107 0310 	add.w	r3, r7, #16
 80106b2:	4619      	mov	r1, r3
 80106b4:	480d      	ldr	r0, [pc, #52]	@ (80106ec <MX_GPIO_Init+0x134>)
 80106b6:	f000 fca5 	bl	8011004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80106ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80106be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80106c0:	2301      	movs	r3, #1
 80106c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106c4:	2300      	movs	r3, #0
 80106c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106c8:	2302      	movs	r3, #2
 80106ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80106cc:	f107 0310 	add.w	r3, r7, #16
 80106d0:	4619      	mov	r1, r3
 80106d2:	4806      	ldr	r0, [pc, #24]	@ (80106ec <MX_GPIO_Init+0x134>)
 80106d4:	f000 fc96 	bl	8011004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80106d8:	bf00      	nop
 80106da:	3720      	adds	r7, #32
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	40021000 	.word	0x40021000
 80106e4:	40011000 	.word	0x40011000
 80106e8:	40010800 	.word	0x40010800
 80106ec:	40010c00 	.word	0x40010c00

080106f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80106f0:	b480      	push	{r7}
 80106f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80106f4:	b672      	cpsid	i
}
 80106f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80106f8:	bf00      	nop
 80106fa:	e7fd      	b.n	80106f8 <Error_Handler+0x8>

080106fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8010702:	4b0e      	ldr	r3, [pc, #56]	@ (801073c <HAL_MspInit+0x40>)
 8010704:	699b      	ldr	r3, [r3, #24]
 8010706:	4a0d      	ldr	r2, [pc, #52]	@ (801073c <HAL_MspInit+0x40>)
 8010708:	f043 0301 	orr.w	r3, r3, #1
 801070c:	6193      	str	r3, [r2, #24]
 801070e:	4b0b      	ldr	r3, [pc, #44]	@ (801073c <HAL_MspInit+0x40>)
 8010710:	699b      	ldr	r3, [r3, #24]
 8010712:	f003 0301 	and.w	r3, r3, #1
 8010716:	607b      	str	r3, [r7, #4]
 8010718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801071a:	4b08      	ldr	r3, [pc, #32]	@ (801073c <HAL_MspInit+0x40>)
 801071c:	69db      	ldr	r3, [r3, #28]
 801071e:	4a07      	ldr	r2, [pc, #28]	@ (801073c <HAL_MspInit+0x40>)
 8010720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010724:	61d3      	str	r3, [r2, #28]
 8010726:	4b05      	ldr	r3, [pc, #20]	@ (801073c <HAL_MspInit+0x40>)
 8010728:	69db      	ldr	r3, [r3, #28]
 801072a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801072e:	603b      	str	r3, [r7, #0]
 8010730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010732:	bf00      	nop
 8010734:	370c      	adds	r7, #12
 8010736:	46bd      	mov	sp, r7
 8010738:	bc80      	pop	{r7}
 801073a:	4770      	bx	lr
 801073c:	40021000 	.word	0x40021000

08010740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b088      	sub	sp, #32
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010748:	f107 0310 	add.w	r3, r7, #16
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
 8010750:	605a      	str	r2, [r3, #4]
 8010752:	609a      	str	r2, [r3, #8]
 8010754:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	4a1d      	ldr	r2, [pc, #116]	@ (80107d0 <HAL_I2C_MspInit+0x90>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d133      	bne.n	80107c8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010760:	4b1c      	ldr	r3, [pc, #112]	@ (80107d4 <HAL_I2C_MspInit+0x94>)
 8010762:	699b      	ldr	r3, [r3, #24]
 8010764:	4a1b      	ldr	r2, [pc, #108]	@ (80107d4 <HAL_I2C_MspInit+0x94>)
 8010766:	f043 0308 	orr.w	r3, r3, #8
 801076a:	6193      	str	r3, [r2, #24]
 801076c:	4b19      	ldr	r3, [pc, #100]	@ (80107d4 <HAL_I2C_MspInit+0x94>)
 801076e:	699b      	ldr	r3, [r3, #24]
 8010770:	f003 0308 	and.w	r3, r3, #8
 8010774:	60fb      	str	r3, [r7, #12]
 8010776:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8010778:	23c0      	movs	r3, #192	@ 0xc0
 801077a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801077c:	2312      	movs	r3, #18
 801077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010780:	2303      	movs	r3, #3
 8010782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010784:	f107 0310 	add.w	r3, r7, #16
 8010788:	4619      	mov	r1, r3
 801078a:	4813      	ldr	r0, [pc, #76]	@ (80107d8 <HAL_I2C_MspInit+0x98>)
 801078c:	f000 fc3a 	bl	8011004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010790:	4b10      	ldr	r3, [pc, #64]	@ (80107d4 <HAL_I2C_MspInit+0x94>)
 8010792:	69db      	ldr	r3, [r3, #28]
 8010794:	4a0f      	ldr	r2, [pc, #60]	@ (80107d4 <HAL_I2C_MspInit+0x94>)
 8010796:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801079a:	61d3      	str	r3, [r2, #28]
 801079c:	4b0d      	ldr	r3, [pc, #52]	@ (80107d4 <HAL_I2C_MspInit+0x94>)
 801079e:	69db      	ldr	r3, [r3, #28]
 80107a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80107a4:	60bb      	str	r3, [r7, #8]
 80107a6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80107a8:	2200      	movs	r2, #0
 80107aa:	2100      	movs	r1, #0
 80107ac:	201f      	movs	r0, #31
 80107ae:	f000 fa14 	bl	8010bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80107b2:	201f      	movs	r0, #31
 80107b4:	f000 fa2d 	bl	8010c12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80107b8:	2200      	movs	r2, #0
 80107ba:	2100      	movs	r1, #0
 80107bc:	2020      	movs	r0, #32
 80107be:	f000 fa0c 	bl	8010bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80107c2:	2020      	movs	r0, #32
 80107c4:	f000 fa25 	bl	8010c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80107c8:	bf00      	nop
 80107ca:	3720      	adds	r7, #32
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	40005400 	.word	0x40005400
 80107d4:	40021000 	.word	0x40021000
 80107d8:	40010c00 	.word	0x40010c00

080107dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80107dc:	b480      	push	{r7}
 80107de:	b085      	sub	sp, #20
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80107ec:	d10b      	bne.n	8010806 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80107ee:	4b08      	ldr	r3, [pc, #32]	@ (8010810 <HAL_TIM_Base_MspInit+0x34>)
 80107f0:	69db      	ldr	r3, [r3, #28]
 80107f2:	4a07      	ldr	r2, [pc, #28]	@ (8010810 <HAL_TIM_Base_MspInit+0x34>)
 80107f4:	f043 0301 	orr.w	r3, r3, #1
 80107f8:	61d3      	str	r3, [r2, #28]
 80107fa:	4b05      	ldr	r3, [pc, #20]	@ (8010810 <HAL_TIM_Base_MspInit+0x34>)
 80107fc:	69db      	ldr	r3, [r3, #28]
 80107fe:	f003 0301 	and.w	r3, r3, #1
 8010802:	60fb      	str	r3, [r7, #12]
 8010804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8010806:	bf00      	nop
 8010808:	3714      	adds	r7, #20
 801080a:	46bd      	mov	sp, r7
 801080c:	bc80      	pop	{r7}
 801080e:	4770      	bx	lr
 8010810:	40021000 	.word	0x40021000

08010814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010814:	b480      	push	{r7}
 8010816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010818:	bf00      	nop
 801081a:	e7fd      	b.n	8010818 <NMI_Handler+0x4>

0801081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801081c:	b480      	push	{r7}
 801081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010820:	bf00      	nop
 8010822:	e7fd      	b.n	8010820 <HardFault_Handler+0x4>

08010824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010824:	b480      	push	{r7}
 8010826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010828:	bf00      	nop
 801082a:	e7fd      	b.n	8010828 <MemManage_Handler+0x4>

0801082c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801082c:	b480      	push	{r7}
 801082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010830:	bf00      	nop
 8010832:	e7fd      	b.n	8010830 <BusFault_Handler+0x4>

08010834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010834:	b480      	push	{r7}
 8010836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010838:	bf00      	nop
 801083a:	e7fd      	b.n	8010838 <UsageFault_Handler+0x4>

0801083c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801083c:	b480      	push	{r7}
 801083e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010840:	bf00      	nop
 8010842:	46bd      	mov	sp, r7
 8010844:	bc80      	pop	{r7}
 8010846:	4770      	bx	lr

08010848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010848:	b480      	push	{r7}
 801084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801084c:	bf00      	nop
 801084e:	46bd      	mov	sp, r7
 8010850:	bc80      	pop	{r7}
 8010852:	4770      	bx	lr

08010854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010854:	b480      	push	{r7}
 8010856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010858:	bf00      	nop
 801085a:	46bd      	mov	sp, r7
 801085c:	bc80      	pop	{r7}
 801085e:	4770      	bx	lr

08010860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010864:	f000 f8c6 	bl	80109f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010868:	bf00      	nop
 801086a:	bd80      	pop	{r7, pc}

0801086c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8010870:	4802      	ldr	r0, [pc, #8]	@ (801087c <I2C1_EV_IRQHandler+0x10>)
 8010872:	f001 f804 	bl	801187e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8010876:	bf00      	nop
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	2000007c 	.word	0x2000007c

08010880 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8010884:	4802      	ldr	r0, [pc, #8]	@ (8010890 <I2C1_ER_IRQHandler+0x10>)
 8010886:	f001 f94d 	bl	8011b24 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 801088a:	bf00      	nop
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	2000007c 	.word	0x2000007c

08010894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801089c:	4a14      	ldr	r2, [pc, #80]	@ (80108f0 <_sbrk+0x5c>)
 801089e:	4b15      	ldr	r3, [pc, #84]	@ (80108f4 <_sbrk+0x60>)
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80108a8:	4b13      	ldr	r3, [pc, #76]	@ (80108f8 <_sbrk+0x64>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d102      	bne.n	80108b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80108b0:	4b11      	ldr	r3, [pc, #68]	@ (80108f8 <_sbrk+0x64>)
 80108b2:	4a12      	ldr	r2, [pc, #72]	@ (80108fc <_sbrk+0x68>)
 80108b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80108b6:	4b10      	ldr	r3, [pc, #64]	@ (80108f8 <_sbrk+0x64>)
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4413      	add	r3, r2
 80108be:	693a      	ldr	r2, [r7, #16]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d207      	bcs.n	80108d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80108c4:	f003 fb60 	bl	8013f88 <__errno>
 80108c8:	4603      	mov	r3, r0
 80108ca:	220c      	movs	r2, #12
 80108cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80108ce:	f04f 33ff 	mov.w	r3, #4294967295
 80108d2:	e009      	b.n	80108e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80108d4:	4b08      	ldr	r3, [pc, #32]	@ (80108f8 <_sbrk+0x64>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80108da:	4b07      	ldr	r3, [pc, #28]	@ (80108f8 <_sbrk+0x64>)
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	4413      	add	r3, r2
 80108e2:	4a05      	ldr	r2, [pc, #20]	@ (80108f8 <_sbrk+0x64>)
 80108e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80108e6:	68fb      	ldr	r3, [r7, #12]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3718      	adds	r7, #24
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	20005000 	.word	0x20005000
 80108f4:	00000400 	.word	0x00000400
 80108f8:	2000012c 	.word	0x2000012c
 80108fc:	200002a0 	.word	0x200002a0

08010900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010900:	b480      	push	{r7}
 8010902:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8010904:	4b03      	ldr	r3, [pc, #12]	@ (8010914 <SystemInit+0x14>)
 8010906:	4a04      	ldr	r2, [pc, #16]	@ (8010918 <SystemInit+0x18>)
 8010908:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 801090a:	bf00      	nop
 801090c:	46bd      	mov	sp, r7
 801090e:	bc80      	pop	{r7}
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	e000ed00 	.word	0xe000ed00
 8010918:	08010000 	.word	0x08010000

0801091c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 801091c:	f7ff fff0 	bl	8010900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010920:	480b      	ldr	r0, [pc, #44]	@ (8010950 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8010922:	490c      	ldr	r1, [pc, #48]	@ (8010954 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8010924:	4a0c      	ldr	r2, [pc, #48]	@ (8010958 <LoopFillZerobss+0x16>)
  movs r3, #0
 8010926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010928:	e002      	b.n	8010930 <LoopCopyDataInit>

0801092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801092e:	3304      	adds	r3, #4

08010930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010934:	d3f9      	bcc.n	801092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010936:	4a09      	ldr	r2, [pc, #36]	@ (801095c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8010938:	4c09      	ldr	r4, [pc, #36]	@ (8010960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801093c:	e001      	b.n	8010942 <LoopFillZerobss>

0801093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010940:	3204      	adds	r2, #4

08010942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010944:	d3fb      	bcc.n	801093e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8010946:	f003 fb25 	bl	8013f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801094a:	f7ff fd23 	bl	8010394 <main>
  bx lr
 801094e:	4770      	bx	lr
  ldr r0, =_sdata
 8010950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010954:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8010958:	0801491c 	.word	0x0801491c
  ldr r2, =_sbss
 801095c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8010960:	200002a0 	.word	0x200002a0

08010964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8010964:	e7fe      	b.n	8010964 <ADC1_2_IRQHandler>
	...

08010968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801096c:	4b08      	ldr	r3, [pc, #32]	@ (8010990 <HAL_Init+0x28>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4a07      	ldr	r2, [pc, #28]	@ (8010990 <HAL_Init+0x28>)
 8010972:	f043 0310 	orr.w	r3, r3, #16
 8010976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010978:	2003      	movs	r0, #3
 801097a:	f000 f923 	bl	8010bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801097e:	200f      	movs	r0, #15
 8010980:	f000 f808 	bl	8010994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010984:	f7ff feba 	bl	80106fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010988:	2300      	movs	r3, #0
}
 801098a:	4618      	mov	r0, r3
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	40022000 	.word	0x40022000

08010994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801099c:	4b12      	ldr	r3, [pc, #72]	@ (80109e8 <HAL_InitTick+0x54>)
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	4b12      	ldr	r3, [pc, #72]	@ (80109ec <HAL_InitTick+0x58>)
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	4619      	mov	r1, r3
 80109a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80109aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80109ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80109b2:	4618      	mov	r0, r3
 80109b4:	f000 f93b 	bl	8010c2e <HAL_SYSTICK_Config>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d001      	beq.n	80109c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80109be:	2301      	movs	r3, #1
 80109c0:	e00e      	b.n	80109e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b0f      	cmp	r3, #15
 80109c6:	d80a      	bhi.n	80109de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80109c8:	2200      	movs	r2, #0
 80109ca:	6879      	ldr	r1, [r7, #4]
 80109cc:	f04f 30ff 	mov.w	r0, #4294967295
 80109d0:	f000 f903 	bl	8010bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80109d4:	4a06      	ldr	r2, [pc, #24]	@ (80109f0 <HAL_InitTick+0x5c>)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80109da:	2300      	movs	r3, #0
 80109dc:	e000      	b.n	80109e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80109de:	2301      	movs	r3, #1
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	20000000 	.word	0x20000000
 80109ec:	20000008 	.word	0x20000008
 80109f0:	20000004 	.word	0x20000004

080109f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80109f4:	b480      	push	{r7}
 80109f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80109f8:	4b05      	ldr	r3, [pc, #20]	@ (8010a10 <HAL_IncTick+0x1c>)
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	461a      	mov	r2, r3
 80109fe:	4b05      	ldr	r3, [pc, #20]	@ (8010a14 <HAL_IncTick+0x20>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4413      	add	r3, r2
 8010a04:	4a03      	ldr	r2, [pc, #12]	@ (8010a14 <HAL_IncTick+0x20>)
 8010a06:	6013      	str	r3, [r2, #0]
}
 8010a08:	bf00      	nop
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bc80      	pop	{r7}
 8010a0e:	4770      	bx	lr
 8010a10:	20000008 	.word	0x20000008
 8010a14:	20000130 	.word	0x20000130

08010a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010a18:	b480      	push	{r7}
 8010a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8010a1c:	4b02      	ldr	r3, [pc, #8]	@ (8010a28 <HAL_GetTick+0x10>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bc80      	pop	{r7}
 8010a26:	4770      	bx	lr
 8010a28:	20000130 	.word	0x20000130

08010a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b085      	sub	sp, #20
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f003 0307 	and.w	r3, r3, #7
 8010a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8010a70 <__NVIC_SetPriorityGrouping+0x44>)
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010a42:	68ba      	ldr	r2, [r7, #8]
 8010a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010a48:	4013      	ands	r3, r2
 8010a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010a5e:	4a04      	ldr	r2, [pc, #16]	@ (8010a70 <__NVIC_SetPriorityGrouping+0x44>)
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	60d3      	str	r3, [r2, #12]
}
 8010a64:	bf00      	nop
 8010a66:	3714      	adds	r7, #20
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bc80      	pop	{r7}
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	e000ed00 	.word	0xe000ed00

08010a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010a74:	b480      	push	{r7}
 8010a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010a78:	4b04      	ldr	r3, [pc, #16]	@ (8010a8c <__NVIC_GetPriorityGrouping+0x18>)
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	0a1b      	lsrs	r3, r3, #8
 8010a7e:	f003 0307 	and.w	r3, r3, #7
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bc80      	pop	{r7}
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop
 8010a8c:	e000ed00 	.word	0xe000ed00

08010a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	4603      	mov	r3, r0
 8010a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	db0b      	blt.n	8010aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
 8010aa4:	f003 021f 	and.w	r2, r3, #31
 8010aa8:	4906      	ldr	r1, [pc, #24]	@ (8010ac4 <__NVIC_EnableIRQ+0x34>)
 8010aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010aae:	095b      	lsrs	r3, r3, #5
 8010ab0:	2001      	movs	r0, #1
 8010ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8010ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010aba:	bf00      	nop
 8010abc:	370c      	adds	r7, #12
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bc80      	pop	{r7}
 8010ac2:	4770      	bx	lr
 8010ac4:	e000e100 	.word	0xe000e100

08010ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	4603      	mov	r3, r0
 8010ad0:	6039      	str	r1, [r7, #0]
 8010ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	db0a      	blt.n	8010af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	b2da      	uxtb	r2, r3
 8010ae0:	490c      	ldr	r1, [pc, #48]	@ (8010b14 <__NVIC_SetPriority+0x4c>)
 8010ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ae6:	0112      	lsls	r2, r2, #4
 8010ae8:	b2d2      	uxtb	r2, r2
 8010aea:	440b      	add	r3, r1
 8010aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010af0:	e00a      	b.n	8010b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	b2da      	uxtb	r2, r3
 8010af6:	4908      	ldr	r1, [pc, #32]	@ (8010b18 <__NVIC_SetPriority+0x50>)
 8010af8:	79fb      	ldrb	r3, [r7, #7]
 8010afa:	f003 030f 	and.w	r3, r3, #15
 8010afe:	3b04      	subs	r3, #4
 8010b00:	0112      	lsls	r2, r2, #4
 8010b02:	b2d2      	uxtb	r2, r2
 8010b04:	440b      	add	r3, r1
 8010b06:	761a      	strb	r2, [r3, #24]
}
 8010b08:	bf00      	nop
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bc80      	pop	{r7}
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	e000e100 	.word	0xe000e100
 8010b18:	e000ed00 	.word	0xe000ed00

08010b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b089      	sub	sp, #36	@ 0x24
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	60f8      	str	r0, [r7, #12]
 8010b24:	60b9      	str	r1, [r7, #8]
 8010b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f003 0307 	and.w	r3, r3, #7
 8010b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	f1c3 0307 	rsb	r3, r3, #7
 8010b36:	2b04      	cmp	r3, #4
 8010b38:	bf28      	it	cs
 8010b3a:	2304      	movcs	r3, #4
 8010b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	3304      	adds	r3, #4
 8010b42:	2b06      	cmp	r3, #6
 8010b44:	d902      	bls.n	8010b4c <NVIC_EncodePriority+0x30>
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	3b03      	subs	r3, #3
 8010b4a:	e000      	b.n	8010b4e <NVIC_EncodePriority+0x32>
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010b50:	f04f 32ff 	mov.w	r2, #4294967295
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	fa02 f303 	lsl.w	r3, r2, r3
 8010b5a:	43da      	mvns	r2, r3
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	401a      	ands	r2, r3
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010b64:	f04f 31ff 	mov.w	r1, #4294967295
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8010b6e:	43d9      	mvns	r1, r3
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010b74:	4313      	orrs	r3, r2
         );
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3724      	adds	r7, #36	@ 0x24
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bc80      	pop	{r7}
 8010b7e:	4770      	bx	lr

08010b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	3b01      	subs	r3, #1
 8010b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010b90:	d301      	bcc.n	8010b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010b92:	2301      	movs	r3, #1
 8010b94:	e00f      	b.n	8010bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010b96:	4a0a      	ldr	r2, [pc, #40]	@ (8010bc0 <SysTick_Config+0x40>)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010b9e:	210f      	movs	r1, #15
 8010ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba4:	f7ff ff90 	bl	8010ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010ba8:	4b05      	ldr	r3, [pc, #20]	@ (8010bc0 <SysTick_Config+0x40>)
 8010baa:	2200      	movs	r2, #0
 8010bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010bae:	4b04      	ldr	r3, [pc, #16]	@ (8010bc0 <SysTick_Config+0x40>)
 8010bb0:	2207      	movs	r2, #7
 8010bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010bb4:	2300      	movs	r3, #0
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	e000e010 	.word	0xe000e010

08010bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7ff ff2d 	bl	8010a2c <__NVIC_SetPriorityGrouping>
}
 8010bd2:	bf00      	nop
 8010bd4:	3708      	adds	r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b086      	sub	sp, #24
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	4603      	mov	r3, r0
 8010be2:	60b9      	str	r1, [r7, #8]
 8010be4:	607a      	str	r2, [r7, #4]
 8010be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010be8:	2300      	movs	r3, #0
 8010bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010bec:	f7ff ff42 	bl	8010a74 <__NVIC_GetPriorityGrouping>
 8010bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	68b9      	ldr	r1, [r7, #8]
 8010bf6:	6978      	ldr	r0, [r7, #20]
 8010bf8:	f7ff ff90 	bl	8010b1c <NVIC_EncodePriority>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c02:	4611      	mov	r1, r2
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7ff ff5f 	bl	8010ac8 <__NVIC_SetPriority>
}
 8010c0a:	bf00      	nop
 8010c0c:	3718      	adds	r7, #24
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b082      	sub	sp, #8
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	4603      	mov	r3, r0
 8010c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7ff ff35 	bl	8010a90 <__NVIC_EnableIRQ>
}
 8010c26:	bf00      	nop
 8010c28:	3708      	adds	r7, #8
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b082      	sub	sp, #8
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7ff ffa2 	bl	8010b80 <SysTick_Config>
 8010c3c:	4603      	mov	r3, r0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
	...

08010c48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c50:	2300      	movs	r3, #0
 8010c52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	2b02      	cmp	r3, #2
 8010c5e:	d005      	beq.n	8010c6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2204      	movs	r2, #4
 8010c64:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8010c66:	2301      	movs	r3, #1
 8010c68:	73fb      	strb	r3, [r7, #15]
 8010c6a:	e051      	b.n	8010d10 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f022 020e 	bic.w	r2, r2, #14
 8010c7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f022 0201 	bic.w	r2, r2, #1
 8010c8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a22      	ldr	r2, [pc, #136]	@ (8010d1c <HAL_DMA_Abort_IT+0xd4>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d029      	beq.n	8010cea <HAL_DMA_Abort_IT+0xa2>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a21      	ldr	r2, [pc, #132]	@ (8010d20 <HAL_DMA_Abort_IT+0xd8>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d022      	beq.n	8010ce6 <HAL_DMA_Abort_IT+0x9e>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8010d24 <HAL_DMA_Abort_IT+0xdc>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d01a      	beq.n	8010ce0 <HAL_DMA_Abort_IT+0x98>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4a1e      	ldr	r2, [pc, #120]	@ (8010d28 <HAL_DMA_Abort_IT+0xe0>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d012      	beq.n	8010cda <HAL_DMA_Abort_IT+0x92>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8010d2c <HAL_DMA_Abort_IT+0xe4>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d00a      	beq.n	8010cd4 <HAL_DMA_Abort_IT+0x8c>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8010d30 <HAL_DMA_Abort_IT+0xe8>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d102      	bne.n	8010cce <HAL_DMA_Abort_IT+0x86>
 8010cc8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010ccc:	e00e      	b.n	8010cec <HAL_DMA_Abort_IT+0xa4>
 8010cce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8010cd2:	e00b      	b.n	8010cec <HAL_DMA_Abort_IT+0xa4>
 8010cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8010cd8:	e008      	b.n	8010cec <HAL_DMA_Abort_IT+0xa4>
 8010cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010cde:	e005      	b.n	8010cec <HAL_DMA_Abort_IT+0xa4>
 8010ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ce4:	e002      	b.n	8010cec <HAL_DMA_Abort_IT+0xa4>
 8010ce6:	2310      	movs	r3, #16
 8010ce8:	e000      	b.n	8010cec <HAL_DMA_Abort_IT+0xa4>
 8010cea:	2301      	movs	r3, #1
 8010cec:	4a11      	ldr	r2, [pc, #68]	@ (8010d34 <HAL_DMA_Abort_IT+0xec>)
 8010cee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d003      	beq.n	8010d10 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	4798      	blx	r3
    } 
  }
  return status;
 8010d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3710      	adds	r7, #16
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	40020008 	.word	0x40020008
 8010d20:	4002001c 	.word	0x4002001c
 8010d24:	40020030 	.word	0x40020030
 8010d28:	40020044 	.word	0x40020044
 8010d2c:	40020058 	.word	0x40020058
 8010d30:	4002006c 	.word	0x4002006c
 8010d34:	40020000 	.word	0x40020000

08010d38 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010d46:	b2db      	uxtb	r3, r3
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	370c      	adds	r7, #12
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bc80      	pop	{r7}
 8010d50:	4770      	bx	lr
	...

08010d54 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8010d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d56:	b087      	sub	sp, #28
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010d62:	2301      	movs	r3, #1
 8010d64:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8010e2c <HAL_FLASH_Program+0xd8>)
 8010d70:	7e1b      	ldrb	r3, [r3, #24]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d101      	bne.n	8010d7a <HAL_FLASH_Program+0x26>
 8010d76:	2302      	movs	r3, #2
 8010d78:	e054      	b.n	8010e24 <HAL_FLASH_Program+0xd0>
 8010d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8010e2c <HAL_FLASH_Program+0xd8>)
 8010d7c:	2201      	movs	r2, #1
 8010d7e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010d80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8010d84:	f000 f8a8 	bl	8010ed8 <FLASH_WaitForLastOperation>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8010d8c:	7dfb      	ldrb	r3, [r7, #23]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d144      	bne.n	8010e1c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d102      	bne.n	8010d9e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8010d98:	2301      	movs	r3, #1
 8010d9a:	757b      	strb	r3, [r7, #21]
 8010d9c:	e007      	b.n	8010dae <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2b02      	cmp	r3, #2
 8010da2:	d102      	bne.n	8010daa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8010da4:	2302      	movs	r3, #2
 8010da6:	757b      	strb	r3, [r7, #21]
 8010da8:	e001      	b.n	8010dae <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8010daa:	2304      	movs	r3, #4
 8010dac:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8010dae:	2300      	movs	r3, #0
 8010db0:	75bb      	strb	r3, [r7, #22]
 8010db2:	e02d      	b.n	8010e10 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8010db4:	7dbb      	ldrb	r3, [r7, #22]
 8010db6:	005a      	lsls	r2, r3, #1
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	eb02 0c03 	add.w	ip, r2, r3
 8010dbe:	7dbb      	ldrb	r3, [r7, #22]
 8010dc0:	0119      	lsls	r1, r3, #4
 8010dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010dc6:	f1c1 0620 	rsb	r6, r1, #32
 8010dca:	f1a1 0020 	sub.w	r0, r1, #32
 8010dce:	fa22 f401 	lsr.w	r4, r2, r1
 8010dd2:	fa03 f606 	lsl.w	r6, r3, r6
 8010dd6:	4334      	orrs	r4, r6
 8010dd8:	fa23 f000 	lsr.w	r0, r3, r0
 8010ddc:	4304      	orrs	r4, r0
 8010dde:	fa23 f501 	lsr.w	r5, r3, r1
 8010de2:	b2a3      	uxth	r3, r4
 8010de4:	4619      	mov	r1, r3
 8010de6:	4660      	mov	r0, ip
 8010de8:	f000 f85a 	bl	8010ea0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010dec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8010df0:	f000 f872 	bl	8010ed8 <FLASH_WaitForLastOperation>
 8010df4:	4603      	mov	r3, r0
 8010df6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010df8:	4b0d      	ldr	r3, [pc, #52]	@ (8010e30 <HAL_FLASH_Program+0xdc>)
 8010dfa:	691b      	ldr	r3, [r3, #16]
 8010dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8010e30 <HAL_FLASH_Program+0xdc>)
 8010dfe:	f023 0301 	bic.w	r3, r3, #1
 8010e02:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8010e04:	7dfb      	ldrb	r3, [r7, #23]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d107      	bne.n	8010e1a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8010e0a:	7dbb      	ldrb	r3, [r7, #22]
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	75bb      	strb	r3, [r7, #22]
 8010e10:	7dba      	ldrb	r2, [r7, #22]
 8010e12:	7d7b      	ldrb	r3, [r7, #21]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d3cd      	bcc.n	8010db4 <HAL_FLASH_Program+0x60>
 8010e18:	e000      	b.n	8010e1c <HAL_FLASH_Program+0xc8>
      {
        break;
 8010e1a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010e1c:	4b03      	ldr	r3, [pc, #12]	@ (8010e2c <HAL_FLASH_Program+0xd8>)
 8010e1e:	2200      	movs	r2, #0
 8010e20:	761a      	strb	r2, [r3, #24]

  return status;
 8010e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	371c      	adds	r7, #28
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e2c:	20000138 	.word	0x20000138
 8010e30:	40022000 	.word	0x40022000

08010e34 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8010e74 <HAL_FLASH_Unlock+0x40>)
 8010e40:	691b      	ldr	r3, [r3, #16]
 8010e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d00d      	beq.n	8010e66 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8010e74 <HAL_FLASH_Unlock+0x40>)
 8010e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8010e78 <HAL_FLASH_Unlock+0x44>)
 8010e4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010e50:	4b08      	ldr	r3, [pc, #32]	@ (8010e74 <HAL_FLASH_Unlock+0x40>)
 8010e52:	4a0a      	ldr	r2, [pc, #40]	@ (8010e7c <HAL_FLASH_Unlock+0x48>)
 8010e54:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010e56:	4b07      	ldr	r3, [pc, #28]	@ (8010e74 <HAL_FLASH_Unlock+0x40>)
 8010e58:	691b      	ldr	r3, [r3, #16]
 8010e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d001      	beq.n	8010e66 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8010e62:	2301      	movs	r3, #1
 8010e64:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8010e66:	79fb      	ldrb	r3, [r7, #7]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bc80      	pop	{r7}
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	40022000 	.word	0x40022000
 8010e78:	45670123 	.word	0x45670123
 8010e7c:	cdef89ab 	.word	0xcdef89ab

08010e80 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8010e80:	b480      	push	{r7}
 8010e82:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010e84:	4b05      	ldr	r3, [pc, #20]	@ (8010e9c <HAL_FLASH_Lock+0x1c>)
 8010e86:	691b      	ldr	r3, [r3, #16]
 8010e88:	4a04      	ldr	r2, [pc, #16]	@ (8010e9c <HAL_FLASH_Lock+0x1c>)
 8010e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e8e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8010e90:	2300      	movs	r3, #0
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bc80      	pop	{r7}
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop
 8010e9c:	40022000 	.word	0x40022000

08010ea0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010eac:	4b08      	ldr	r3, [pc, #32]	@ (8010ed0 <FLASH_Program_HalfWord+0x30>)
 8010eae:	2200      	movs	r2, #0
 8010eb0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010eb2:	4b08      	ldr	r3, [pc, #32]	@ (8010ed4 <FLASH_Program_HalfWord+0x34>)
 8010eb4:	691b      	ldr	r3, [r3, #16]
 8010eb6:	4a07      	ldr	r2, [pc, #28]	@ (8010ed4 <FLASH_Program_HalfWord+0x34>)
 8010eb8:	f043 0301 	orr.w	r3, r3, #1
 8010ebc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	887a      	ldrh	r2, [r7, #2]
 8010ec2:	801a      	strh	r2, [r3, #0]
}
 8010ec4:	bf00      	nop
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bc80      	pop	{r7}
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	20000138 	.word	0x20000138
 8010ed4:	40022000 	.word	0x40022000

08010ed8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8010ee0:	f7ff fd9a 	bl	8010a18 <HAL_GetTick>
 8010ee4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010ee6:	e010      	b.n	8010f0a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eee:	d00c      	beq.n	8010f0a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d007      	beq.n	8010f06 <FLASH_WaitForLastOperation+0x2e>
 8010ef6:	f7ff fd8f 	bl	8010a18 <HAL_GetTick>
 8010efa:	4602      	mov	r2, r0
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	1ad3      	subs	r3, r2, r3
 8010f00:	687a      	ldr	r2, [r7, #4]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d201      	bcs.n	8010f0a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8010f06:	2303      	movs	r3, #3
 8010f08:	e025      	b.n	8010f56 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010f0a:	4b15      	ldr	r3, [pc, #84]	@ (8010f60 <FLASH_WaitForLastOperation+0x88>)
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	f003 0301 	and.w	r3, r3, #1
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d1e8      	bne.n	8010ee8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010f16:	4b12      	ldr	r3, [pc, #72]	@ (8010f60 <FLASH_WaitForLastOperation+0x88>)
 8010f18:	68db      	ldr	r3, [r3, #12]
 8010f1a:	f003 0320 	and.w	r3, r3, #32
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d002      	beq.n	8010f28 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010f22:	4b0f      	ldr	r3, [pc, #60]	@ (8010f60 <FLASH_WaitForLastOperation+0x88>)
 8010f24:	2220      	movs	r2, #32
 8010f26:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8010f28:	4b0d      	ldr	r3, [pc, #52]	@ (8010f60 <FLASH_WaitForLastOperation+0x88>)
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	f003 0310 	and.w	r3, r3, #16
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10b      	bne.n	8010f4c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8010f34:	4b0a      	ldr	r3, [pc, #40]	@ (8010f60 <FLASH_WaitForLastOperation+0x88>)
 8010f36:	69db      	ldr	r3, [r3, #28]
 8010f38:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d105      	bne.n	8010f4c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010f40:	4b07      	ldr	r3, [pc, #28]	@ (8010f60 <FLASH_WaitForLastOperation+0x88>)
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d003      	beq.n	8010f54 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8010f4c:	f000 f80a 	bl	8010f64 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010f50:	2301      	movs	r3, #1
 8010f52:	e000      	b.n	8010f56 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8010f54:	2300      	movs	r3, #0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	40022000 	.word	0x40022000

08010f64 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010f6e:	4b23      	ldr	r3, [pc, #140]	@ (8010ffc <FLASH_SetErrorCode+0x98>)
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	f003 0310 	and.w	r3, r3, #16
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d009      	beq.n	8010f8e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010f7a:	4b21      	ldr	r3, [pc, #132]	@ (8011000 <FLASH_SetErrorCode+0x9c>)
 8010f7c:	69db      	ldr	r3, [r3, #28]
 8010f7e:	f043 0302 	orr.w	r3, r3, #2
 8010f82:	4a1f      	ldr	r2, [pc, #124]	@ (8011000 <FLASH_SetErrorCode+0x9c>)
 8010f84:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f043 0310 	orr.w	r3, r3, #16
 8010f8c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8010ffc <FLASH_SetErrorCode+0x98>)
 8010f90:	68db      	ldr	r3, [r3, #12]
 8010f92:	f003 0304 	and.w	r3, r3, #4
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d009      	beq.n	8010fae <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010f9a:	4b19      	ldr	r3, [pc, #100]	@ (8011000 <FLASH_SetErrorCode+0x9c>)
 8010f9c:	69db      	ldr	r3, [r3, #28]
 8010f9e:	f043 0301 	orr.w	r3, r3, #1
 8010fa2:	4a17      	ldr	r2, [pc, #92]	@ (8011000 <FLASH_SetErrorCode+0x9c>)
 8010fa4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f043 0304 	orr.w	r3, r3, #4
 8010fac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8010fae:	4b13      	ldr	r3, [pc, #76]	@ (8010ffc <FLASH_SetErrorCode+0x98>)
 8010fb0:	69db      	ldr	r3, [r3, #28]
 8010fb2:	f003 0301 	and.w	r3, r3, #1
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00b      	beq.n	8010fd2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8010fba:	4b11      	ldr	r3, [pc, #68]	@ (8011000 <FLASH_SetErrorCode+0x9c>)
 8010fbc:	69db      	ldr	r3, [r3, #28]
 8010fbe:	f043 0304 	orr.w	r3, r3, #4
 8010fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8011000 <FLASH_SetErrorCode+0x9c>)
 8010fc4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8010fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8010ffc <FLASH_SetErrorCode+0x98>)
 8010fc8:	69db      	ldr	r3, [r3, #28]
 8010fca:	4a0c      	ldr	r2, [pc, #48]	@ (8010ffc <FLASH_SetErrorCode+0x98>)
 8010fcc:	f023 0301 	bic.w	r3, r3, #1
 8010fd0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f240 1201 	movw	r2, #257	@ 0x101
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d106      	bne.n	8010fea <FLASH_SetErrorCode+0x86>
 8010fdc:	4b07      	ldr	r3, [pc, #28]	@ (8010ffc <FLASH_SetErrorCode+0x98>)
 8010fde:	69db      	ldr	r3, [r3, #28]
 8010fe0:	4a06      	ldr	r2, [pc, #24]	@ (8010ffc <FLASH_SetErrorCode+0x98>)
 8010fe2:	f023 0301 	bic.w	r3, r3, #1
 8010fe6:	61d3      	str	r3, [r2, #28]
}  
 8010fe8:	e002      	b.n	8010ff0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8010fea:	4a04      	ldr	r2, [pc, #16]	@ (8010ffc <FLASH_SetErrorCode+0x98>)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	60d3      	str	r3, [r2, #12]
}  
 8010ff0:	bf00      	nop
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bc80      	pop	{r7}
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop
 8010ffc:	40022000 	.word	0x40022000
 8011000:	20000138 	.word	0x20000138

08011004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011004:	b480      	push	{r7}
 8011006:	b08b      	sub	sp, #44	@ 0x2c
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801100e:	2300      	movs	r3, #0
 8011010:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8011012:	2300      	movs	r3, #0
 8011014:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8011016:	e169      	b.n	80112ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8011018:	2201      	movs	r2, #1
 801101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101c:	fa02 f303 	lsl.w	r3, r2, r3
 8011020:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	69fa      	ldr	r2, [r7, #28]
 8011028:	4013      	ands	r3, r2
 801102a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 801102c:	69ba      	ldr	r2, [r7, #24]
 801102e:	69fb      	ldr	r3, [r7, #28]
 8011030:	429a      	cmp	r2, r3
 8011032:	f040 8158 	bne.w	80112e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	4a9a      	ldr	r2, [pc, #616]	@ (80112a4 <HAL_GPIO_Init+0x2a0>)
 801103c:	4293      	cmp	r3, r2
 801103e:	d05e      	beq.n	80110fe <HAL_GPIO_Init+0xfa>
 8011040:	4a98      	ldr	r2, [pc, #608]	@ (80112a4 <HAL_GPIO_Init+0x2a0>)
 8011042:	4293      	cmp	r3, r2
 8011044:	d875      	bhi.n	8011132 <HAL_GPIO_Init+0x12e>
 8011046:	4a98      	ldr	r2, [pc, #608]	@ (80112a8 <HAL_GPIO_Init+0x2a4>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d058      	beq.n	80110fe <HAL_GPIO_Init+0xfa>
 801104c:	4a96      	ldr	r2, [pc, #600]	@ (80112a8 <HAL_GPIO_Init+0x2a4>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d86f      	bhi.n	8011132 <HAL_GPIO_Init+0x12e>
 8011052:	4a96      	ldr	r2, [pc, #600]	@ (80112ac <HAL_GPIO_Init+0x2a8>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d052      	beq.n	80110fe <HAL_GPIO_Init+0xfa>
 8011058:	4a94      	ldr	r2, [pc, #592]	@ (80112ac <HAL_GPIO_Init+0x2a8>)
 801105a:	4293      	cmp	r3, r2
 801105c:	d869      	bhi.n	8011132 <HAL_GPIO_Init+0x12e>
 801105e:	4a94      	ldr	r2, [pc, #592]	@ (80112b0 <HAL_GPIO_Init+0x2ac>)
 8011060:	4293      	cmp	r3, r2
 8011062:	d04c      	beq.n	80110fe <HAL_GPIO_Init+0xfa>
 8011064:	4a92      	ldr	r2, [pc, #584]	@ (80112b0 <HAL_GPIO_Init+0x2ac>)
 8011066:	4293      	cmp	r3, r2
 8011068:	d863      	bhi.n	8011132 <HAL_GPIO_Init+0x12e>
 801106a:	4a92      	ldr	r2, [pc, #584]	@ (80112b4 <HAL_GPIO_Init+0x2b0>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d046      	beq.n	80110fe <HAL_GPIO_Init+0xfa>
 8011070:	4a90      	ldr	r2, [pc, #576]	@ (80112b4 <HAL_GPIO_Init+0x2b0>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d85d      	bhi.n	8011132 <HAL_GPIO_Init+0x12e>
 8011076:	2b12      	cmp	r3, #18
 8011078:	d82a      	bhi.n	80110d0 <HAL_GPIO_Init+0xcc>
 801107a:	2b12      	cmp	r3, #18
 801107c:	d859      	bhi.n	8011132 <HAL_GPIO_Init+0x12e>
 801107e:	a201      	add	r2, pc, #4	@ (adr r2, 8011084 <HAL_GPIO_Init+0x80>)
 8011080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011084:	080110ff 	.word	0x080110ff
 8011088:	080110d9 	.word	0x080110d9
 801108c:	080110eb 	.word	0x080110eb
 8011090:	0801112d 	.word	0x0801112d
 8011094:	08011133 	.word	0x08011133
 8011098:	08011133 	.word	0x08011133
 801109c:	08011133 	.word	0x08011133
 80110a0:	08011133 	.word	0x08011133
 80110a4:	08011133 	.word	0x08011133
 80110a8:	08011133 	.word	0x08011133
 80110ac:	08011133 	.word	0x08011133
 80110b0:	08011133 	.word	0x08011133
 80110b4:	08011133 	.word	0x08011133
 80110b8:	08011133 	.word	0x08011133
 80110bc:	08011133 	.word	0x08011133
 80110c0:	08011133 	.word	0x08011133
 80110c4:	08011133 	.word	0x08011133
 80110c8:	080110e1 	.word	0x080110e1
 80110cc:	080110f5 	.word	0x080110f5
 80110d0:	4a79      	ldr	r2, [pc, #484]	@ (80112b8 <HAL_GPIO_Init+0x2b4>)
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d013      	beq.n	80110fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80110d6:	e02c      	b.n	8011132 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	623b      	str	r3, [r7, #32]
          break;
 80110de:	e029      	b.n	8011134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	3304      	adds	r3, #4
 80110e6:	623b      	str	r3, [r7, #32]
          break;
 80110e8:	e024      	b.n	8011134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	3308      	adds	r3, #8
 80110f0:	623b      	str	r3, [r7, #32]
          break;
 80110f2:	e01f      	b.n	8011134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	68db      	ldr	r3, [r3, #12]
 80110f8:	330c      	adds	r3, #12
 80110fa:	623b      	str	r3, [r7, #32]
          break;
 80110fc:	e01a      	b.n	8011134 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	689b      	ldr	r3, [r3, #8]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d102      	bne.n	801110c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8011106:	2304      	movs	r3, #4
 8011108:	623b      	str	r3, [r7, #32]
          break;
 801110a:	e013      	b.n	8011134 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	689b      	ldr	r3, [r3, #8]
 8011110:	2b01      	cmp	r3, #1
 8011112:	d105      	bne.n	8011120 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8011114:	2308      	movs	r3, #8
 8011116:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	69fa      	ldr	r2, [r7, #28]
 801111c:	611a      	str	r2, [r3, #16]
          break;
 801111e:	e009      	b.n	8011134 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8011120:	2308      	movs	r3, #8
 8011122:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	69fa      	ldr	r2, [r7, #28]
 8011128:	615a      	str	r2, [r3, #20]
          break;
 801112a:	e003      	b.n	8011134 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 801112c:	2300      	movs	r3, #0
 801112e:	623b      	str	r3, [r7, #32]
          break;
 8011130:	e000      	b.n	8011134 <HAL_GPIO_Init+0x130>
          break;
 8011132:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8011134:	69bb      	ldr	r3, [r7, #24]
 8011136:	2bff      	cmp	r3, #255	@ 0xff
 8011138:	d801      	bhi.n	801113e <HAL_GPIO_Init+0x13a>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	e001      	b.n	8011142 <HAL_GPIO_Init+0x13e>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	3304      	adds	r3, #4
 8011142:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8011144:	69bb      	ldr	r3, [r7, #24]
 8011146:	2bff      	cmp	r3, #255	@ 0xff
 8011148:	d802      	bhi.n	8011150 <HAL_GPIO_Init+0x14c>
 801114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	e002      	b.n	8011156 <HAL_GPIO_Init+0x152>
 8011150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011152:	3b08      	subs	r3, #8
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	210f      	movs	r1, #15
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	fa01 f303 	lsl.w	r3, r1, r3
 8011164:	43db      	mvns	r3, r3
 8011166:	401a      	ands	r2, r3
 8011168:	6a39      	ldr	r1, [r7, #32]
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	fa01 f303 	lsl.w	r3, r1, r3
 8011170:	431a      	orrs	r2, r3
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801117e:	2b00      	cmp	r3, #0
 8011180:	f000 80b1 	beq.w	80112e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8011184:	4b4d      	ldr	r3, [pc, #308]	@ (80112bc <HAL_GPIO_Init+0x2b8>)
 8011186:	699b      	ldr	r3, [r3, #24]
 8011188:	4a4c      	ldr	r2, [pc, #304]	@ (80112bc <HAL_GPIO_Init+0x2b8>)
 801118a:	f043 0301 	orr.w	r3, r3, #1
 801118e:	6193      	str	r3, [r2, #24]
 8011190:	4b4a      	ldr	r3, [pc, #296]	@ (80112bc <HAL_GPIO_Init+0x2b8>)
 8011192:	699b      	ldr	r3, [r3, #24]
 8011194:	f003 0301 	and.w	r3, r3, #1
 8011198:	60bb      	str	r3, [r7, #8]
 801119a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 801119c:	4a48      	ldr	r2, [pc, #288]	@ (80112c0 <HAL_GPIO_Init+0x2bc>)
 801119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a0:	089b      	lsrs	r3, r3, #2
 80111a2:	3302      	adds	r3, #2
 80111a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80111aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ac:	f003 0303 	and.w	r3, r3, #3
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	220f      	movs	r2, #15
 80111b4:	fa02 f303 	lsl.w	r3, r2, r3
 80111b8:	43db      	mvns	r3, r3
 80111ba:	68fa      	ldr	r2, [r7, #12]
 80111bc:	4013      	ands	r3, r2
 80111be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	4a40      	ldr	r2, [pc, #256]	@ (80112c4 <HAL_GPIO_Init+0x2c0>)
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d013      	beq.n	80111f0 <HAL_GPIO_Init+0x1ec>
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	4a3f      	ldr	r2, [pc, #252]	@ (80112c8 <HAL_GPIO_Init+0x2c4>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d00d      	beq.n	80111ec <HAL_GPIO_Init+0x1e8>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	4a3e      	ldr	r2, [pc, #248]	@ (80112cc <HAL_GPIO_Init+0x2c8>)
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d007      	beq.n	80111e8 <HAL_GPIO_Init+0x1e4>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	4a3d      	ldr	r2, [pc, #244]	@ (80112d0 <HAL_GPIO_Init+0x2cc>)
 80111dc:	4293      	cmp	r3, r2
 80111de:	d101      	bne.n	80111e4 <HAL_GPIO_Init+0x1e0>
 80111e0:	2303      	movs	r3, #3
 80111e2:	e006      	b.n	80111f2 <HAL_GPIO_Init+0x1ee>
 80111e4:	2304      	movs	r3, #4
 80111e6:	e004      	b.n	80111f2 <HAL_GPIO_Init+0x1ee>
 80111e8:	2302      	movs	r3, #2
 80111ea:	e002      	b.n	80111f2 <HAL_GPIO_Init+0x1ee>
 80111ec:	2301      	movs	r3, #1
 80111ee:	e000      	b.n	80111f2 <HAL_GPIO_Init+0x1ee>
 80111f0:	2300      	movs	r3, #0
 80111f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111f4:	f002 0203 	and.w	r2, r2, #3
 80111f8:	0092      	lsls	r2, r2, #2
 80111fa:	4093      	lsls	r3, r2
 80111fc:	68fa      	ldr	r2, [r7, #12]
 80111fe:	4313      	orrs	r3, r2
 8011200:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8011202:	492f      	ldr	r1, [pc, #188]	@ (80112c0 <HAL_GPIO_Init+0x2bc>)
 8011204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011206:	089b      	lsrs	r3, r3, #2
 8011208:	3302      	adds	r3, #2
 801120a:	68fa      	ldr	r2, [r7, #12]
 801120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	685b      	ldr	r3, [r3, #4]
 8011214:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011218:	2b00      	cmp	r3, #0
 801121a:	d006      	beq.n	801122a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 801121c:	4b2d      	ldr	r3, [pc, #180]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 801121e:	689a      	ldr	r2, [r3, #8]
 8011220:	492c      	ldr	r1, [pc, #176]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 8011222:	69bb      	ldr	r3, [r7, #24]
 8011224:	4313      	orrs	r3, r2
 8011226:	608b      	str	r3, [r1, #8]
 8011228:	e006      	b.n	8011238 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 801122a:	4b2a      	ldr	r3, [pc, #168]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 801122c:	689a      	ldr	r2, [r3, #8]
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	43db      	mvns	r3, r3
 8011232:	4928      	ldr	r1, [pc, #160]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 8011234:	4013      	ands	r3, r2
 8011236:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011240:	2b00      	cmp	r3, #0
 8011242:	d006      	beq.n	8011252 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8011244:	4b23      	ldr	r3, [pc, #140]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 8011246:	68da      	ldr	r2, [r3, #12]
 8011248:	4922      	ldr	r1, [pc, #136]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	4313      	orrs	r3, r2
 801124e:	60cb      	str	r3, [r1, #12]
 8011250:	e006      	b.n	8011260 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8011252:	4b20      	ldr	r3, [pc, #128]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 8011254:	68da      	ldr	r2, [r3, #12]
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	43db      	mvns	r3, r3
 801125a:	491e      	ldr	r1, [pc, #120]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 801125c:	4013      	ands	r3, r2
 801125e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011268:	2b00      	cmp	r3, #0
 801126a:	d006      	beq.n	801127a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 801126c:	4b19      	ldr	r3, [pc, #100]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 801126e:	685a      	ldr	r2, [r3, #4]
 8011270:	4918      	ldr	r1, [pc, #96]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	4313      	orrs	r3, r2
 8011276:	604b      	str	r3, [r1, #4]
 8011278:	e006      	b.n	8011288 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 801127a:	4b16      	ldr	r3, [pc, #88]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 801127c:	685a      	ldr	r2, [r3, #4]
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	43db      	mvns	r3, r3
 8011282:	4914      	ldr	r1, [pc, #80]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 8011284:	4013      	ands	r3, r2
 8011286:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011290:	2b00      	cmp	r3, #0
 8011292:	d021      	beq.n	80112d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8011294:	4b0f      	ldr	r3, [pc, #60]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	490e      	ldr	r1, [pc, #56]	@ (80112d4 <HAL_GPIO_Init+0x2d0>)
 801129a:	69bb      	ldr	r3, [r7, #24]
 801129c:	4313      	orrs	r3, r2
 801129e:	600b      	str	r3, [r1, #0]
 80112a0:	e021      	b.n	80112e6 <HAL_GPIO_Init+0x2e2>
 80112a2:	bf00      	nop
 80112a4:	10320000 	.word	0x10320000
 80112a8:	10310000 	.word	0x10310000
 80112ac:	10220000 	.word	0x10220000
 80112b0:	10210000 	.word	0x10210000
 80112b4:	10120000 	.word	0x10120000
 80112b8:	10110000 	.word	0x10110000
 80112bc:	40021000 	.word	0x40021000
 80112c0:	40010000 	.word	0x40010000
 80112c4:	40010800 	.word	0x40010800
 80112c8:	40010c00 	.word	0x40010c00
 80112cc:	40011000 	.word	0x40011000
 80112d0:	40011400 	.word	0x40011400
 80112d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80112d8:	4b0b      	ldr	r3, [pc, #44]	@ (8011308 <HAL_GPIO_Init+0x304>)
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	69bb      	ldr	r3, [r7, #24]
 80112de:	43db      	mvns	r3, r3
 80112e0:	4909      	ldr	r1, [pc, #36]	@ (8011308 <HAL_GPIO_Init+0x304>)
 80112e2:	4013      	ands	r3, r2
 80112e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80112e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e8:	3301      	adds	r3, #1
 80112ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f2:	fa22 f303 	lsr.w	r3, r2, r3
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f47f ae8e 	bne.w	8011018 <HAL_GPIO_Init+0x14>
  }
}
 80112fc:	bf00      	nop
 80112fe:	bf00      	nop
 8011300:	372c      	adds	r7, #44	@ 0x2c
 8011302:	46bd      	mov	sp, r7
 8011304:	bc80      	pop	{r7}
 8011306:	4770      	bx	lr
 8011308:	40010400 	.word	0x40010400

0801130c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801130c:	b480      	push	{r7}
 801130e:	b085      	sub	sp, #20
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	460b      	mov	r3, r1
 8011316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	689a      	ldr	r2, [r3, #8]
 801131c:	887b      	ldrh	r3, [r7, #2]
 801131e:	4013      	ands	r3, r2
 8011320:	2b00      	cmp	r3, #0
 8011322:	d002      	beq.n	801132a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011324:	2301      	movs	r3, #1
 8011326:	73fb      	strb	r3, [r7, #15]
 8011328:	e001      	b.n	801132e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801132a:	2300      	movs	r3, #0
 801132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011330:	4618      	mov	r0, r3
 8011332:	3714      	adds	r7, #20
 8011334:	46bd      	mov	sp, r7
 8011336:	bc80      	pop	{r7}
 8011338:	4770      	bx	lr

0801133a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801133a:	b480      	push	{r7}
 801133c:	b083      	sub	sp, #12
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]
 8011342:	460b      	mov	r3, r1
 8011344:	807b      	strh	r3, [r7, #2]
 8011346:	4613      	mov	r3, r2
 8011348:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801134a:	787b      	ldrb	r3, [r7, #1]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d003      	beq.n	8011358 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011350:	887a      	ldrh	r2, [r7, #2]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8011356:	e003      	b.n	8011360 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8011358:	887b      	ldrh	r3, [r7, #2]
 801135a:	041a      	lsls	r2, r3, #16
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	611a      	str	r2, [r3, #16]
}
 8011360:	bf00      	nop
 8011362:	370c      	adds	r7, #12
 8011364:	46bd      	mov	sp, r7
 8011366:	bc80      	pop	{r7}
 8011368:	4770      	bx	lr

0801136a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801136a:	b480      	push	{r7}
 801136c:	b085      	sub	sp, #20
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
 8011372:	460b      	mov	r3, r1
 8011374:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801137c:	887a      	ldrh	r2, [r7, #2]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	4013      	ands	r3, r2
 8011382:	041a      	lsls	r2, r3, #16
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	43d9      	mvns	r1, r3
 8011388:	887b      	ldrh	r3, [r7, #2]
 801138a:	400b      	ands	r3, r1
 801138c:	431a      	orrs	r2, r3
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	611a      	str	r2, [r3, #16]
}
 8011392:	bf00      	nop
 8011394:	3714      	adds	r7, #20
 8011396:	46bd      	mov	sp, r7
 8011398:	bc80      	pop	{r7}
 801139a:	4770      	bx	lr

0801139c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d101      	bne.n	80113ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80113aa:	2301      	movs	r3, #1
 80113ac:	e12b      	b.n	8011606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2200      	movs	r2, #0
 80113be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f7ff f9bc 	bl	8010740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2224      	movs	r2, #36	@ 0x24
 80113cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f022 0201 	bic.w	r2, r2, #1
 80113de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80113ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	681a      	ldr	r2, [r3, #0]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80113fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8011400:	f002 fab0 	bl	8013964 <HAL_RCC_GetPCLK1Freq>
 8011404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	4a81      	ldr	r2, [pc, #516]	@ (8011610 <HAL_I2C_Init+0x274>)
 801140c:	4293      	cmp	r3, r2
 801140e:	d807      	bhi.n	8011420 <HAL_I2C_Init+0x84>
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	4a80      	ldr	r2, [pc, #512]	@ (8011614 <HAL_I2C_Init+0x278>)
 8011414:	4293      	cmp	r3, r2
 8011416:	bf94      	ite	ls
 8011418:	2301      	movls	r3, #1
 801141a:	2300      	movhi	r3, #0
 801141c:	b2db      	uxtb	r3, r3
 801141e:	e006      	b.n	801142e <HAL_I2C_Init+0x92>
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	4a7d      	ldr	r2, [pc, #500]	@ (8011618 <HAL_I2C_Init+0x27c>)
 8011424:	4293      	cmp	r3, r2
 8011426:	bf94      	ite	ls
 8011428:	2301      	movls	r3, #1
 801142a:	2300      	movhi	r3, #0
 801142c:	b2db      	uxtb	r3, r3
 801142e:	2b00      	cmp	r3, #0
 8011430:	d001      	beq.n	8011436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8011432:	2301      	movs	r3, #1
 8011434:	e0e7      	b.n	8011606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	4a78      	ldr	r2, [pc, #480]	@ (801161c <HAL_I2C_Init+0x280>)
 801143a:	fba2 2303 	umull	r2, r3, r2, r3
 801143e:	0c9b      	lsrs	r3, r3, #18
 8011440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	68ba      	ldr	r2, [r7, #8]
 8011452:	430a      	orrs	r2, r1
 8011454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	6a1b      	ldr	r3, [r3, #32]
 801145c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	4a6a      	ldr	r2, [pc, #424]	@ (8011610 <HAL_I2C_Init+0x274>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d802      	bhi.n	8011470 <HAL_I2C_Init+0xd4>
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	3301      	adds	r3, #1
 801146e:	e009      	b.n	8011484 <HAL_I2C_Init+0xe8>
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011476:	fb02 f303 	mul.w	r3, r2, r3
 801147a:	4a69      	ldr	r2, [pc, #420]	@ (8011620 <HAL_I2C_Init+0x284>)
 801147c:	fba2 2303 	umull	r2, r3, r2, r3
 8011480:	099b      	lsrs	r3, r3, #6
 8011482:	3301      	adds	r3, #1
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	6812      	ldr	r2, [r2, #0]
 8011488:	430b      	orrs	r3, r1
 801148a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	69db      	ldr	r3, [r3, #28]
 8011492:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8011496:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	495c      	ldr	r1, [pc, #368]	@ (8011610 <HAL_I2C_Init+0x274>)
 80114a0:	428b      	cmp	r3, r1
 80114a2:	d819      	bhi.n	80114d8 <HAL_I2C_Init+0x13c>
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	1e59      	subs	r1, r3, #1
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	685b      	ldr	r3, [r3, #4]
 80114ac:	005b      	lsls	r3, r3, #1
 80114ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80114b2:	1c59      	adds	r1, r3, #1
 80114b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80114b8:	400b      	ands	r3, r1
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00a      	beq.n	80114d4 <HAL_I2C_Init+0x138>
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	1e59      	subs	r1, r3, #1
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	005b      	lsls	r3, r3, #1
 80114c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80114cc:	3301      	adds	r3, #1
 80114ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114d2:	e051      	b.n	8011578 <HAL_I2C_Init+0x1dc>
 80114d4:	2304      	movs	r3, #4
 80114d6:	e04f      	b.n	8011578 <HAL_I2C_Init+0x1dc>
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d111      	bne.n	8011504 <HAL_I2C_Init+0x168>
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	1e58      	subs	r0, r3, #1
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6859      	ldr	r1, [r3, #4]
 80114e8:	460b      	mov	r3, r1
 80114ea:	005b      	lsls	r3, r3, #1
 80114ec:	440b      	add	r3, r1
 80114ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80114f2:	3301      	adds	r3, #1
 80114f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	bf0c      	ite	eq
 80114fc:	2301      	moveq	r3, #1
 80114fe:	2300      	movne	r3, #0
 8011500:	b2db      	uxtb	r3, r3
 8011502:	e012      	b.n	801152a <HAL_I2C_Init+0x18e>
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	1e58      	subs	r0, r3, #1
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6859      	ldr	r1, [r3, #4]
 801150c:	460b      	mov	r3, r1
 801150e:	009b      	lsls	r3, r3, #2
 8011510:	440b      	add	r3, r1
 8011512:	0099      	lsls	r1, r3, #2
 8011514:	440b      	add	r3, r1
 8011516:	fbb0 f3f3 	udiv	r3, r0, r3
 801151a:	3301      	adds	r3, #1
 801151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011520:	2b00      	cmp	r3, #0
 8011522:	bf0c      	ite	eq
 8011524:	2301      	moveq	r3, #1
 8011526:	2300      	movne	r3, #0
 8011528:	b2db      	uxtb	r3, r3
 801152a:	2b00      	cmp	r3, #0
 801152c:	d001      	beq.n	8011532 <HAL_I2C_Init+0x196>
 801152e:	2301      	movs	r3, #1
 8011530:	e022      	b.n	8011578 <HAL_I2C_Init+0x1dc>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10e      	bne.n	8011558 <HAL_I2C_Init+0x1bc>
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	1e58      	subs	r0, r3, #1
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6859      	ldr	r1, [r3, #4]
 8011542:	460b      	mov	r3, r1
 8011544:	005b      	lsls	r3, r3, #1
 8011546:	440b      	add	r3, r1
 8011548:	fbb0 f3f3 	udiv	r3, r0, r3
 801154c:	3301      	adds	r3, #1
 801154e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011556:	e00f      	b.n	8011578 <HAL_I2C_Init+0x1dc>
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	1e58      	subs	r0, r3, #1
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6859      	ldr	r1, [r3, #4]
 8011560:	460b      	mov	r3, r1
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	440b      	add	r3, r1
 8011566:	0099      	lsls	r1, r3, #2
 8011568:	440b      	add	r3, r1
 801156a:	fbb0 f3f3 	udiv	r3, r0, r3
 801156e:	3301      	adds	r3, #1
 8011570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011578:	6879      	ldr	r1, [r7, #4]
 801157a:	6809      	ldr	r1, [r1, #0]
 801157c:	4313      	orrs	r3, r2
 801157e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	69da      	ldr	r2, [r3, #28]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6a1b      	ldr	r3, [r3, #32]
 8011592:	431a      	orrs	r2, r3
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	430a      	orrs	r2, r1
 801159a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	689b      	ldr	r3, [r3, #8]
 80115a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80115a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80115aa:	687a      	ldr	r2, [r7, #4]
 80115ac:	6911      	ldr	r1, [r2, #16]
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	68d2      	ldr	r2, [r2, #12]
 80115b2:	4311      	orrs	r1, r2
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	6812      	ldr	r2, [r2, #0]
 80115b8:	430b      	orrs	r3, r1
 80115ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	695a      	ldr	r2, [r3, #20]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	699b      	ldr	r3, [r3, #24]
 80115ce:	431a      	orrs	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	430a      	orrs	r2, r1
 80115d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	f042 0201 	orr.w	r2, r2, #1
 80115e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2200      	movs	r2, #0
 80115ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2220      	movs	r2, #32
 80115f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2200      	movs	r2, #0
 80115fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2200      	movs	r2, #0
 8011600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	3710      	adds	r7, #16
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	000186a0 	.word	0x000186a0
 8011614:	001e847f 	.word	0x001e847f
 8011618:	003d08ff 	.word	0x003d08ff
 801161c:	431bde83 	.word	0x431bde83
 8011620:	10624dd3 	.word	0x10624dd3

08011624 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8011624:	b480      	push	{r7}
 8011626:	b083      	sub	sp, #12
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	695b      	ldr	r3, [r3, #20]
 8011632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011636:	2b80      	cmp	r3, #128	@ 0x80
 8011638:	d103      	bne.n	8011642 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	2200      	movs	r2, #0
 8011640:	611a      	str	r2, [r3, #16]
  }
}
 8011642:	bf00      	nop
 8011644:	370c      	adds	r7, #12
 8011646:	46bd      	mov	sp, r7
 8011648:	bc80      	pop	{r7}
 801164a:	4770      	bx	lr

0801164c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 801164c:	b480      	push	{r7}
 801164e:	b087      	sub	sp, #28
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	603b      	str	r3, [r7, #0]
 8011658:	4613      	mov	r3, r2
 801165a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011662:	b2db      	uxtb	r3, r3
 8011664:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8011668:	2b28      	cmp	r3, #40	@ 0x28
 801166a:	d15b      	bne.n	8011724 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d002      	beq.n	8011678 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8011672:	88fb      	ldrh	r3, [r7, #6]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d101      	bne.n	801167c <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8011678:	2301      	movs	r3, #1
 801167a:	e054      	b.n	8011726 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011682:	2b01      	cmp	r3, #1
 8011684:	d101      	bne.n	801168a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8011686:	2302      	movs	r3, #2
 8011688:	e04d      	b.n	8011726 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2201      	movs	r2, #1
 801168e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f003 0301 	and.w	r3, r3, #1
 801169c:	2b01      	cmp	r3, #1
 801169e:	d007      	beq.n	80116b0 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f042 0201 	orr.w	r2, r2, #1
 80116ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80116be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2229      	movs	r2, #41	@ 0x29
 80116c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2220      	movs	r2, #32
 80116cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2200      	movs	r2, #0
 80116d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	68ba      	ldr	r2, [r7, #8]
 80116da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	88fa      	ldrh	r2, [r7, #6]
 80116e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	683a      	ldr	r2, [r7, #0]
 80116f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80116f2:	2300      	movs	r3, #0
 80116f4:	617b      	str	r3, [r7, #20]
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	695b      	ldr	r3, [r3, #20]
 80116fc:	617b      	str	r3, [r7, #20]
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	699b      	ldr	r3, [r3, #24]
 8011704:	617b      	str	r3, [r7, #20]
 8011706:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2200      	movs	r2, #0
 801170c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	685a      	ldr	r2, [r3, #4]
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 801171e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8011720:	2300      	movs	r3, #0
 8011722:	e000      	b.n	8011726 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8011724:	2302      	movs	r3, #2
  }
}
 8011726:	4618      	mov	r0, r3
 8011728:	371c      	adds	r7, #28
 801172a:	46bd      	mov	sp, r7
 801172c:	bc80      	pop	{r7}
 801172e:	4770      	bx	lr

08011730 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8011730:	b480      	push	{r7}
 8011732:	b087      	sub	sp, #28
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	603b      	str	r3, [r7, #0]
 801173c:	4613      	mov	r3, r2
 801173e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011746:	b2db      	uxtb	r3, r3
 8011748:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 801174c:	2b28      	cmp	r3, #40	@ 0x28
 801174e:	d15b      	bne.n	8011808 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d002      	beq.n	801175c <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8011756:	88fb      	ldrh	r3, [r7, #6]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d101      	bne.n	8011760 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 801175c:	2301      	movs	r3, #1
 801175e:	e054      	b.n	801180a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011766:	2b01      	cmp	r3, #1
 8011768:	d101      	bne.n	801176e <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 801176a:	2302      	movs	r3, #2
 801176c:	e04d      	b.n	801180a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2201      	movs	r2, #1
 8011772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f003 0301 	and.w	r3, r3, #1
 8011780:	2b01      	cmp	r3, #1
 8011782:	d007      	beq.n	8011794 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f042 0201 	orr.w	r2, r2, #1
 8011792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	681a      	ldr	r2, [r3, #0]
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80117a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	222a      	movs	r2, #42	@ 0x2a
 80117a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	2220      	movs	r2, #32
 80117b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2200      	movs	r2, #0
 80117b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	68ba      	ldr	r2, [r7, #8]
 80117be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	88fa      	ldrh	r2, [r7, #6]
 80117c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	683a      	ldr	r2, [r7, #0]
 80117d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80117d6:	2300      	movs	r3, #0
 80117d8:	617b      	str	r3, [r7, #20]
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	695b      	ldr	r3, [r3, #20]
 80117e0:	617b      	str	r3, [r7, #20]
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	699b      	ldr	r3, [r3, #24]
 80117e8:	617b      	str	r3, [r7, #20]
 80117ea:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2200      	movs	r2, #0
 80117f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	685a      	ldr	r2, [r3, #4]
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8011802:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8011804:	2300      	movs	r3, #0
 8011806:	e000      	b.n	801180a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8011808:	2302      	movs	r3, #2
  }
}
 801180a:	4618      	mov	r0, r3
 801180c:	371c      	adds	r7, #28
 801180e:	46bd      	mov	sp, r7
 8011810:	bc80      	pop	{r7}
 8011812:	4770      	bx	lr

08011814 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011822:	b2db      	uxtb	r3, r3
 8011824:	2b20      	cmp	r3, #32
 8011826:	d124      	bne.n	8011872 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2228      	movs	r2, #40	@ 0x28
 801182c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	f003 0301 	and.w	r3, r3, #1
 801183a:	2b01      	cmp	r3, #1
 801183c:	d007      	beq.n	801184e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	f042 0201 	orr.w	r2, r2, #1
 801184c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801185c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	685a      	ldr	r2, [r3, #4]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 801186c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 801186e:	2300      	movs	r3, #0
 8011870:	e000      	b.n	8011874 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8011872:	2302      	movs	r3, #2
  }
}
 8011874:	4618      	mov	r0, r3
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	bc80      	pop	{r7}
 801187c:	4770      	bx	lr

0801187e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b088      	sub	sp, #32
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8011886:	2300      	movs	r3, #0
 8011888:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011896:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801189e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80118a6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80118a8:	7bfb      	ldrb	r3, [r7, #15]
 80118aa:	2b10      	cmp	r3, #16
 80118ac:	d003      	beq.n	80118b6 <HAL_I2C_EV_IRQHandler+0x38>
 80118ae:	7bfb      	ldrb	r3, [r7, #15]
 80118b0:	2b40      	cmp	r3, #64	@ 0x40
 80118b2:	f040 80b1 	bne.w	8011a18 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	699b      	ldr	r3, [r3, #24]
 80118bc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	695b      	ldr	r3, [r3, #20]
 80118c4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	f003 0301 	and.w	r3, r3, #1
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d10d      	bne.n	80118ec <HAL_I2C_EV_IRQHandler+0x6e>
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80118d6:	d003      	beq.n	80118e0 <HAL_I2C_EV_IRQHandler+0x62>
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80118de:	d101      	bne.n	80118e4 <HAL_I2C_EV_IRQHandler+0x66>
 80118e0:	2301      	movs	r3, #1
 80118e2:	e000      	b.n	80118e6 <HAL_I2C_EV_IRQHandler+0x68>
 80118e4:	2300      	movs	r3, #0
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	f000 8114 	beq.w	8011b14 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	f003 0301 	and.w	r3, r3, #1
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00b      	beq.n	801190e <HAL_I2C_EV_IRQHandler+0x90>
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d006      	beq.n	801190e <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f001 fc4b 	bl	801319c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 fd4a 	bl	80123a0 <I2C_Master_SB>
 801190c:	e083      	b.n	8011a16 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801190e:	69fb      	ldr	r3, [r7, #28]
 8011910:	f003 0308 	and.w	r3, r3, #8
 8011914:	2b00      	cmp	r3, #0
 8011916:	d008      	beq.n	801192a <HAL_I2C_EV_IRQHandler+0xac>
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801191e:	2b00      	cmp	r3, #0
 8011920:	d003      	beq.n	801192a <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 fdc1 	bl	80124aa <I2C_Master_ADD10>
 8011928:	e075      	b.n	8011a16 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	f003 0302 	and.w	r3, r3, #2
 8011930:	2b00      	cmp	r3, #0
 8011932:	d008      	beq.n	8011946 <HAL_I2C_EV_IRQHandler+0xc8>
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801193a:	2b00      	cmp	r3, #0
 801193c:	d003      	beq.n	8011946 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 fddc 	bl	80124fc <I2C_Master_ADDR>
 8011944:	e067      	b.n	8011a16 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8011946:	69bb      	ldr	r3, [r7, #24]
 8011948:	f003 0304 	and.w	r3, r3, #4
 801194c:	2b00      	cmp	r3, #0
 801194e:	d036      	beq.n	80119be <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801195a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801195e:	f000 80db 	beq.w	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011968:	2b00      	cmp	r3, #0
 801196a:	d00d      	beq.n	8011988 <HAL_I2C_EV_IRQHandler+0x10a>
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011972:	2b00      	cmp	r3, #0
 8011974:	d008      	beq.n	8011988 <HAL_I2C_EV_IRQHandler+0x10a>
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	f003 0304 	and.w	r3, r3, #4
 801197c:	2b00      	cmp	r3, #0
 801197e:	d103      	bne.n	8011988 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f000 f9be 	bl	8011d02 <I2C_MasterTransmit_TXE>
 8011986:	e046      	b.n	8011a16 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	f003 0304 	and.w	r3, r3, #4
 801198e:	2b00      	cmp	r3, #0
 8011990:	f000 80c2 	beq.w	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801199a:	2b00      	cmp	r3, #0
 801199c:	f000 80bc 	beq.w	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80119a0:	7bbb      	ldrb	r3, [r7, #14]
 80119a2:	2b21      	cmp	r3, #33	@ 0x21
 80119a4:	d103      	bne.n	80119ae <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f000 fa47 	bl	8011e3a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80119ac:	e0b4      	b.n	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80119ae:	7bfb      	ldrb	r3, [r7, #15]
 80119b0:	2b40      	cmp	r3, #64	@ 0x40
 80119b2:	f040 80b1 	bne.w	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 fab5 	bl	8011f26 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80119bc:	e0ac      	b.n	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80119c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80119cc:	f000 80a4 	beq.w	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d00d      	beq.n	80119f6 <HAL_I2C_EV_IRQHandler+0x178>
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d008      	beq.n	80119f6 <HAL_I2C_EV_IRQHandler+0x178>
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	f003 0304 	and.w	r3, r3, #4
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d103      	bne.n	80119f6 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 fb31 	bl	8012056 <I2C_MasterReceive_RXNE>
 80119f4:	e00f      	b.n	8011a16 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80119f6:	69fb      	ldr	r3, [r7, #28]
 80119f8:	f003 0304 	and.w	r3, r3, #4
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f000 808b 	beq.w	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	f000 8085 	beq.w	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f000 fbdc 	bl	80121cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011a14:	e080      	b.n	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
 8011a16:	e07f      	b.n	8011b18 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d004      	beq.n	8011a2a <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	695b      	ldr	r3, [r3, #20]
 8011a26:	61fb      	str	r3, [r7, #28]
 8011a28:	e007      	b.n	8011a3a <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	699b      	ldr	r3, [r3, #24]
 8011a30:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	695b      	ldr	r3, [r3, #20]
 8011a38:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011a3a:	69fb      	ldr	r3, [r7, #28]
 8011a3c:	f003 0302 	and.w	r3, r3, #2
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d011      	beq.n	8011a68 <HAL_I2C_EV_IRQHandler+0x1ea>
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00c      	beq.n	8011a68 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d003      	beq.n	8011a5e <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	699b      	ldr	r3, [r3, #24]
 8011a5c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8011a5e:	69b9      	ldr	r1, [r7, #24]
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f000 ffa2 	bl	80129aa <I2C_Slave_ADDR>
 8011a66:	e05a      	b.n	8011b1e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	f003 0310 	and.w	r3, r3, #16
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d008      	beq.n	8011a84 <HAL_I2C_EV_IRQHandler+0x206>
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d003      	beq.n	8011a84 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f000 ffdd 	bl	8012a3c <I2C_Slave_STOPF>
 8011a82:	e04c      	b.n	8011b1e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011a84:	7bbb      	ldrb	r3, [r7, #14]
 8011a86:	2b21      	cmp	r3, #33	@ 0x21
 8011a88:	d002      	beq.n	8011a90 <HAL_I2C_EV_IRQHandler+0x212>
 8011a8a:	7bbb      	ldrb	r3, [r7, #14]
 8011a8c:	2b29      	cmp	r3, #41	@ 0x29
 8011a8e:	d120      	bne.n	8011ad2 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00d      	beq.n	8011ab6 <HAL_I2C_EV_IRQHandler+0x238>
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d008      	beq.n	8011ab6 <HAL_I2C_EV_IRQHandler+0x238>
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	f003 0304 	and.w	r3, r3, #4
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d103      	bne.n	8011ab6 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f000 febf 	bl	8012832 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011ab4:	e032      	b.n	8011b1c <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	f003 0304 	and.w	r3, r3, #4
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d02d      	beq.n	8011b1c <HAL_I2C_EV_IRQHandler+0x29e>
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d028      	beq.n	8011b1c <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f000 feee 	bl	80128ac <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011ad0:	e024      	b.n	8011b1c <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d00d      	beq.n	8011af8 <HAL_I2C_EV_IRQHandler+0x27a>
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d008      	beq.n	8011af8 <HAL_I2C_EV_IRQHandler+0x27a>
 8011ae6:	69fb      	ldr	r3, [r7, #28]
 8011ae8:	f003 0304 	and.w	r3, r3, #4
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d103      	bne.n	8011af8 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 fefb 	bl	80128ec <I2C_SlaveReceive_RXNE>
 8011af6:	e012      	b.n	8011b1e <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	f003 0304 	and.w	r3, r3, #4
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d00d      	beq.n	8011b1e <HAL_I2C_EV_IRQHandler+0x2a0>
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d008      	beq.n	8011b1e <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f000 ff2b 	bl	8012968 <I2C_SlaveReceive_BTF>
 8011b12:	e004      	b.n	8011b1e <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8011b14:	bf00      	nop
 8011b16:	e002      	b.n	8011b1e <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011b18:	bf00      	nop
 8011b1a:	e000      	b.n	8011b1e <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011b1c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8011b1e:	3720      	adds	r7, #32
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b08a      	sub	sp, #40	@ 0x28
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	695b      	ldr	r3, [r3, #20]
 8011b32:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	685b      	ldr	r3, [r3, #4]
 8011b3a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011b46:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8011b48:	6a3b      	ldr	r3, [r7, #32]
 8011b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d015      	beq.n	8011b7e <HAL_I2C_ER_IRQHandler+0x5a>
 8011b52:	69fb      	ldr	r3, [r7, #28]
 8011b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d010      	beq.n	8011b7e <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8011b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b5e:	f043 0301 	orr.w	r3, r3, #1
 8011b62:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8011b6c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011b7c:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8011b7e:	6a3b      	ldr	r3, [r7, #32]
 8011b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00d      	beq.n	8011ba4 <HAL_I2C_ER_IRQHandler+0x80>
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d008      	beq.n	8011ba4 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8011b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b94:	f043 0302 	orr.w	r3, r3, #2
 8011b98:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8011ba2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8011ba4:	6a3b      	ldr	r3, [r7, #32]
 8011ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d03e      	beq.n	8011c2c <HAL_I2C_ER_IRQHandler+0x108>
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d039      	beq.n	8011c2c <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8011bb8:	7efb      	ldrb	r3, [r7, #27]
 8011bba:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011bca:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bd0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8011bd2:	7ebb      	ldrb	r3, [r7, #26]
 8011bd4:	2b20      	cmp	r3, #32
 8011bd6:	d112      	bne.n	8011bfe <HAL_I2C_ER_IRQHandler+0xda>
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d10f      	bne.n	8011bfe <HAL_I2C_ER_IRQHandler+0xda>
 8011bde:	7cfb      	ldrb	r3, [r7, #19]
 8011be0:	2b21      	cmp	r3, #33	@ 0x21
 8011be2:	d008      	beq.n	8011bf6 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8011be4:	7cfb      	ldrb	r3, [r7, #19]
 8011be6:	2b29      	cmp	r3, #41	@ 0x29
 8011be8:	d005      	beq.n	8011bf6 <HAL_I2C_ER_IRQHandler+0xd2>
 8011bea:	7cfb      	ldrb	r3, [r7, #19]
 8011bec:	2b28      	cmp	r3, #40	@ 0x28
 8011bee:	d106      	bne.n	8011bfe <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2b21      	cmp	r3, #33	@ 0x21
 8011bf4:	d103      	bne.n	8011bfe <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f001 f850 	bl	8012c9c <I2C_Slave_AF>
 8011bfc:	e016      	b.n	8011c2c <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8011c06:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8011c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0a:	f043 0304 	orr.w	r3, r3, #4
 8011c0e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8011c10:	7efb      	ldrb	r3, [r7, #27]
 8011c12:	2b10      	cmp	r3, #16
 8011c14:	d002      	beq.n	8011c1c <HAL_I2C_ER_IRQHandler+0xf8>
 8011c16:	7efb      	ldrb	r3, [r7, #27]
 8011c18:	2b40      	cmp	r3, #64	@ 0x40
 8011c1a:	d107      	bne.n	8011c2c <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	681a      	ldr	r2, [r3, #0]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011c2a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8011c2c:	6a3b      	ldr	r3, [r7, #32]
 8011c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00d      	beq.n	8011c52 <HAL_I2C_ER_IRQHandler+0x12e>
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d008      	beq.n	8011c52 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8011c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c42:	f043 0308 	orr.w	r3, r3, #8
 8011c46:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8011c50:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8011c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d008      	beq.n	8011c6a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c5e:	431a      	orrs	r2, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f001 f88d 	bl	8012d84 <I2C_ITError>
  }
}
 8011c6a:	bf00      	nop
 8011c6c:	3728      	adds	r7, #40	@ 0x28
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}

08011c72 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011c72:	b480      	push	{r7}
 8011c74:	b083      	sub	sp, #12
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8011c7a:	bf00      	nop
 8011c7c:	370c      	adds	r7, #12
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bc80      	pop	{r7}
 8011c82:	4770      	bx	lr

08011c84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011c84:	b480      	push	{r7}
 8011c86:	b083      	sub	sp, #12
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8011c8c:	bf00      	nop
 8011c8e:	370c      	adds	r7, #12
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bc80      	pop	{r7}
 8011c94:	4770      	bx	lr

08011c96 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011c96:	b480      	push	{r7}
 8011c98:	b083      	sub	sp, #12
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8011c9e:	bf00      	nop
 8011ca0:	370c      	adds	r7, #12
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bc80      	pop	{r7}
 8011ca6:	4770      	bx	lr

08011ca8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8011cb0:	bf00      	nop
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bc80      	pop	{r7}
 8011cb8:	4770      	bx	lr

08011cba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011cba:	b480      	push	{r7}
 8011cbc:	b083      	sub	sp, #12
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8011cc2:	bf00      	nop
 8011cc4:	370c      	adds	r7, #12
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bc80      	pop	{r7}
 8011cca:	4770      	bx	lr

08011ccc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011ccc:	b480      	push	{r7}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8011cd4:	bf00      	nop
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bc80      	pop	{r7}
 8011cdc:	4770      	bx	lr

08011cde <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011cde:	b480      	push	{r7}
 8011ce0:	b083      	sub	sp, #12
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8011ce6:	bf00      	nop
 8011ce8:	370c      	adds	r7, #12
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bc80      	pop	{r7}
 8011cee:	4770      	bx	lr

08011cf0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8011cf8:	bf00      	nop
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bc80      	pop	{r7}
 8011d00:	4770      	bx	lr

08011d02 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b084      	sub	sp, #16
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011d10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011d18:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d1e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d150      	bne.n	8011dca <I2C_MasterTransmit_TXE+0xc8>
 8011d28:	7bfb      	ldrb	r3, [r7, #15]
 8011d2a:	2b21      	cmp	r3, #33	@ 0x21
 8011d2c:	d14d      	bne.n	8011dca <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	2b08      	cmp	r3, #8
 8011d32:	d01d      	beq.n	8011d70 <I2C_MasterTransmit_TXE+0x6e>
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	2b20      	cmp	r3, #32
 8011d38:	d01a      	beq.n	8011d70 <I2C_MasterTransmit_TXE+0x6e>
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8011d40:	d016      	beq.n	8011d70 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	685a      	ldr	r2, [r3, #4]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011d50:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2211      	movs	r2, #17
 8011d56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2220      	movs	r2, #32
 8011d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f7ff ff82 	bl	8011c72 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011d6e:	e060      	b.n	8011e32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011d7e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011d8e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2200      	movs	r2, #0
 8011d94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2220      	movs	r2, #32
 8011d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	2b40      	cmp	r3, #64	@ 0x40
 8011da8:	d107      	bne.n	8011dba <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2200      	movs	r2, #0
 8011dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ff ff81 	bl	8011cba <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011db8:	e03b      	b.n	8011e32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7ff ff55 	bl	8011c72 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011dc8:	e033      	b.n	8011e32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8011dca:	7bfb      	ldrb	r3, [r7, #15]
 8011dcc:	2b21      	cmp	r3, #33	@ 0x21
 8011dce:	d005      	beq.n	8011ddc <I2C_MasterTransmit_TXE+0xda>
 8011dd0:	7bbb      	ldrb	r3, [r7, #14]
 8011dd2:	2b40      	cmp	r3, #64	@ 0x40
 8011dd4:	d12d      	bne.n	8011e32 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8011dd6:	7bfb      	ldrb	r3, [r7, #15]
 8011dd8:	2b22      	cmp	r3, #34	@ 0x22
 8011dda:	d12a      	bne.n	8011e32 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d108      	bne.n	8011df8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	685a      	ldr	r2, [r3, #4]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011df4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8011df6:	e01c      	b.n	8011e32 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011dfe:	b2db      	uxtb	r3, r3
 8011e00:	2b40      	cmp	r3, #64	@ 0x40
 8011e02:	d103      	bne.n	8011e0c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f000 f88e 	bl	8011f26 <I2C_MemoryTransmit_TXE_BTF>
}
 8011e0a:	e012      	b.n	8011e32 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e10:	781a      	ldrb	r2, [r3, #0]
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e1c:	1c5a      	adds	r2, r3, #1
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	3b01      	subs	r3, #1
 8011e2a:	b29a      	uxth	r2, r3
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8011e30:	e7ff      	b.n	8011e32 <I2C_MasterTransmit_TXE+0x130>
 8011e32:	bf00      	nop
 8011e34:	3710      	adds	r7, #16
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}

08011e3a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8011e3a:	b580      	push	{r7, lr}
 8011e3c:	b084      	sub	sp, #16
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e46:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	2b21      	cmp	r3, #33	@ 0x21
 8011e52:	d164      	bne.n	8011f1e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d012      	beq.n	8011e84 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e62:	781a      	ldrb	r2, [r3, #0]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e6e:	1c5a      	adds	r2, r3, #1
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e78:	b29b      	uxth	r3, r3
 8011e7a:	3b01      	subs	r3, #1
 8011e7c:	b29a      	uxth	r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8011e82:	e04c      	b.n	8011f1e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2b08      	cmp	r3, #8
 8011e88:	d01d      	beq.n	8011ec6 <I2C_MasterTransmit_BTF+0x8c>
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2b20      	cmp	r3, #32
 8011e8e:	d01a      	beq.n	8011ec6 <I2C_MasterTransmit_BTF+0x8c>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8011e96:	d016      	beq.n	8011ec6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	685a      	ldr	r2, [r3, #4]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011ea6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2211      	movs	r2, #17
 8011eac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2220      	movs	r2, #32
 8011eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f7ff fed7 	bl	8011c72 <HAL_I2C_MasterTxCpltCallback>
}
 8011ec4:	e02b      	b.n	8011f1e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	685a      	ldr	r2, [r3, #4]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8011ed4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	681a      	ldr	r2, [r3, #0]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011ee4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2220      	movs	r2, #32
 8011ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	2b40      	cmp	r3, #64	@ 0x40
 8011efe:	d107      	bne.n	8011f10 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7ff fed6 	bl	8011cba <HAL_I2C_MemTxCpltCallback>
}
 8011f0e:	e006      	b.n	8011f1e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2200      	movs	r2, #0
 8011f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7ff feaa 	bl	8011c72 <HAL_I2C_MasterTxCpltCallback>
}
 8011f1e:	bf00      	nop
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8011f26:	b580      	push	{r7, lr}
 8011f28:	b084      	sub	sp, #16
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011f34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d11d      	bne.n	8011f7a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d10b      	bne.n	8011f5e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f4a:	b2da      	uxtb	r2, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f56:	1c9a      	adds	r2, r3, #2
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8011f5c:	e077      	b.n	801204e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	121b      	asrs	r3, r3, #8
 8011f66:	b2da      	uxtb	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f72:	1c5a      	adds	r2, r3, #1
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8011f78:	e069      	b.n	801204e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d10b      	bne.n	8011f9a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f86:	b2da      	uxtb	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f92:	1c5a      	adds	r2, r3, #1
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8011f98:	e059      	b.n	801204e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f9e:	2b02      	cmp	r3, #2
 8011fa0:	d152      	bne.n	8012048 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8011fa2:	7bfb      	ldrb	r3, [r7, #15]
 8011fa4:	2b22      	cmp	r3, #34	@ 0x22
 8011fa6:	d10d      	bne.n	8011fc4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011fb6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fbc:	1c5a      	adds	r2, r3, #1
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8011fc2:	e044      	b.n	801204e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d015      	beq.n	8011ffa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8011fce:	7bfb      	ldrb	r3, [r7, #15]
 8011fd0:	2b21      	cmp	r3, #33	@ 0x21
 8011fd2:	d112      	bne.n	8011ffa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fd8:	781a      	ldrb	r2, [r3, #0]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fe4:	1c5a      	adds	r2, r3, #1
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	3b01      	subs	r3, #1
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8011ff8:	e029      	b.n	801204e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	2b00      	cmp	r3, #0
 8012002:	d124      	bne.n	801204e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8012004:	7bfb      	ldrb	r3, [r7, #15]
 8012006:	2b21      	cmp	r3, #33	@ 0x21
 8012008:	d121      	bne.n	801204e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	685a      	ldr	r2, [r3, #4]
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8012018:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012028:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2200      	movs	r2, #0
 801202e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2220      	movs	r2, #32
 8012034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2200      	movs	r2, #0
 801203c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7ff fe3a 	bl	8011cba <HAL_I2C_MemTxCpltCallback>
}
 8012046:	e002      	b.n	801204e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f7ff faeb 	bl	8011624 <I2C_Flush_DR>
}
 801204e:	bf00      	nop
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}

08012056 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8012056:	b580      	push	{r7, lr}
 8012058:	b084      	sub	sp, #16
 801205a:	af00      	add	r7, sp, #0
 801205c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012064:	b2db      	uxtb	r3, r3
 8012066:	2b22      	cmp	r3, #34	@ 0x22
 8012068:	f040 80ac 	bne.w	80121c4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012070:	b29b      	uxth	r3, r3
 8012072:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2b03      	cmp	r3, #3
 8012078:	d921      	bls.n	80120be <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	691a      	ldr	r2, [r3, #16]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012084:	b2d2      	uxtb	r2, r2
 8012086:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801208c:	1c5a      	adds	r2, r3, #1
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012096:	b29b      	uxth	r3, r3
 8012098:	3b01      	subs	r3, #1
 801209a:	b29a      	uxth	r2, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	2b03      	cmp	r3, #3
 80120a8:	f040 808c 	bne.w	80121c4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	685a      	ldr	r2, [r3, #4]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80120ba:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80120bc:	e082      	b.n	80121c4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120c2:	2b02      	cmp	r3, #2
 80120c4:	d075      	beq.n	80121b2 <I2C_MasterReceive_RXNE+0x15c>
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d002      	beq.n	80120d2 <I2C_MasterReceive_RXNE+0x7c>
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d16f      	bne.n	80121b2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f001 f830 	bl	8013138 <I2C_WaitOnSTOPRequestThroughIT>
 80120d8:	4603      	mov	r3, r0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d142      	bne.n	8012164 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80120ec:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	685a      	ldr	r2, [r3, #4]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80120fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	691a      	ldr	r2, [r3, #16]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012108:	b2d2      	uxtb	r2, r2
 801210a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012110:	1c5a      	adds	r2, r3, #1
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801211a:	b29b      	uxth	r3, r3
 801211c:	3b01      	subs	r3, #1
 801211e:	b29a      	uxth	r2, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2220      	movs	r2, #32
 8012128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012132:	b2db      	uxtb	r3, r3
 8012134:	2b40      	cmp	r3, #64	@ 0x40
 8012136:	d10a      	bne.n	801214e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2200      	movs	r2, #0
 801213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2200      	movs	r2, #0
 8012144:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff fdc0 	bl	8011ccc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801214c:	e03a      	b.n	80121c4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2200      	movs	r2, #0
 8012152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2212      	movs	r2, #18
 801215a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f7ff fd91 	bl	8011c84 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8012162:	e02f      	b.n	80121c4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	685a      	ldr	r2, [r3, #4]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8012172:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	691a      	ldr	r2, [r3, #16]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801217e:	b2d2      	uxtb	r2, r2
 8012180:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012186:	1c5a      	adds	r2, r3, #1
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012190:	b29b      	uxth	r3, r3
 8012192:	3b01      	subs	r3, #1
 8012194:	b29a      	uxth	r2, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2220      	movs	r2, #32
 801219e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2200      	movs	r2, #0
 80121a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7ff fd97 	bl	8011cde <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80121b0:	e008      	b.n	80121c4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	685a      	ldr	r2, [r3, #4]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80121c0:	605a      	str	r2, [r3, #4]
}
 80121c2:	e7ff      	b.n	80121c4 <I2C_MasterReceive_RXNE+0x16e>
 80121c4:	bf00      	nop
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121de:	b29b      	uxth	r3, r3
 80121e0:	2b04      	cmp	r3, #4
 80121e2:	d11b      	bne.n	801221c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	685a      	ldr	r2, [r3, #4]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80121f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	691a      	ldr	r2, [r3, #16]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121fe:	b2d2      	uxtb	r2, r2
 8012200:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012206:	1c5a      	adds	r2, r3, #1
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012210:	b29b      	uxth	r3, r3
 8012212:	3b01      	subs	r3, #1
 8012214:	b29a      	uxth	r2, r3
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801221a:	e0bd      	b.n	8012398 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012220:	b29b      	uxth	r3, r3
 8012222:	2b03      	cmp	r3, #3
 8012224:	d129      	bne.n	801227a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	685a      	ldr	r2, [r3, #4]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012234:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	2b04      	cmp	r3, #4
 801223a:	d00a      	beq.n	8012252 <I2C_MasterReceive_BTF+0x86>
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2b02      	cmp	r3, #2
 8012240:	d007      	beq.n	8012252 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012250:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	691a      	ldr	r2, [r3, #16]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801225c:	b2d2      	uxtb	r2, r2
 801225e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012264:	1c5a      	adds	r2, r3, #1
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801226e:	b29b      	uxth	r3, r3
 8012270:	3b01      	subs	r3, #1
 8012272:	b29a      	uxth	r2, r3
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8012278:	e08e      	b.n	8012398 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801227e:	b29b      	uxth	r3, r3
 8012280:	2b02      	cmp	r3, #2
 8012282:	d176      	bne.n	8012372 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2b01      	cmp	r3, #1
 8012288:	d002      	beq.n	8012290 <I2C_MasterReceive_BTF+0xc4>
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2b10      	cmp	r3, #16
 801228e:	d108      	bne.n	80122a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	681a      	ldr	r2, [r3, #0]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801229e:	601a      	str	r2, [r3, #0]
 80122a0:	e019      	b.n	80122d6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2b04      	cmp	r3, #4
 80122a6:	d002      	beq.n	80122ae <I2C_MasterReceive_BTF+0xe2>
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	d108      	bne.n	80122c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80122bc:	601a      	str	r2, [r3, #0]
 80122be:	e00a      	b.n	80122d6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2b10      	cmp	r3, #16
 80122c4:	d007      	beq.n	80122d6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80122d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	691a      	ldr	r2, [r3, #16]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122e0:	b2d2      	uxtb	r2, r2
 80122e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122e8:	1c5a      	adds	r2, r3, #1
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	3b01      	subs	r3, #1
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	691a      	ldr	r2, [r3, #16]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012306:	b2d2      	uxtb	r2, r2
 8012308:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801230e:	1c5a      	adds	r2, r3, #1
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012318:	b29b      	uxth	r3, r3
 801231a:	3b01      	subs	r3, #1
 801231c:	b29a      	uxth	r2, r3
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	685a      	ldr	r2, [r3, #4]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8012330:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2220      	movs	r2, #32
 8012336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012340:	b2db      	uxtb	r3, r3
 8012342:	2b40      	cmp	r3, #64	@ 0x40
 8012344:	d10a      	bne.n	801235c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2200      	movs	r2, #0
 801234a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2200      	movs	r2, #0
 8012352:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f7ff fcb9 	bl	8011ccc <HAL_I2C_MemRxCpltCallback>
}
 801235a:	e01d      	b.n	8012398 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2200      	movs	r2, #0
 8012360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2212      	movs	r2, #18
 8012368:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f7ff fc8a 	bl	8011c84 <HAL_I2C_MasterRxCpltCallback>
}
 8012370:	e012      	b.n	8012398 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	691a      	ldr	r2, [r3, #16]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801237c:	b2d2      	uxtb	r2, r2
 801237e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012384:	1c5a      	adds	r2, r3, #1
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801238e:	b29b      	uxth	r3, r3
 8012390:	3b01      	subs	r3, #1
 8012392:	b29a      	uxth	r2, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8012398:	bf00      	nop
 801239a:	3710      	adds	r7, #16
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	2b40      	cmp	r3, #64	@ 0x40
 80123b2:	d117      	bne.n	80123e4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d109      	bne.n	80123d0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	461a      	mov	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80123cc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80123ce:	e067      	b.n	80124a0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123d4:	b2db      	uxtb	r3, r3
 80123d6:	f043 0301 	orr.w	r3, r3, #1
 80123da:	b2da      	uxtb	r2, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	611a      	str	r2, [r3, #16]
}
 80123e2:	e05d      	b.n	80124a0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	691b      	ldr	r3, [r3, #16]
 80123e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80123ec:	d133      	bne.n	8012456 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	2b21      	cmp	r3, #33	@ 0x21
 80123f8:	d109      	bne.n	801240e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	461a      	mov	r2, r3
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 801240a:	611a      	str	r2, [r3, #16]
 801240c:	e008      	b.n	8012420 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012412:	b2db      	uxtb	r3, r3
 8012414:	f043 0301 	orr.w	r3, r3, #1
 8012418:	b2da      	uxtb	r2, r3
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012424:	2b00      	cmp	r3, #0
 8012426:	d004      	beq.n	8012432 <I2C_Master_SB+0x92>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801242e:	2b00      	cmp	r3, #0
 8012430:	d108      	bne.n	8012444 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012436:	2b00      	cmp	r3, #0
 8012438:	d032      	beq.n	80124a0 <I2C_Master_SB+0x100>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012440:	2b00      	cmp	r3, #0
 8012442:	d02d      	beq.n	80124a0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	685a      	ldr	r2, [r3, #4]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012452:	605a      	str	r2, [r3, #4]
}
 8012454:	e024      	b.n	80124a0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801245a:	2b00      	cmp	r3, #0
 801245c:	d10e      	bne.n	801247c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012462:	b29b      	uxth	r3, r3
 8012464:	11db      	asrs	r3, r3, #7
 8012466:	b2db      	uxtb	r3, r3
 8012468:	f003 0306 	and.w	r3, r3, #6
 801246c:	b2db      	uxtb	r3, r3
 801246e:	f063 030f 	orn	r3, r3, #15
 8012472:	b2da      	uxtb	r2, r3
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	611a      	str	r2, [r3, #16]
}
 801247a:	e011      	b.n	80124a0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012480:	2b01      	cmp	r3, #1
 8012482:	d10d      	bne.n	80124a0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012488:	b29b      	uxth	r3, r3
 801248a:	11db      	asrs	r3, r3, #7
 801248c:	b2db      	uxtb	r3, r3
 801248e:	f003 0306 	and.w	r3, r3, #6
 8012492:	b2db      	uxtb	r3, r3
 8012494:	f063 030e 	orn	r3, r3, #14
 8012498:	b2da      	uxtb	r2, r3
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	611a      	str	r2, [r3, #16]
}
 80124a0:	bf00      	nop
 80124a2:	370c      	adds	r7, #12
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bc80      	pop	{r7}
 80124a8:	4770      	bx	lr

080124aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80124aa:	b480      	push	{r7}
 80124ac:	b083      	sub	sp, #12
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80124b6:	b2da      	uxtb	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d004      	beq.n	80124d0 <I2C_Master_ADD10+0x26>
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80124ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d108      	bne.n	80124e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d00c      	beq.n	80124f2 <I2C_Master_ADD10+0x48>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d007      	beq.n	80124f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	685a      	ldr	r2, [r3, #4]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80124f0:	605a      	str	r2, [r3, #4]
  }
}
 80124f2:	bf00      	nop
 80124f4:	370c      	adds	r7, #12
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bc80      	pop	{r7}
 80124fa:	4770      	bx	lr

080124fc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80124fc:	b480      	push	{r7}
 80124fe:	b091      	sub	sp, #68	@ 0x44
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801250a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012512:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012518:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012520:	b2db      	uxtb	r3, r3
 8012522:	2b22      	cmp	r3, #34	@ 0x22
 8012524:	f040 8174 	bne.w	8012810 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801252c:	2b00      	cmp	r3, #0
 801252e:	d10f      	bne.n	8012550 <I2C_Master_ADDR+0x54>
 8012530:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012534:	2b40      	cmp	r3, #64	@ 0x40
 8012536:	d10b      	bne.n	8012550 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012538:	2300      	movs	r3, #0
 801253a:	633b      	str	r3, [r7, #48]	@ 0x30
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	695b      	ldr	r3, [r3, #20]
 8012542:	633b      	str	r3, [r7, #48]	@ 0x30
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	699b      	ldr	r3, [r3, #24]
 801254a:	633b      	str	r3, [r7, #48]	@ 0x30
 801254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801254e:	e16b      	b.n	8012828 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012554:	2b00      	cmp	r3, #0
 8012556:	d11d      	bne.n	8012594 <I2C_Master_ADDR+0x98>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	691b      	ldr	r3, [r3, #16]
 801255c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8012560:	d118      	bne.n	8012594 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012562:	2300      	movs	r3, #0
 8012564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	695b      	ldr	r3, [r3, #20]
 801256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	699b      	ldr	r3, [r3, #24]
 8012574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	681a      	ldr	r2, [r3, #0]
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012586:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801258c:	1c5a      	adds	r2, r3, #1
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	651a      	str	r2, [r3, #80]	@ 0x50
 8012592:	e149      	b.n	8012828 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012598:	b29b      	uxth	r3, r3
 801259a:	2b00      	cmp	r3, #0
 801259c:	d113      	bne.n	80125c6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801259e:	2300      	movs	r3, #0
 80125a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	695b      	ldr	r3, [r3, #20]
 80125a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	699b      	ldr	r3, [r3, #24]
 80125b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80125b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	681a      	ldr	r2, [r3, #0]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80125c2:	601a      	str	r2, [r3, #0]
 80125c4:	e120      	b.n	8012808 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	f040 808a 	bne.w	80126e6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80125d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80125d8:	d137      	bne.n	801264a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80125e8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80125f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80125f8:	d113      	bne.n	8012622 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	681a      	ldr	r2, [r3, #0]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012608:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801260a:	2300      	movs	r3, #0
 801260c:	627b      	str	r3, [r7, #36]	@ 0x24
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	695b      	ldr	r3, [r3, #20]
 8012614:	627b      	str	r3, [r7, #36]	@ 0x24
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	699b      	ldr	r3, [r3, #24]
 801261c:	627b      	str	r3, [r7, #36]	@ 0x24
 801261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012620:	e0f2      	b.n	8012808 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012622:	2300      	movs	r3, #0
 8012624:	623b      	str	r3, [r7, #32]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	695b      	ldr	r3, [r3, #20]
 801262c:	623b      	str	r3, [r7, #32]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	699b      	ldr	r3, [r3, #24]
 8012634:	623b      	str	r3, [r7, #32]
 8012636:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	681a      	ldr	r2, [r3, #0]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012646:	601a      	str	r2, [r3, #0]
 8012648:	e0de      	b.n	8012808 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801264a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801264c:	2b08      	cmp	r3, #8
 801264e:	d02e      	beq.n	80126ae <I2C_Master_ADDR+0x1b2>
 8012650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012652:	2b20      	cmp	r3, #32
 8012654:	d02b      	beq.n	80126ae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8012656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012658:	2b12      	cmp	r3, #18
 801265a:	d102      	bne.n	8012662 <I2C_Master_ADDR+0x166>
 801265c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801265e:	2b01      	cmp	r3, #1
 8012660:	d125      	bne.n	80126ae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8012662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012664:	2b04      	cmp	r3, #4
 8012666:	d00e      	beq.n	8012686 <I2C_Master_ADDR+0x18a>
 8012668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801266a:	2b02      	cmp	r3, #2
 801266c:	d00b      	beq.n	8012686 <I2C_Master_ADDR+0x18a>
 801266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012670:	2b10      	cmp	r3, #16
 8012672:	d008      	beq.n	8012686 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012682:	601a      	str	r2, [r3, #0]
 8012684:	e007      	b.n	8012696 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012694:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012696:	2300      	movs	r3, #0
 8012698:	61fb      	str	r3, [r7, #28]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	695b      	ldr	r3, [r3, #20]
 80126a0:	61fb      	str	r3, [r7, #28]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	699b      	ldr	r3, [r3, #24]
 80126a8:	61fb      	str	r3, [r7, #28]
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	e0ac      	b.n	8012808 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80126bc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80126be:	2300      	movs	r3, #0
 80126c0:	61bb      	str	r3, [r7, #24]
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	695b      	ldr	r3, [r3, #20]
 80126c8:	61bb      	str	r3, [r7, #24]
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	699b      	ldr	r3, [r3, #24]
 80126d0:	61bb      	str	r3, [r7, #24]
 80126d2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80126e2:	601a      	str	r2, [r3, #0]
 80126e4:	e090      	b.n	8012808 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	2b02      	cmp	r3, #2
 80126ee:	d158      	bne.n	80127a2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80126f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126f2:	2b04      	cmp	r3, #4
 80126f4:	d021      	beq.n	801273a <I2C_Master_ADDR+0x23e>
 80126f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126f8:	2b02      	cmp	r3, #2
 80126fa:	d01e      	beq.n	801273a <I2C_Master_ADDR+0x23e>
 80126fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126fe:	2b10      	cmp	r3, #16
 8012700:	d01b      	beq.n	801273a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012710:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012712:	2300      	movs	r3, #0
 8012714:	617b      	str	r3, [r7, #20]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	695b      	ldr	r3, [r3, #20]
 801271c:	617b      	str	r3, [r7, #20]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	699b      	ldr	r3, [r3, #24]
 8012724:	617b      	str	r3, [r7, #20]
 8012726:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012736:	601a      	str	r2, [r3, #0]
 8012738:	e012      	b.n	8012760 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	681a      	ldr	r2, [r3, #0]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012748:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801274a:	2300      	movs	r3, #0
 801274c:	613b      	str	r3, [r7, #16]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	695b      	ldr	r3, [r3, #20]
 8012754:	613b      	str	r3, [r7, #16]
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	699b      	ldr	r3, [r3, #24]
 801275c:	613b      	str	r3, [r7, #16]
 801275e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801276a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801276e:	d14b      	bne.n	8012808 <I2C_Master_ADDR+0x30c>
 8012770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012772:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8012776:	d00b      	beq.n	8012790 <I2C_Master_ADDR+0x294>
 8012778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801277a:	2b01      	cmp	r3, #1
 801277c:	d008      	beq.n	8012790 <I2C_Master_ADDR+0x294>
 801277e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012780:	2b08      	cmp	r3, #8
 8012782:	d005      	beq.n	8012790 <I2C_Master_ADDR+0x294>
 8012784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012786:	2b10      	cmp	r3, #16
 8012788:	d002      	beq.n	8012790 <I2C_Master_ADDR+0x294>
 801278a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801278c:	2b20      	cmp	r3, #32
 801278e:	d13b      	bne.n	8012808 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	685a      	ldr	r2, [r3, #4]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801279e:	605a      	str	r2, [r3, #4]
 80127a0:	e032      	b.n	8012808 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	681a      	ldr	r2, [r3, #0]
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80127b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80127bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80127c0:	d117      	bne.n	80127f2 <I2C_Master_ADDR+0x2f6>
 80127c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80127c8:	d00b      	beq.n	80127e2 <I2C_Master_ADDR+0x2e6>
 80127ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d008      	beq.n	80127e2 <I2C_Master_ADDR+0x2e6>
 80127d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127d2:	2b08      	cmp	r3, #8
 80127d4:	d005      	beq.n	80127e2 <I2C_Master_ADDR+0x2e6>
 80127d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127d8:	2b10      	cmp	r3, #16
 80127da:	d002      	beq.n	80127e2 <I2C_Master_ADDR+0x2e6>
 80127dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127de:	2b20      	cmp	r3, #32
 80127e0:	d107      	bne.n	80127f2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	685a      	ldr	r2, [r3, #4]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80127f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80127f2:	2300      	movs	r3, #0
 80127f4:	60fb      	str	r3, [r7, #12]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	695b      	ldr	r3, [r3, #20]
 80127fc:	60fb      	str	r3, [r7, #12]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	699b      	ldr	r3, [r3, #24]
 8012804:	60fb      	str	r3, [r7, #12]
 8012806:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801280e:	e00b      	b.n	8012828 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012810:	2300      	movs	r3, #0
 8012812:	60bb      	str	r3, [r7, #8]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	695b      	ldr	r3, [r3, #20]
 801281a:	60bb      	str	r3, [r7, #8]
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	699b      	ldr	r3, [r3, #24]
 8012822:	60bb      	str	r3, [r7, #8]
 8012824:	68bb      	ldr	r3, [r7, #8]
}
 8012826:	e7ff      	b.n	8012828 <I2C_Master_ADDR+0x32c>
 8012828:	bf00      	nop
 801282a:	3744      	adds	r7, #68	@ 0x44
 801282c:	46bd      	mov	sp, r7
 801282e:	bc80      	pop	{r7}
 8012830:	4770      	bx	lr

08012832 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8012832:	b580      	push	{r7, lr}
 8012834:	b084      	sub	sp, #16
 8012836:	af00      	add	r7, sp, #0
 8012838:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012840:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012846:	b29b      	uxth	r3, r3
 8012848:	2b00      	cmp	r3, #0
 801284a:	d02b      	beq.n	80128a4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012850:	781a      	ldrb	r2, [r3, #0]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801285c:	1c5a      	adds	r2, r3, #1
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012866:	b29b      	uxth	r3, r3
 8012868:	3b01      	subs	r3, #1
 801286a:	b29a      	uxth	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012874:	b29b      	uxth	r3, r3
 8012876:	2b00      	cmp	r3, #0
 8012878:	d114      	bne.n	80128a4 <I2C_SlaveTransmit_TXE+0x72>
 801287a:	7bfb      	ldrb	r3, [r7, #15]
 801287c:	2b29      	cmp	r3, #41	@ 0x29
 801287e:	d111      	bne.n	80128a4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	685a      	ldr	r2, [r3, #4]
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801288e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2221      	movs	r2, #33	@ 0x21
 8012894:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2228      	movs	r2, #40	@ 0x28
 801289a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f7ff f9f9 	bl	8011c96 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80128a4:	bf00      	nop
 80128a6:	3710      	adds	r7, #16
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d011      	beq.n	80128e2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128c2:	781a      	ldrb	r2, [r3, #0]
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128ce:	1c5a      	adds	r2, r3, #1
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80128d8:	b29b      	uxth	r3, r3
 80128da:	3b01      	subs	r3, #1
 80128dc:	b29a      	uxth	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80128e2:	bf00      	nop
 80128e4:	370c      	adds	r7, #12
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bc80      	pop	{r7}
 80128ea:	4770      	bx	lr

080128ec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80128fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012900:	b29b      	uxth	r3, r3
 8012902:	2b00      	cmp	r3, #0
 8012904:	d02c      	beq.n	8012960 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	691a      	ldr	r2, [r3, #16]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012910:	b2d2      	uxtb	r2, r2
 8012912:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012918:	1c5a      	adds	r2, r3, #1
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012922:	b29b      	uxth	r3, r3
 8012924:	3b01      	subs	r3, #1
 8012926:	b29a      	uxth	r2, r3
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012930:	b29b      	uxth	r3, r3
 8012932:	2b00      	cmp	r3, #0
 8012934:	d114      	bne.n	8012960 <I2C_SlaveReceive_RXNE+0x74>
 8012936:	7bfb      	ldrb	r3, [r7, #15]
 8012938:	2b2a      	cmp	r3, #42	@ 0x2a
 801293a:	d111      	bne.n	8012960 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	685a      	ldr	r2, [r3, #4]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801294a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2222      	movs	r2, #34	@ 0x22
 8012950:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2228      	movs	r2, #40	@ 0x28
 8012956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f7ff f9a4 	bl	8011ca8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8012960:	bf00      	nop
 8012962:	3710      	adds	r7, #16
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012974:	b29b      	uxth	r3, r3
 8012976:	2b00      	cmp	r3, #0
 8012978:	d012      	beq.n	80129a0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	691a      	ldr	r2, [r3, #16]
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012984:	b2d2      	uxtb	r2, r2
 8012986:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801298c:	1c5a      	adds	r2, r3, #1
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012996:	b29b      	uxth	r3, r3
 8012998:	3b01      	subs	r3, #1
 801299a:	b29a      	uxth	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80129a0:	bf00      	nop
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bc80      	pop	{r7}
 80129a8:	4770      	bx	lr

080129aa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80129aa:	b580      	push	{r7, lr}
 80129ac:	b084      	sub	sp, #16
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
 80129b2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80129b4:	2300      	movs	r3, #0
 80129b6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80129be:	b2db      	uxtb	r3, r3
 80129c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80129c4:	2b28      	cmp	r3, #40	@ 0x28
 80129c6:	d125      	bne.n	8012a14 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	685a      	ldr	r2, [r3, #4]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80129d6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	f003 0304 	and.w	r3, r3, #4
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d101      	bne.n	80129e6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80129e2:	2301      	movs	r3, #1
 80129e4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d103      	bne.n	80129f8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	81bb      	strh	r3, [r7, #12]
 80129f6:	e002      	b.n	80129fe <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	699b      	ldr	r3, [r3, #24]
 80129fc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2200      	movs	r2, #0
 8012a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8012a06:	89ba      	ldrh	r2, [r7, #12]
 8012a08:	7bfb      	ldrb	r3, [r7, #15]
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7fd fc95 	bl	801033c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8012a12:	e00e      	b.n	8012a32 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012a14:	2300      	movs	r3, #0
 8012a16:	60bb      	str	r3, [r7, #8]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	695b      	ldr	r3, [r3, #20]
 8012a1e:	60bb      	str	r3, [r7, #8]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	699b      	ldr	r3, [r3, #24]
 8012a26:	60bb      	str	r3, [r7, #8]
 8012a28:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8012a32:	bf00      	nop
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
	...

08012a3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012a4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	685a      	ldr	r2, [r3, #4]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8012a5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	60bb      	str	r3, [r7, #8]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	695b      	ldr	r3, [r3, #20]
 8012a66:	60bb      	str	r3, [r7, #8]
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f042 0201 	orr.w	r2, r2, #1
 8012a76:	601a      	str	r2, [r3, #0]
 8012a78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	681a      	ldr	r2, [r3, #0]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012a88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012a98:	d172      	bne.n	8012b80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8012a9a:	7bfb      	ldrb	r3, [r7, #15]
 8012a9c:	2b22      	cmp	r3, #34	@ 0x22
 8012a9e:	d002      	beq.n	8012aa6 <I2C_Slave_STOPF+0x6a>
 8012aa0:	7bfb      	ldrb	r3, [r7, #15]
 8012aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012aa4:	d135      	bne.n	8012b12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	b29a      	uxth	r2, r3
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d005      	beq.n	8012aca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ac2:	f043 0204 	orr.w	r2, r3, #4
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	685a      	ldr	r2, [r3, #4]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012ad8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7fe f92a 	bl	8010d38 <HAL_DMA_GetState>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	d049      	beq.n	8012b7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012aee:	4a69      	ldr	r2, [pc, #420]	@ (8012c94 <I2C_Slave_STOPF+0x258>)
 8012af0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7fe f8a6 	bl	8010c48 <HAL_DMA_Abort_IT>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d03d      	beq.n	8012b7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8012b0c:	4610      	mov	r0, r2
 8012b0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012b10:	e035      	b.n	8012b7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d005      	beq.n	8012b36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b2e:	f043 0204 	orr.w	r2, r3, #4
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	685a      	ldr	r2, [r3, #4]
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012b44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7fe f8f4 	bl	8010d38 <HAL_DMA_GetState>
 8012b50:	4603      	mov	r3, r0
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d014      	beq.n	8012b80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b5a:	4a4e      	ldr	r2, [pc, #312]	@ (8012c94 <I2C_Slave_STOPF+0x258>)
 8012b5c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7fe f870 	bl	8010c48 <HAL_DMA_Abort_IT>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d008      	beq.n	8012b80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012b78:	4610      	mov	r0, r2
 8012b7a:	4798      	blx	r3
 8012b7c:	e000      	b.n	8012b80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012b7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d03e      	beq.n	8012c08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	695b      	ldr	r3, [r3, #20]
 8012b90:	f003 0304 	and.w	r3, r3, #4
 8012b94:	2b04      	cmp	r3, #4
 8012b96:	d112      	bne.n	8012bbe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	691a      	ldr	r2, [r3, #16]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ba2:	b2d2      	uxtb	r2, r2
 8012ba4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012baa:	1c5a      	adds	r2, r3, #1
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012bb4:	b29b      	uxth	r3, r3
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	695b      	ldr	r3, [r3, #20]
 8012bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bc8:	2b40      	cmp	r3, #64	@ 0x40
 8012bca:	d112      	bne.n	8012bf2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	691a      	ldr	r2, [r3, #16]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bd6:	b2d2      	uxtb	r2, r2
 8012bd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bde:	1c5a      	adds	r2, r3, #1
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	3b01      	subs	r3, #1
 8012bec:	b29a      	uxth	r2, r3
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d005      	beq.n	8012c08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c00:	f043 0204 	orr.w	r2, r3, #4
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d003      	beq.n	8012c18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f000 f8b7 	bl	8012d84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8012c16:	e039      	b.n	8012c8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8012c18:	7bfb      	ldrb	r3, [r7, #15]
 8012c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c1c:	d109      	bne.n	8012c32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2200      	movs	r2, #0
 8012c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2228      	movs	r2, #40	@ 0x28
 8012c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f7ff f83b 	bl	8011ca8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012c38:	b2db      	uxtb	r3, r3
 8012c3a:	2b28      	cmp	r3, #40	@ 0x28
 8012c3c:	d111      	bne.n	8012c62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	4a15      	ldr	r2, [pc, #84]	@ (8012c98 <I2C_Slave_STOPF+0x25c>)
 8012c42:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2200      	movs	r2, #0
 8012c48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2220      	movs	r2, #32
 8012c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2200      	movs	r2, #0
 8012c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f7fd fb62 	bl	8010324 <HAL_I2C_ListenCpltCallback>
}
 8012c60:	e014      	b.n	8012c8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c66:	2b22      	cmp	r3, #34	@ 0x22
 8012c68:	d002      	beq.n	8012c70 <I2C_Slave_STOPF+0x234>
 8012c6a:	7bfb      	ldrb	r3, [r7, #15]
 8012c6c:	2b22      	cmp	r3, #34	@ 0x22
 8012c6e:	d10d      	bne.n	8012c8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2200      	movs	r2, #0
 8012c74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2220      	movs	r2, #32
 8012c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2200      	movs	r2, #0
 8012c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f7ff f80e 	bl	8011ca8 <HAL_I2C_SlaveRxCpltCallback>
}
 8012c8c:	bf00      	nop
 8012c8e:	3710      	adds	r7, #16
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}
 8012c94:	08012fe9 	.word	0x08012fe9
 8012c98:	ffff0000 	.word	0xffff0000

08012c9c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012caa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cb0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	2b08      	cmp	r3, #8
 8012cb6:	d002      	beq.n	8012cbe <I2C_Slave_AF+0x22>
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	2b20      	cmp	r3, #32
 8012cbc:	d129      	bne.n	8012d12 <I2C_Slave_AF+0x76>
 8012cbe:	7bfb      	ldrb	r3, [r7, #15]
 8012cc0:	2b28      	cmp	r3, #40	@ 0x28
 8012cc2:	d126      	bne.n	8012d12 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8012d80 <I2C_Slave_AF+0xe4>)
 8012cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	685a      	ldr	r2, [r3, #4]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8012cd8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8012ce2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012cf2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2220      	movs	r2, #32
 8012cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	2200      	movs	r2, #0
 8012d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f7fd fb0a 	bl	8010324 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8012d10:	e031      	b.n	8012d76 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8012d12:	7bfb      	ldrb	r3, [r7, #15]
 8012d14:	2b21      	cmp	r3, #33	@ 0x21
 8012d16:	d129      	bne.n	8012d6c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	4a19      	ldr	r2, [pc, #100]	@ (8012d80 <I2C_Slave_AF+0xe4>)
 8012d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2221      	movs	r2, #33	@ 0x21
 8012d22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2220      	movs	r2, #32
 8012d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	685a      	ldr	r2, [r3, #4]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8012d42:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8012d4c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012d5c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f7fe fc60 	bl	8011624 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f7fe ff96 	bl	8011c96 <HAL_I2C_SlaveTxCpltCallback>
}
 8012d6a:	e004      	b.n	8012d76 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8012d74:	615a      	str	r2, [r3, #20]
}
 8012d76:	bf00      	nop
 8012d78:	3710      	adds	r7, #16
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	ffff0000 	.word	0xffff0000

08012d84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b084      	sub	sp, #16
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012d92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012d9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8012d9c:	7bbb      	ldrb	r3, [r7, #14]
 8012d9e:	2b10      	cmp	r3, #16
 8012da0:	d002      	beq.n	8012da8 <I2C_ITError+0x24>
 8012da2:	7bbb      	ldrb	r3, [r7, #14]
 8012da4:	2b40      	cmp	r3, #64	@ 0x40
 8012da6:	d10a      	bne.n	8012dbe <I2C_ITError+0x3a>
 8012da8:	7bfb      	ldrb	r3, [r7, #15]
 8012daa:	2b22      	cmp	r3, #34	@ 0x22
 8012dac:	d107      	bne.n	8012dbe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012dbc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012dbe:	7bfb      	ldrb	r3, [r7, #15]
 8012dc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8012dc4:	2b28      	cmp	r3, #40	@ 0x28
 8012dc6:	d107      	bne.n	8012dd8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2228      	movs	r2, #40	@ 0x28
 8012dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8012dd6:	e015      	b.n	8012e04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012de6:	d00a      	beq.n	8012dfe <I2C_ITError+0x7a>
 8012de8:	7bfb      	ldrb	r3, [r7, #15]
 8012dea:	2b60      	cmp	r3, #96	@ 0x60
 8012dec:	d007      	beq.n	8012dfe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2220      	movs	r2, #32
 8012df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2200      	movs	r2, #0
 8012e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012e12:	d162      	bne.n	8012eda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	685a      	ldr	r2, [r3, #4]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012e22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8012e2c:	b2db      	uxtb	r3, r3
 8012e2e:	2b01      	cmp	r3, #1
 8012e30:	d020      	beq.n	8012e74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e36:	4a6a      	ldr	r2, [pc, #424]	@ (8012fe0 <I2C_ITError+0x25c>)
 8012e38:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7fd ff02 	bl	8010c48 <HAL_DMA_Abort_IT>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	f000 8089 	beq.w	8012f5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	f022 0201 	bic.w	r2, r2, #1
 8012e5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2220      	movs	r2, #32
 8012e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012e6e:	4610      	mov	r0, r2
 8012e70:	4798      	blx	r3
 8012e72:	e074      	b.n	8012f5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e78:	4a59      	ldr	r2, [pc, #356]	@ (8012fe0 <I2C_ITError+0x25c>)
 8012e7a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7fd fee1 	bl	8010c48 <HAL_DMA_Abort_IT>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d068      	beq.n	8012f5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	695b      	ldr	r3, [r3, #20]
 8012e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e96:	2b40      	cmp	r3, #64	@ 0x40
 8012e98:	d10b      	bne.n	8012eb2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	691a      	ldr	r2, [r3, #16]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ea4:	b2d2      	uxtb	r2, r2
 8012ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012eac:	1c5a      	adds	r2, r3, #1
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	f022 0201 	bic.w	r2, r2, #1
 8012ec0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2220      	movs	r2, #32
 8012ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ed0:	687a      	ldr	r2, [r7, #4]
 8012ed2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8012ed4:	4610      	mov	r0, r2
 8012ed6:	4798      	blx	r3
 8012ed8:	e041      	b.n	8012f5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	2b60      	cmp	r3, #96	@ 0x60
 8012ee4:	d125      	bne.n	8012f32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2220      	movs	r2, #32
 8012eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	695b      	ldr	r3, [r3, #20]
 8012efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012efe:	2b40      	cmp	r3, #64	@ 0x40
 8012f00:	d10b      	bne.n	8012f1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	691a      	ldr	r2, [r3, #16]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f0c:	b2d2      	uxtb	r2, r2
 8012f0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f14:	1c5a      	adds	r2, r3, #1
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f022 0201 	bic.w	r2, r2, #1
 8012f28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7fe fee0 	bl	8011cf0 <HAL_I2C_AbortCpltCallback>
 8012f30:	e015      	b.n	8012f5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	695b      	ldr	r3, [r3, #20]
 8012f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f3c:	2b40      	cmp	r3, #64	@ 0x40
 8012f3e:	d10b      	bne.n	8012f58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	691a      	ldr	r2, [r3, #16]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f4a:	b2d2      	uxtb	r2, r2
 8012f4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f52:	1c5a      	adds	r2, r3, #1
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7fe fec0 	bl	8011cde <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	f003 0301 	and.w	r3, r3, #1
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d10e      	bne.n	8012f8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d109      	bne.n	8012f8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d104      	bne.n	8012f8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d007      	beq.n	8012f9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	685a      	ldr	r2, [r3, #4]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8012f9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012fa2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fa8:	f003 0304 	and.w	r3, r3, #4
 8012fac:	2b04      	cmp	r3, #4
 8012fae:	d113      	bne.n	8012fd8 <I2C_ITError+0x254>
 8012fb0:	7bfb      	ldrb	r3, [r7, #15]
 8012fb2:	2b28      	cmp	r3, #40	@ 0x28
 8012fb4:	d110      	bne.n	8012fd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8012fe4 <I2C_ITError+0x260>)
 8012fba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2220      	movs	r2, #32
 8012fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7fd f9a6 	bl	8010324 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012fd8:	bf00      	nop
 8012fda:	3710      	adds	r7, #16
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	08012fe9 	.word	0x08012fe9
 8012fe4:	ffff0000 	.word	0xffff0000

08012fe8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b086      	sub	sp, #24
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013000:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8013002:	4b4b      	ldr	r3, [pc, #300]	@ (8013130 <I2C_DMAAbort+0x148>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	08db      	lsrs	r3, r3, #3
 8013008:	4a4a      	ldr	r2, [pc, #296]	@ (8013134 <I2C_DMAAbort+0x14c>)
 801300a:	fba2 2303 	umull	r2, r3, r2, r3
 801300e:	0a1a      	lsrs	r2, r3, #8
 8013010:	4613      	mov	r3, r2
 8013012:	009b      	lsls	r3, r3, #2
 8013014:	4413      	add	r3, r2
 8013016:	00da      	lsls	r2, r3, #3
 8013018:	1ad3      	subs	r3, r2, r3
 801301a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d106      	bne.n	8013030 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013026:	f043 0220 	orr.w	r2, r3, #32
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 801302e:	e00a      	b.n	8013046 <I2C_DMAAbort+0x5e>
    }
    count--;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	3b01      	subs	r3, #1
 8013034:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013044:	d0ea      	beq.n	801301c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801304a:	2b00      	cmp	r3, #0
 801304c:	d003      	beq.n	8013056 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013052:	2200      	movs	r2, #0
 8013054:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801305a:	2b00      	cmp	r3, #0
 801305c:	d003      	beq.n	8013066 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013062:	2200      	movs	r2, #0
 8013064:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013074:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	2200      	movs	r2, #0
 801307a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013080:	2b00      	cmp	r3, #0
 8013082:	d003      	beq.n	801308c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013088:	2200      	movs	r2, #0
 801308a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013090:	2b00      	cmp	r3, #0
 8013092:	d003      	beq.n	801309c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013098:	2200      	movs	r2, #0
 801309a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	697b      	ldr	r3, [r7, #20]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f022 0201 	bic.w	r2, r2, #1
 80130aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80130b2:	b2db      	uxtb	r3, r3
 80130b4:	2b60      	cmp	r3, #96	@ 0x60
 80130b6:	d10e      	bne.n	80130d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	2220      	movs	r2, #32
 80130bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	2200      	movs	r2, #0
 80130c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	2200      	movs	r2, #0
 80130cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80130ce:	6978      	ldr	r0, [r7, #20]
 80130d0:	f7fe fe0e 	bl	8011cf0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80130d4:	e027      	b.n	8013126 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80130d6:	7cfb      	ldrb	r3, [r7, #19]
 80130d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80130dc:	2b28      	cmp	r3, #40	@ 0x28
 80130de:	d117      	bne.n	8013110 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	681a      	ldr	r2, [r3, #0]
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f042 0201 	orr.w	r2, r2, #1
 80130ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80130fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	2200      	movs	r2, #0
 8013104:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	2228      	movs	r2, #40	@ 0x28
 801310a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801310e:	e007      	b.n	8013120 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	2220      	movs	r2, #32
 8013114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	2200      	movs	r2, #0
 801311c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8013120:	6978      	ldr	r0, [r7, #20]
 8013122:	f7fe fddc 	bl	8011cde <HAL_I2C_ErrorCallback>
}
 8013126:	bf00      	nop
 8013128:	3718      	adds	r7, #24
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}
 801312e:	bf00      	nop
 8013130:	20000000 	.word	0x20000000
 8013134:	14f8b589 	.word	0x14f8b589

08013138 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8013138:	b480      	push	{r7}
 801313a:	b085      	sub	sp, #20
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013140:	2300      	movs	r3, #0
 8013142:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8013144:	4b13      	ldr	r3, [pc, #76]	@ (8013194 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	08db      	lsrs	r3, r3, #3
 801314a:	4a13      	ldr	r2, [pc, #76]	@ (8013198 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801314c:	fba2 2303 	umull	r2, r3, r2, r3
 8013150:	0a1a      	lsrs	r2, r3, #8
 8013152:	4613      	mov	r3, r2
 8013154:	009b      	lsls	r3, r3, #2
 8013156:	4413      	add	r3, r2
 8013158:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	3b01      	subs	r3, #1
 801315e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d107      	bne.n	8013176 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801316a:	f043 0220 	orr.w	r2, r3, #32
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8013172:	2301      	movs	r3, #1
 8013174:	e008      	b.n	8013188 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013184:	d0e9      	beq.n	801315a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8013186:	2300      	movs	r3, #0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3714      	adds	r7, #20
 801318c:	46bd      	mov	sp, r7
 801318e:	bc80      	pop	{r7}
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	20000000 	.word	0x20000000
 8013198:	14f8b589 	.word	0x14f8b589

0801319c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131a8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80131ac:	d103      	bne.n	80131b6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2201      	movs	r2, #1
 80131b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80131b4:	e007      	b.n	80131c6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80131be:	d102      	bne.n	80131c6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2208      	movs	r2, #8
 80131c4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80131c6:	bf00      	nop
 80131c8:	370c      	adds	r7, #12
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bc80      	pop	{r7}
 80131ce:	4770      	bx	lr

080131d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b086      	sub	sp, #24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d101      	bne.n	80131e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80131de:	2301      	movs	r3, #1
 80131e0:	e272      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f003 0301 	and.w	r3, r3, #1
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	f000 8087 	beq.w	80132fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80131f0:	4b92      	ldr	r3, [pc, #584]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	f003 030c 	and.w	r3, r3, #12
 80131f8:	2b04      	cmp	r3, #4
 80131fa:	d00c      	beq.n	8013216 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80131fc:	4b8f      	ldr	r3, [pc, #572]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	f003 030c 	and.w	r3, r3, #12
 8013204:	2b08      	cmp	r3, #8
 8013206:	d112      	bne.n	801322e <HAL_RCC_OscConfig+0x5e>
 8013208:	4b8c      	ldr	r3, [pc, #560]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013214:	d10b      	bne.n	801322e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013216:	4b89      	ldr	r3, [pc, #548]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801321e:	2b00      	cmp	r3, #0
 8013220:	d06c      	beq.n	80132fc <HAL_RCC_OscConfig+0x12c>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d168      	bne.n	80132fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801322a:	2301      	movs	r3, #1
 801322c:	e24c      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013236:	d106      	bne.n	8013246 <HAL_RCC_OscConfig+0x76>
 8013238:	4b80      	ldr	r3, [pc, #512]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4a7f      	ldr	r2, [pc, #508]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 801323e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013242:	6013      	str	r3, [r2, #0]
 8013244:	e02e      	b.n	80132a4 <HAL_RCC_OscConfig+0xd4>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d10c      	bne.n	8013268 <HAL_RCC_OscConfig+0x98>
 801324e:	4b7b      	ldr	r3, [pc, #492]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	4a7a      	ldr	r2, [pc, #488]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013258:	6013      	str	r3, [r2, #0]
 801325a:	4b78      	ldr	r3, [pc, #480]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	4a77      	ldr	r2, [pc, #476]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013264:	6013      	str	r3, [r2, #0]
 8013266:	e01d      	b.n	80132a4 <HAL_RCC_OscConfig+0xd4>
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	685b      	ldr	r3, [r3, #4]
 801326c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013270:	d10c      	bne.n	801328c <HAL_RCC_OscConfig+0xbc>
 8013272:	4b72      	ldr	r3, [pc, #456]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	4a71      	ldr	r2, [pc, #452]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801327c:	6013      	str	r3, [r2, #0]
 801327e:	4b6f      	ldr	r3, [pc, #444]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	4a6e      	ldr	r2, [pc, #440]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013288:	6013      	str	r3, [r2, #0]
 801328a:	e00b      	b.n	80132a4 <HAL_RCC_OscConfig+0xd4>
 801328c:	4b6b      	ldr	r3, [pc, #428]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4a6a      	ldr	r2, [pc, #424]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013296:	6013      	str	r3, [r2, #0]
 8013298:	4b68      	ldr	r3, [pc, #416]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4a67      	ldr	r2, [pc, #412]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 801329e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80132a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d013      	beq.n	80132d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80132ac:	f7fd fbb4 	bl	8010a18 <HAL_GetTick>
 80132b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80132b2:	e008      	b.n	80132c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80132b4:	f7fd fbb0 	bl	8010a18 <HAL_GetTick>
 80132b8:	4602      	mov	r2, r0
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	1ad3      	subs	r3, r2, r3
 80132be:	2b64      	cmp	r3, #100	@ 0x64
 80132c0:	d901      	bls.n	80132c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80132c2:	2303      	movs	r3, #3
 80132c4:	e200      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80132c6:	4b5d      	ldr	r3, [pc, #372]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d0f0      	beq.n	80132b4 <HAL_RCC_OscConfig+0xe4>
 80132d2:	e014      	b.n	80132fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80132d4:	f7fd fba0 	bl	8010a18 <HAL_GetTick>
 80132d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80132da:	e008      	b.n	80132ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80132dc:	f7fd fb9c 	bl	8010a18 <HAL_GetTick>
 80132e0:	4602      	mov	r2, r0
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	1ad3      	subs	r3, r2, r3
 80132e6:	2b64      	cmp	r3, #100	@ 0x64
 80132e8:	d901      	bls.n	80132ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80132ea:	2303      	movs	r3, #3
 80132ec:	e1ec      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80132ee:	4b53      	ldr	r3, [pc, #332]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d1f0      	bne.n	80132dc <HAL_RCC_OscConfig+0x10c>
 80132fa:	e000      	b.n	80132fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80132fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	f003 0302 	and.w	r3, r3, #2
 8013306:	2b00      	cmp	r3, #0
 8013308:	d063      	beq.n	80133d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801330a:	4b4c      	ldr	r3, [pc, #304]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	f003 030c 	and.w	r3, r3, #12
 8013312:	2b00      	cmp	r3, #0
 8013314:	d00b      	beq.n	801332e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8013316:	4b49      	ldr	r3, [pc, #292]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	f003 030c 	and.w	r3, r3, #12
 801331e:	2b08      	cmp	r3, #8
 8013320:	d11c      	bne.n	801335c <HAL_RCC_OscConfig+0x18c>
 8013322:	4b46      	ldr	r3, [pc, #280]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801332a:	2b00      	cmp	r3, #0
 801332c:	d116      	bne.n	801335c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801332e:	4b43      	ldr	r3, [pc, #268]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f003 0302 	and.w	r3, r3, #2
 8013336:	2b00      	cmp	r3, #0
 8013338:	d005      	beq.n	8013346 <HAL_RCC_OscConfig+0x176>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	691b      	ldr	r3, [r3, #16]
 801333e:	2b01      	cmp	r3, #1
 8013340:	d001      	beq.n	8013346 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8013342:	2301      	movs	r3, #1
 8013344:	e1c0      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013346:	4b3d      	ldr	r3, [pc, #244]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	695b      	ldr	r3, [r3, #20]
 8013352:	00db      	lsls	r3, r3, #3
 8013354:	4939      	ldr	r1, [pc, #228]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013356:	4313      	orrs	r3, r2
 8013358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801335a:	e03a      	b.n	80133d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	691b      	ldr	r3, [r3, #16]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d020      	beq.n	80133a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013364:	4b36      	ldr	r3, [pc, #216]	@ (8013440 <HAL_RCC_OscConfig+0x270>)
 8013366:	2201      	movs	r2, #1
 8013368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801336a:	f7fd fb55 	bl	8010a18 <HAL_GetTick>
 801336e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013370:	e008      	b.n	8013384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013372:	f7fd fb51 	bl	8010a18 <HAL_GetTick>
 8013376:	4602      	mov	r2, r0
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	1ad3      	subs	r3, r2, r3
 801337c:	2b02      	cmp	r3, #2
 801337e:	d901      	bls.n	8013384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8013380:	2303      	movs	r3, #3
 8013382:	e1a1      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013384:	4b2d      	ldr	r3, [pc, #180]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	f003 0302 	and.w	r3, r3, #2
 801338c:	2b00      	cmp	r3, #0
 801338e:	d0f0      	beq.n	8013372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013390:	4b2a      	ldr	r3, [pc, #168]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	695b      	ldr	r3, [r3, #20]
 801339c:	00db      	lsls	r3, r3, #3
 801339e:	4927      	ldr	r1, [pc, #156]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 80133a0:	4313      	orrs	r3, r2
 80133a2:	600b      	str	r3, [r1, #0]
 80133a4:	e015      	b.n	80133d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80133a6:	4b26      	ldr	r3, [pc, #152]	@ (8013440 <HAL_RCC_OscConfig+0x270>)
 80133a8:	2200      	movs	r2, #0
 80133aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80133ac:	f7fd fb34 	bl	8010a18 <HAL_GetTick>
 80133b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80133b2:	e008      	b.n	80133c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80133b4:	f7fd fb30 	bl	8010a18 <HAL_GetTick>
 80133b8:	4602      	mov	r2, r0
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	1ad3      	subs	r3, r2, r3
 80133be:	2b02      	cmp	r3, #2
 80133c0:	d901      	bls.n	80133c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80133c2:	2303      	movs	r3, #3
 80133c4:	e180      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80133c6:	4b1d      	ldr	r3, [pc, #116]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	f003 0302 	and.w	r3, r3, #2
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d1f0      	bne.n	80133b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f003 0308 	and.w	r3, r3, #8
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d03a      	beq.n	8013454 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	699b      	ldr	r3, [r3, #24]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d019      	beq.n	801341a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80133e6:	4b17      	ldr	r3, [pc, #92]	@ (8013444 <HAL_RCC_OscConfig+0x274>)
 80133e8:	2201      	movs	r2, #1
 80133ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80133ec:	f7fd fb14 	bl	8010a18 <HAL_GetTick>
 80133f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80133f2:	e008      	b.n	8013406 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80133f4:	f7fd fb10 	bl	8010a18 <HAL_GetTick>
 80133f8:	4602      	mov	r2, r0
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	1ad3      	subs	r3, r2, r3
 80133fe:	2b02      	cmp	r3, #2
 8013400:	d901      	bls.n	8013406 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8013402:	2303      	movs	r3, #3
 8013404:	e160      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013406:	4b0d      	ldr	r3, [pc, #52]	@ (801343c <HAL_RCC_OscConfig+0x26c>)
 8013408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801340a:	f003 0302 	and.w	r3, r3, #2
 801340e:	2b00      	cmp	r3, #0
 8013410:	d0f0      	beq.n	80133f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8013412:	2001      	movs	r0, #1
 8013414:	f000 faba 	bl	801398c <RCC_Delay>
 8013418:	e01c      	b.n	8013454 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801341a:	4b0a      	ldr	r3, [pc, #40]	@ (8013444 <HAL_RCC_OscConfig+0x274>)
 801341c:	2200      	movs	r2, #0
 801341e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013420:	f7fd fafa 	bl	8010a18 <HAL_GetTick>
 8013424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013426:	e00f      	b.n	8013448 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8013428:	f7fd faf6 	bl	8010a18 <HAL_GetTick>
 801342c:	4602      	mov	r2, r0
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	1ad3      	subs	r3, r2, r3
 8013432:	2b02      	cmp	r3, #2
 8013434:	d908      	bls.n	8013448 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8013436:	2303      	movs	r3, #3
 8013438:	e146      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
 801343a:	bf00      	nop
 801343c:	40021000 	.word	0x40021000
 8013440:	42420000 	.word	0x42420000
 8013444:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013448:	4b92      	ldr	r3, [pc, #584]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 801344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801344c:	f003 0302 	and.w	r3, r3, #2
 8013450:	2b00      	cmp	r3, #0
 8013452:	d1e9      	bne.n	8013428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f003 0304 	and.w	r3, r3, #4
 801345c:	2b00      	cmp	r3, #0
 801345e:	f000 80a6 	beq.w	80135ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013462:	2300      	movs	r3, #0
 8013464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013466:	4b8b      	ldr	r3, [pc, #556]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013468:	69db      	ldr	r3, [r3, #28]
 801346a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801346e:	2b00      	cmp	r3, #0
 8013470:	d10d      	bne.n	801348e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013472:	4b88      	ldr	r3, [pc, #544]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013474:	69db      	ldr	r3, [r3, #28]
 8013476:	4a87      	ldr	r2, [pc, #540]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801347c:	61d3      	str	r3, [r2, #28]
 801347e:	4b85      	ldr	r3, [pc, #532]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013480:	69db      	ldr	r3, [r3, #28]
 8013482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013486:	60bb      	str	r3, [r7, #8]
 8013488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801348a:	2301      	movs	r3, #1
 801348c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801348e:	4b82      	ldr	r3, [pc, #520]	@ (8013698 <HAL_RCC_OscConfig+0x4c8>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013496:	2b00      	cmp	r3, #0
 8013498:	d118      	bne.n	80134cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801349a:	4b7f      	ldr	r3, [pc, #508]	@ (8013698 <HAL_RCC_OscConfig+0x4c8>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	4a7e      	ldr	r2, [pc, #504]	@ (8013698 <HAL_RCC_OscConfig+0x4c8>)
 80134a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80134a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80134a6:	f7fd fab7 	bl	8010a18 <HAL_GetTick>
 80134aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80134ac:	e008      	b.n	80134c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80134ae:	f7fd fab3 	bl	8010a18 <HAL_GetTick>
 80134b2:	4602      	mov	r2, r0
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	1ad3      	subs	r3, r2, r3
 80134b8:	2b64      	cmp	r3, #100	@ 0x64
 80134ba:	d901      	bls.n	80134c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80134bc:	2303      	movs	r3, #3
 80134be:	e103      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80134c0:	4b75      	ldr	r3, [pc, #468]	@ (8013698 <HAL_RCC_OscConfig+0x4c8>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d0f0      	beq.n	80134ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	68db      	ldr	r3, [r3, #12]
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	d106      	bne.n	80134e2 <HAL_RCC_OscConfig+0x312>
 80134d4:	4b6f      	ldr	r3, [pc, #444]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80134d6:	6a1b      	ldr	r3, [r3, #32]
 80134d8:	4a6e      	ldr	r2, [pc, #440]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80134da:	f043 0301 	orr.w	r3, r3, #1
 80134de:	6213      	str	r3, [r2, #32]
 80134e0:	e02d      	b.n	801353e <HAL_RCC_OscConfig+0x36e>
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	68db      	ldr	r3, [r3, #12]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d10c      	bne.n	8013504 <HAL_RCC_OscConfig+0x334>
 80134ea:	4b6a      	ldr	r3, [pc, #424]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80134ec:	6a1b      	ldr	r3, [r3, #32]
 80134ee:	4a69      	ldr	r2, [pc, #420]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80134f0:	f023 0301 	bic.w	r3, r3, #1
 80134f4:	6213      	str	r3, [r2, #32]
 80134f6:	4b67      	ldr	r3, [pc, #412]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80134f8:	6a1b      	ldr	r3, [r3, #32]
 80134fa:	4a66      	ldr	r2, [pc, #408]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80134fc:	f023 0304 	bic.w	r3, r3, #4
 8013500:	6213      	str	r3, [r2, #32]
 8013502:	e01c      	b.n	801353e <HAL_RCC_OscConfig+0x36e>
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	2b05      	cmp	r3, #5
 801350a:	d10c      	bne.n	8013526 <HAL_RCC_OscConfig+0x356>
 801350c:	4b61      	ldr	r3, [pc, #388]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 801350e:	6a1b      	ldr	r3, [r3, #32]
 8013510:	4a60      	ldr	r2, [pc, #384]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013512:	f043 0304 	orr.w	r3, r3, #4
 8013516:	6213      	str	r3, [r2, #32]
 8013518:	4b5e      	ldr	r3, [pc, #376]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 801351a:	6a1b      	ldr	r3, [r3, #32]
 801351c:	4a5d      	ldr	r2, [pc, #372]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 801351e:	f043 0301 	orr.w	r3, r3, #1
 8013522:	6213      	str	r3, [r2, #32]
 8013524:	e00b      	b.n	801353e <HAL_RCC_OscConfig+0x36e>
 8013526:	4b5b      	ldr	r3, [pc, #364]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013528:	6a1b      	ldr	r3, [r3, #32]
 801352a:	4a5a      	ldr	r2, [pc, #360]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 801352c:	f023 0301 	bic.w	r3, r3, #1
 8013530:	6213      	str	r3, [r2, #32]
 8013532:	4b58      	ldr	r3, [pc, #352]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013534:	6a1b      	ldr	r3, [r3, #32]
 8013536:	4a57      	ldr	r2, [pc, #348]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013538:	f023 0304 	bic.w	r3, r3, #4
 801353c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d015      	beq.n	8013572 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013546:	f7fd fa67 	bl	8010a18 <HAL_GetTick>
 801354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801354c:	e00a      	b.n	8013564 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801354e:	f7fd fa63 	bl	8010a18 <HAL_GetTick>
 8013552:	4602      	mov	r2, r0
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	1ad3      	subs	r3, r2, r3
 8013558:	f241 3288 	movw	r2, #5000	@ 0x1388
 801355c:	4293      	cmp	r3, r2
 801355e:	d901      	bls.n	8013564 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8013560:	2303      	movs	r3, #3
 8013562:	e0b1      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013564:	4b4b      	ldr	r3, [pc, #300]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013566:	6a1b      	ldr	r3, [r3, #32]
 8013568:	f003 0302 	and.w	r3, r3, #2
 801356c:	2b00      	cmp	r3, #0
 801356e:	d0ee      	beq.n	801354e <HAL_RCC_OscConfig+0x37e>
 8013570:	e014      	b.n	801359c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013572:	f7fd fa51 	bl	8010a18 <HAL_GetTick>
 8013576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013578:	e00a      	b.n	8013590 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801357a:	f7fd fa4d 	bl	8010a18 <HAL_GetTick>
 801357e:	4602      	mov	r2, r0
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	1ad3      	subs	r3, r2, r3
 8013584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013588:	4293      	cmp	r3, r2
 801358a:	d901      	bls.n	8013590 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 801358c:	2303      	movs	r3, #3
 801358e:	e09b      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013590:	4b40      	ldr	r3, [pc, #256]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013592:	6a1b      	ldr	r3, [r3, #32]
 8013594:	f003 0302 	and.w	r3, r3, #2
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1ee      	bne.n	801357a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 801359c:	7dfb      	ldrb	r3, [r7, #23]
 801359e:	2b01      	cmp	r3, #1
 80135a0:	d105      	bne.n	80135ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80135a2:	4b3c      	ldr	r3, [pc, #240]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80135a4:	69db      	ldr	r3, [r3, #28]
 80135a6:	4a3b      	ldr	r2, [pc, #236]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80135a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80135ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	69db      	ldr	r3, [r3, #28]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	f000 8087 	beq.w	80136c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80135b8:	4b36      	ldr	r3, [pc, #216]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	f003 030c 	and.w	r3, r3, #12
 80135c0:	2b08      	cmp	r3, #8
 80135c2:	d061      	beq.n	8013688 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	69db      	ldr	r3, [r3, #28]
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	d146      	bne.n	801365a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80135cc:	4b33      	ldr	r3, [pc, #204]	@ (801369c <HAL_RCC_OscConfig+0x4cc>)
 80135ce:	2200      	movs	r2, #0
 80135d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80135d2:	f7fd fa21 	bl	8010a18 <HAL_GetTick>
 80135d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80135d8:	e008      	b.n	80135ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80135da:	f7fd fa1d 	bl	8010a18 <HAL_GetTick>
 80135de:	4602      	mov	r2, r0
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	1ad3      	subs	r3, r2, r3
 80135e4:	2b02      	cmp	r3, #2
 80135e6:	d901      	bls.n	80135ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80135e8:	2303      	movs	r3, #3
 80135ea:	e06d      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80135ec:	4b29      	ldr	r3, [pc, #164]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d1f0      	bne.n	80135da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6a1b      	ldr	r3, [r3, #32]
 80135fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013600:	d108      	bne.n	8013614 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8013602:	4b24      	ldr	r3, [pc, #144]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	689b      	ldr	r3, [r3, #8]
 801360e:	4921      	ldr	r1, [pc, #132]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013610:	4313      	orrs	r3, r2
 8013612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013614:	4b1f      	ldr	r3, [pc, #124]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6a19      	ldr	r1, [r3, #32]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013624:	430b      	orrs	r3, r1
 8013626:	491b      	ldr	r1, [pc, #108]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 8013628:	4313      	orrs	r3, r2
 801362a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801362c:	4b1b      	ldr	r3, [pc, #108]	@ (801369c <HAL_RCC_OscConfig+0x4cc>)
 801362e:	2201      	movs	r2, #1
 8013630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013632:	f7fd f9f1 	bl	8010a18 <HAL_GetTick>
 8013636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8013638:	e008      	b.n	801364c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801363a:	f7fd f9ed 	bl	8010a18 <HAL_GetTick>
 801363e:	4602      	mov	r2, r0
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	1ad3      	subs	r3, r2, r3
 8013644:	2b02      	cmp	r3, #2
 8013646:	d901      	bls.n	801364c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8013648:	2303      	movs	r3, #3
 801364a:	e03d      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801364c:	4b11      	ldr	r3, [pc, #68]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013654:	2b00      	cmp	r3, #0
 8013656:	d0f0      	beq.n	801363a <HAL_RCC_OscConfig+0x46a>
 8013658:	e035      	b.n	80136c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801365a:	4b10      	ldr	r3, [pc, #64]	@ (801369c <HAL_RCC_OscConfig+0x4cc>)
 801365c:	2200      	movs	r2, #0
 801365e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013660:	f7fd f9da 	bl	8010a18 <HAL_GetTick>
 8013664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8013666:	e008      	b.n	801367a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8013668:	f7fd f9d6 	bl	8010a18 <HAL_GetTick>
 801366c:	4602      	mov	r2, r0
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	1ad3      	subs	r3, r2, r3
 8013672:	2b02      	cmp	r3, #2
 8013674:	d901      	bls.n	801367a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8013676:	2303      	movs	r3, #3
 8013678:	e026      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801367a:	4b06      	ldr	r3, [pc, #24]	@ (8013694 <HAL_RCC_OscConfig+0x4c4>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013682:	2b00      	cmp	r3, #0
 8013684:	d1f0      	bne.n	8013668 <HAL_RCC_OscConfig+0x498>
 8013686:	e01e      	b.n	80136c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	69db      	ldr	r3, [r3, #28]
 801368c:	2b01      	cmp	r3, #1
 801368e:	d107      	bne.n	80136a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8013690:	2301      	movs	r3, #1
 8013692:	e019      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
 8013694:	40021000 	.word	0x40021000
 8013698:	40007000 	.word	0x40007000
 801369c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80136a0:	4b0b      	ldr	r3, [pc, #44]	@ (80136d0 <HAL_RCC_OscConfig+0x500>)
 80136a2:	685b      	ldr	r3, [r3, #4]
 80136a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6a1b      	ldr	r3, [r3, #32]
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d106      	bne.n	80136c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80136be:	429a      	cmp	r2, r3
 80136c0:	d001      	beq.n	80136c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80136c2:	2301      	movs	r3, #1
 80136c4:	e000      	b.n	80136c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80136c6:	2300      	movs	r3, #0
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3718      	adds	r7, #24
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	40021000 	.word	0x40021000

080136d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d101      	bne.n	80136e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80136e4:	2301      	movs	r3, #1
 80136e6:	e0d0      	b.n	801388a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80136e8:	4b6a      	ldr	r3, [pc, #424]	@ (8013894 <HAL_RCC_ClockConfig+0x1c0>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	f003 0307 	and.w	r3, r3, #7
 80136f0:	683a      	ldr	r2, [r7, #0]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d910      	bls.n	8013718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80136f6:	4b67      	ldr	r3, [pc, #412]	@ (8013894 <HAL_RCC_ClockConfig+0x1c0>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	f023 0207 	bic.w	r2, r3, #7
 80136fe:	4965      	ldr	r1, [pc, #404]	@ (8013894 <HAL_RCC_ClockConfig+0x1c0>)
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	4313      	orrs	r3, r2
 8013704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013706:	4b63      	ldr	r3, [pc, #396]	@ (8013894 <HAL_RCC_ClockConfig+0x1c0>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	f003 0307 	and.w	r3, r3, #7
 801370e:	683a      	ldr	r2, [r7, #0]
 8013710:	429a      	cmp	r2, r3
 8013712:	d001      	beq.n	8013718 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8013714:	2301      	movs	r3, #1
 8013716:	e0b8      	b.n	801388a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	f003 0302 	and.w	r3, r3, #2
 8013720:	2b00      	cmp	r3, #0
 8013722:	d020      	beq.n	8013766 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f003 0304 	and.w	r3, r3, #4
 801372c:	2b00      	cmp	r3, #0
 801372e:	d005      	beq.n	801373c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013730:	4b59      	ldr	r3, [pc, #356]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	4a58      	ldr	r2, [pc, #352]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 8013736:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 801373a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f003 0308 	and.w	r3, r3, #8
 8013744:	2b00      	cmp	r3, #0
 8013746:	d005      	beq.n	8013754 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013748:	4b53      	ldr	r3, [pc, #332]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	4a52      	ldr	r2, [pc, #328]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 801374e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8013752:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013754:	4b50      	ldr	r3, [pc, #320]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	689b      	ldr	r3, [r3, #8]
 8013760:	494d      	ldr	r1, [pc, #308]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 8013762:	4313      	orrs	r3, r2
 8013764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	f003 0301 	and.w	r3, r3, #1
 801376e:	2b00      	cmp	r3, #0
 8013770:	d040      	beq.n	80137f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	2b01      	cmp	r3, #1
 8013778:	d107      	bne.n	801378a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801377a:	4b47      	ldr	r3, [pc, #284]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013782:	2b00      	cmp	r3, #0
 8013784:	d115      	bne.n	80137b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013786:	2301      	movs	r3, #1
 8013788:	e07f      	b.n	801388a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	685b      	ldr	r3, [r3, #4]
 801378e:	2b02      	cmp	r3, #2
 8013790:	d107      	bne.n	80137a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013792:	4b41      	ldr	r3, [pc, #260]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801379a:	2b00      	cmp	r3, #0
 801379c:	d109      	bne.n	80137b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801379e:	2301      	movs	r3, #1
 80137a0:	e073      	b.n	801388a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80137a2:	4b3d      	ldr	r3, [pc, #244]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	f003 0302 	and.w	r3, r3, #2
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d101      	bne.n	80137b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80137ae:	2301      	movs	r3, #1
 80137b0:	e06b      	b.n	801388a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80137b2:	4b39      	ldr	r3, [pc, #228]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	f023 0203 	bic.w	r2, r3, #3
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	4936      	ldr	r1, [pc, #216]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 80137c0:	4313      	orrs	r3, r2
 80137c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80137c4:	f7fd f928 	bl	8010a18 <HAL_GetTick>
 80137c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80137ca:	e00a      	b.n	80137e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80137cc:	f7fd f924 	bl	8010a18 <HAL_GetTick>
 80137d0:	4602      	mov	r2, r0
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	1ad3      	subs	r3, r2, r3
 80137d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80137da:	4293      	cmp	r3, r2
 80137dc:	d901      	bls.n	80137e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80137de:	2303      	movs	r3, #3
 80137e0:	e053      	b.n	801388a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80137e2:	4b2d      	ldr	r3, [pc, #180]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 80137e4:	685b      	ldr	r3, [r3, #4]
 80137e6:	f003 020c 	and.w	r2, r3, #12
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	009b      	lsls	r3, r3, #2
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d1eb      	bne.n	80137cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80137f4:	4b27      	ldr	r3, [pc, #156]	@ (8013894 <HAL_RCC_ClockConfig+0x1c0>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	f003 0307 	and.w	r3, r3, #7
 80137fc:	683a      	ldr	r2, [r7, #0]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d210      	bcs.n	8013824 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013802:	4b24      	ldr	r3, [pc, #144]	@ (8013894 <HAL_RCC_ClockConfig+0x1c0>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	f023 0207 	bic.w	r2, r3, #7
 801380a:	4922      	ldr	r1, [pc, #136]	@ (8013894 <HAL_RCC_ClockConfig+0x1c0>)
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	4313      	orrs	r3, r2
 8013810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013812:	4b20      	ldr	r3, [pc, #128]	@ (8013894 <HAL_RCC_ClockConfig+0x1c0>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	f003 0307 	and.w	r3, r3, #7
 801381a:	683a      	ldr	r2, [r7, #0]
 801381c:	429a      	cmp	r2, r3
 801381e:	d001      	beq.n	8013824 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8013820:	2301      	movs	r3, #1
 8013822:	e032      	b.n	801388a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	f003 0304 	and.w	r3, r3, #4
 801382c:	2b00      	cmp	r3, #0
 801382e:	d008      	beq.n	8013842 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013830:	4b19      	ldr	r3, [pc, #100]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	4916      	ldr	r1, [pc, #88]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 801383e:	4313      	orrs	r3, r2
 8013840:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f003 0308 	and.w	r3, r3, #8
 801384a:	2b00      	cmp	r3, #0
 801384c:	d009      	beq.n	8013862 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801384e:	4b12      	ldr	r3, [pc, #72]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	691b      	ldr	r3, [r3, #16]
 801385a:	00db      	lsls	r3, r3, #3
 801385c:	490e      	ldr	r1, [pc, #56]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 801385e:	4313      	orrs	r3, r2
 8013860:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8013862:	f000 f821 	bl	80138a8 <HAL_RCC_GetSysClockFreq>
 8013866:	4602      	mov	r2, r0
 8013868:	4b0b      	ldr	r3, [pc, #44]	@ (8013898 <HAL_RCC_ClockConfig+0x1c4>)
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	091b      	lsrs	r3, r3, #4
 801386e:	f003 030f 	and.w	r3, r3, #15
 8013872:	490a      	ldr	r1, [pc, #40]	@ (801389c <HAL_RCC_ClockConfig+0x1c8>)
 8013874:	5ccb      	ldrb	r3, [r1, r3]
 8013876:	fa22 f303 	lsr.w	r3, r2, r3
 801387a:	4a09      	ldr	r2, [pc, #36]	@ (80138a0 <HAL_RCC_ClockConfig+0x1cc>)
 801387c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801387e:	4b09      	ldr	r3, [pc, #36]	@ (80138a4 <HAL_RCC_ClockConfig+0x1d0>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	4618      	mov	r0, r3
 8013884:	f7fd f886 	bl	8010994 <HAL_InitTick>

  return HAL_OK;
 8013888:	2300      	movs	r3, #0
}
 801388a:	4618      	mov	r0, r3
 801388c:	3710      	adds	r7, #16
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	40022000 	.word	0x40022000
 8013898:	40021000 	.word	0x40021000
 801389c:	080148b4 	.word	0x080148b4
 80138a0:	20000000 	.word	0x20000000
 80138a4:	20000004 	.word	0x20000004

080138a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80138a8:	b480      	push	{r7}
 80138aa:	b087      	sub	sp, #28
 80138ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80138ae:	2300      	movs	r3, #0
 80138b0:	60fb      	str	r3, [r7, #12]
 80138b2:	2300      	movs	r3, #0
 80138b4:	60bb      	str	r3, [r7, #8]
 80138b6:	2300      	movs	r3, #0
 80138b8:	617b      	str	r3, [r7, #20]
 80138ba:	2300      	movs	r3, #0
 80138bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80138be:	2300      	movs	r3, #0
 80138c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80138c2:	4b1e      	ldr	r3, [pc, #120]	@ (801393c <HAL_RCC_GetSysClockFreq+0x94>)
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f003 030c 	and.w	r3, r3, #12
 80138ce:	2b04      	cmp	r3, #4
 80138d0:	d002      	beq.n	80138d8 <HAL_RCC_GetSysClockFreq+0x30>
 80138d2:	2b08      	cmp	r3, #8
 80138d4:	d003      	beq.n	80138de <HAL_RCC_GetSysClockFreq+0x36>
 80138d6:	e027      	b.n	8013928 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80138d8:	4b19      	ldr	r3, [pc, #100]	@ (8013940 <HAL_RCC_GetSysClockFreq+0x98>)
 80138da:	613b      	str	r3, [r7, #16]
      break;
 80138dc:	e027      	b.n	801392e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	0c9b      	lsrs	r3, r3, #18
 80138e2:	f003 030f 	and.w	r3, r3, #15
 80138e6:	4a17      	ldr	r2, [pc, #92]	@ (8013944 <HAL_RCC_GetSysClockFreq+0x9c>)
 80138e8:	5cd3      	ldrb	r3, [r2, r3]
 80138ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d010      	beq.n	8013918 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80138f6:	4b11      	ldr	r3, [pc, #68]	@ (801393c <HAL_RCC_GetSysClockFreq+0x94>)
 80138f8:	685b      	ldr	r3, [r3, #4]
 80138fa:	0c5b      	lsrs	r3, r3, #17
 80138fc:	f003 0301 	and.w	r3, r3, #1
 8013900:	4a11      	ldr	r2, [pc, #68]	@ (8013948 <HAL_RCC_GetSysClockFreq+0xa0>)
 8013902:	5cd3      	ldrb	r3, [r2, r3]
 8013904:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	4a0d      	ldr	r2, [pc, #52]	@ (8013940 <HAL_RCC_GetSysClockFreq+0x98>)
 801390a:	fb03 f202 	mul.w	r2, r3, r2
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	fbb2 f3f3 	udiv	r3, r2, r3
 8013914:	617b      	str	r3, [r7, #20]
 8013916:	e004      	b.n	8013922 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	4a0c      	ldr	r2, [pc, #48]	@ (801394c <HAL_RCC_GetSysClockFreq+0xa4>)
 801391c:	fb02 f303 	mul.w	r3, r2, r3
 8013920:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	613b      	str	r3, [r7, #16]
      break;
 8013926:	e002      	b.n	801392e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8013928:	4b05      	ldr	r3, [pc, #20]	@ (8013940 <HAL_RCC_GetSysClockFreq+0x98>)
 801392a:	613b      	str	r3, [r7, #16]
      break;
 801392c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801392e:	693b      	ldr	r3, [r7, #16]
}
 8013930:	4618      	mov	r0, r3
 8013932:	371c      	adds	r7, #28
 8013934:	46bd      	mov	sp, r7
 8013936:	bc80      	pop	{r7}
 8013938:	4770      	bx	lr
 801393a:	bf00      	nop
 801393c:	40021000 	.word	0x40021000
 8013940:	007a1200 	.word	0x007a1200
 8013944:	080148cc 	.word	0x080148cc
 8013948:	080148dc 	.word	0x080148dc
 801394c:	003d0900 	.word	0x003d0900

08013950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013950:	b480      	push	{r7}
 8013952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013954:	4b02      	ldr	r3, [pc, #8]	@ (8013960 <HAL_RCC_GetHCLKFreq+0x10>)
 8013956:	681b      	ldr	r3, [r3, #0]
}
 8013958:	4618      	mov	r0, r3
 801395a:	46bd      	mov	sp, r7
 801395c:	bc80      	pop	{r7}
 801395e:	4770      	bx	lr
 8013960:	20000000 	.word	0x20000000

08013964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013968:	f7ff fff2 	bl	8013950 <HAL_RCC_GetHCLKFreq>
 801396c:	4602      	mov	r2, r0
 801396e:	4b05      	ldr	r3, [pc, #20]	@ (8013984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	0a1b      	lsrs	r3, r3, #8
 8013974:	f003 0307 	and.w	r3, r3, #7
 8013978:	4903      	ldr	r1, [pc, #12]	@ (8013988 <HAL_RCC_GetPCLK1Freq+0x24>)
 801397a:	5ccb      	ldrb	r3, [r1, r3]
 801397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013980:	4618      	mov	r0, r3
 8013982:	bd80      	pop	{r7, pc}
 8013984:	40021000 	.word	0x40021000
 8013988:	080148c4 	.word	0x080148c4

0801398c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 801398c:	b480      	push	{r7}
 801398e:	b085      	sub	sp, #20
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8013994:	4b0a      	ldr	r3, [pc, #40]	@ (80139c0 <RCC_Delay+0x34>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	4a0a      	ldr	r2, [pc, #40]	@ (80139c4 <RCC_Delay+0x38>)
 801399a:	fba2 2303 	umull	r2, r3, r2, r3
 801399e:	0a5b      	lsrs	r3, r3, #9
 80139a0:	687a      	ldr	r2, [r7, #4]
 80139a2:	fb02 f303 	mul.w	r3, r2, r3
 80139a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80139a8:	bf00      	nop
  }
  while (Delay --);
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	1e5a      	subs	r2, r3, #1
 80139ae:	60fa      	str	r2, [r7, #12]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d1f9      	bne.n	80139a8 <RCC_Delay+0x1c>
}
 80139b4:	bf00      	nop
 80139b6:	bf00      	nop
 80139b8:	3714      	adds	r7, #20
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bc80      	pop	{r7}
 80139be:	4770      	bx	lr
 80139c0:	20000000 	.word	0x20000000
 80139c4:	10624dd3 	.word	0x10624dd3

080139c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d101      	bne.n	80139da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80139d6:	2301      	movs	r3, #1
 80139d8:	e041      	b.n	8013a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80139e0:	b2db      	uxtb	r3, r3
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d106      	bne.n	80139f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2200      	movs	r2, #0
 80139ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f7fc fef4 	bl	80107dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2202      	movs	r2, #2
 80139f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681a      	ldr	r2, [r3, #0]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	3304      	adds	r3, #4
 8013a04:	4619      	mov	r1, r3
 8013a06:	4610      	mov	r0, r2
 8013a08:	f000 f940 	bl	8013c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2201      	movs	r2, #1
 8013a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2201      	movs	r2, #1
 8013a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2201      	movs	r2, #1
 8013a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2201      	movs	r2, #1
 8013a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2201      	movs	r2, #1
 8013a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2201      	movs	r2, #1
 8013a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	2201      	movs	r2, #1
 8013a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2201      	movs	r2, #1
 8013a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2201      	movs	r2, #1
 8013a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2201      	movs	r2, #1
 8013a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8013a5c:	2300      	movs	r3, #0
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3708      	adds	r7, #8
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
	...

08013a68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b085      	sub	sp, #20
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013a76:	b2db      	uxtb	r3, r3
 8013a78:	2b01      	cmp	r3, #1
 8013a7a:	d001      	beq.n	8013a80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	e032      	b.n	8013ae6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2202      	movs	r2, #2
 8013a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	4a18      	ldr	r2, [pc, #96]	@ (8013af0 <HAL_TIM_Base_Start+0x88>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d00e      	beq.n	8013ab0 <HAL_TIM_Base_Start+0x48>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a9a:	d009      	beq.n	8013ab0 <HAL_TIM_Base_Start+0x48>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	4a14      	ldr	r2, [pc, #80]	@ (8013af4 <HAL_TIM_Base_Start+0x8c>)
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d004      	beq.n	8013ab0 <HAL_TIM_Base_Start+0x48>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	4a13      	ldr	r2, [pc, #76]	@ (8013af8 <HAL_TIM_Base_Start+0x90>)
 8013aac:	4293      	cmp	r3, r2
 8013aae:	d111      	bne.n	8013ad4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	689b      	ldr	r3, [r3, #8]
 8013ab6:	f003 0307 	and.w	r3, r3, #7
 8013aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2b06      	cmp	r3, #6
 8013ac0:	d010      	beq.n	8013ae4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	f042 0201 	orr.w	r2, r2, #1
 8013ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013ad2:	e007      	b.n	8013ae4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	681a      	ldr	r2, [r3, #0]
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	f042 0201 	orr.w	r2, r2, #1
 8013ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013ae4:	2300      	movs	r3, #0
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3714      	adds	r7, #20
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bc80      	pop	{r7}
 8013aee:	4770      	bx	lr
 8013af0:	40012c00 	.word	0x40012c00
 8013af4:	40000400 	.word	0x40000400
 8013af8:	40000800 	.word	0x40000800

08013afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013b06:	2300      	movs	r3, #0
 8013b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013b10:	2b01      	cmp	r3, #1
 8013b12:	d101      	bne.n	8013b18 <HAL_TIM_ConfigClockSource+0x1c>
 8013b14:	2302      	movs	r3, #2
 8013b16:	e0b4      	b.n	8013c82 <HAL_TIM_ConfigClockSource+0x186>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2202      	movs	r2, #2
 8013b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	689b      	ldr	r3, [r3, #8]
 8013b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8013b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	68ba      	ldr	r2, [r7, #8]
 8013b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013b50:	d03e      	beq.n	8013bd0 <HAL_TIM_ConfigClockSource+0xd4>
 8013b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013b56:	f200 8087 	bhi.w	8013c68 <HAL_TIM_ConfigClockSource+0x16c>
 8013b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013b5e:	f000 8086 	beq.w	8013c6e <HAL_TIM_ConfigClockSource+0x172>
 8013b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013b66:	d87f      	bhi.n	8013c68 <HAL_TIM_ConfigClockSource+0x16c>
 8013b68:	2b70      	cmp	r3, #112	@ 0x70
 8013b6a:	d01a      	beq.n	8013ba2 <HAL_TIM_ConfigClockSource+0xa6>
 8013b6c:	2b70      	cmp	r3, #112	@ 0x70
 8013b6e:	d87b      	bhi.n	8013c68 <HAL_TIM_ConfigClockSource+0x16c>
 8013b70:	2b60      	cmp	r3, #96	@ 0x60
 8013b72:	d050      	beq.n	8013c16 <HAL_TIM_ConfigClockSource+0x11a>
 8013b74:	2b60      	cmp	r3, #96	@ 0x60
 8013b76:	d877      	bhi.n	8013c68 <HAL_TIM_ConfigClockSource+0x16c>
 8013b78:	2b50      	cmp	r3, #80	@ 0x50
 8013b7a:	d03c      	beq.n	8013bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8013b7c:	2b50      	cmp	r3, #80	@ 0x50
 8013b7e:	d873      	bhi.n	8013c68 <HAL_TIM_ConfigClockSource+0x16c>
 8013b80:	2b40      	cmp	r3, #64	@ 0x40
 8013b82:	d058      	beq.n	8013c36 <HAL_TIM_ConfigClockSource+0x13a>
 8013b84:	2b40      	cmp	r3, #64	@ 0x40
 8013b86:	d86f      	bhi.n	8013c68 <HAL_TIM_ConfigClockSource+0x16c>
 8013b88:	2b30      	cmp	r3, #48	@ 0x30
 8013b8a:	d064      	beq.n	8013c56 <HAL_TIM_ConfigClockSource+0x15a>
 8013b8c:	2b30      	cmp	r3, #48	@ 0x30
 8013b8e:	d86b      	bhi.n	8013c68 <HAL_TIM_ConfigClockSource+0x16c>
 8013b90:	2b20      	cmp	r3, #32
 8013b92:	d060      	beq.n	8013c56 <HAL_TIM_ConfigClockSource+0x15a>
 8013b94:	2b20      	cmp	r3, #32
 8013b96:	d867      	bhi.n	8013c68 <HAL_TIM_ConfigClockSource+0x16c>
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d05c      	beq.n	8013c56 <HAL_TIM_ConfigClockSource+0x15a>
 8013b9c:	2b10      	cmp	r3, #16
 8013b9e:	d05a      	beq.n	8013c56 <HAL_TIM_ConfigClockSource+0x15a>
 8013ba0:	e062      	b.n	8013c68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013bb2:	f000 f944 	bl	8013e3e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	689b      	ldr	r3, [r3, #8]
 8013bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	68ba      	ldr	r2, [r7, #8]
 8013bcc:	609a      	str	r2, [r3, #8]
      break;
 8013bce:	e04f      	b.n	8013c70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013be0:	f000 f92d 	bl	8013e3e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	689a      	ldr	r2, [r3, #8]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8013bf2:	609a      	str	r2, [r3, #8]
      break;
 8013bf4:	e03c      	b.n	8013c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c02:	461a      	mov	r2, r3
 8013c04:	f000 f8a4 	bl	8013d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	2150      	movs	r1, #80	@ 0x50
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f000 f8fb 	bl	8013e0a <TIM_ITRx_SetConfig>
      break;
 8013c14:	e02c      	b.n	8013c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013c22:	461a      	mov	r2, r3
 8013c24:	f000 f8c2 	bl	8013dac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2160      	movs	r1, #96	@ 0x60
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f000 f8eb 	bl	8013e0a <TIM_ITRx_SetConfig>
      break;
 8013c34:	e01c      	b.n	8013c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c42:	461a      	mov	r2, r3
 8013c44:	f000 f884 	bl	8013d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2140      	movs	r1, #64	@ 0x40
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f000 f8db 	bl	8013e0a <TIM_ITRx_SetConfig>
      break;
 8013c54:	e00c      	b.n	8013c70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681a      	ldr	r2, [r3, #0]
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	4619      	mov	r1, r3
 8013c60:	4610      	mov	r0, r2
 8013c62:	f000 f8d2 	bl	8013e0a <TIM_ITRx_SetConfig>
      break;
 8013c66:	e003      	b.n	8013c70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8013c6c:	e000      	b.n	8013c70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8013c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2201      	movs	r2, #1
 8013c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3710      	adds	r7, #16
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
	...

08013c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b085      	sub	sp, #20
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	4a29      	ldr	r2, [pc, #164]	@ (8013d44 <TIM_Base_SetConfig+0xb8>)
 8013ca0:	4293      	cmp	r3, r2
 8013ca2:	d00b      	beq.n	8013cbc <TIM_Base_SetConfig+0x30>
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013caa:	d007      	beq.n	8013cbc <TIM_Base_SetConfig+0x30>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4a26      	ldr	r2, [pc, #152]	@ (8013d48 <TIM_Base_SetConfig+0xbc>)
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	d003      	beq.n	8013cbc <TIM_Base_SetConfig+0x30>
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	4a25      	ldr	r2, [pc, #148]	@ (8013d4c <TIM_Base_SetConfig+0xc0>)
 8013cb8:	4293      	cmp	r3, r2
 8013cba:	d108      	bne.n	8013cce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	685b      	ldr	r3, [r3, #4]
 8013cc8:	68fa      	ldr	r2, [r7, #12]
 8013cca:	4313      	orrs	r3, r2
 8013ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8013d44 <TIM_Base_SetConfig+0xb8>)
 8013cd2:	4293      	cmp	r3, r2
 8013cd4:	d00b      	beq.n	8013cee <TIM_Base_SetConfig+0x62>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013cdc:	d007      	beq.n	8013cee <TIM_Base_SetConfig+0x62>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4a19      	ldr	r2, [pc, #100]	@ (8013d48 <TIM_Base_SetConfig+0xbc>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d003      	beq.n	8013cee <TIM_Base_SetConfig+0x62>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	4a18      	ldr	r2, [pc, #96]	@ (8013d4c <TIM_Base_SetConfig+0xc0>)
 8013cea:	4293      	cmp	r3, r2
 8013cec:	d108      	bne.n	8013d00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	68db      	ldr	r3, [r3, #12]
 8013cfa:	68fa      	ldr	r2, [r7, #12]
 8013cfc:	4313      	orrs	r3, r2
 8013cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	695b      	ldr	r3, [r3, #20]
 8013d0a:	4313      	orrs	r3, r2
 8013d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	68fa      	ldr	r2, [r7, #12]
 8013d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	689a      	ldr	r2, [r3, #8]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	4a07      	ldr	r2, [pc, #28]	@ (8013d44 <TIM_Base_SetConfig+0xb8>)
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d103      	bne.n	8013d34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	691a      	ldr	r2, [r3, #16]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2201      	movs	r2, #1
 8013d38:	615a      	str	r2, [r3, #20]
}
 8013d3a:	bf00      	nop
 8013d3c:	3714      	adds	r7, #20
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bc80      	pop	{r7}
 8013d42:	4770      	bx	lr
 8013d44:	40012c00 	.word	0x40012c00
 8013d48:	40000400 	.word	0x40000400
 8013d4c:	40000800 	.word	0x40000800

08013d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013d50:	b480      	push	{r7}
 8013d52:	b087      	sub	sp, #28
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	6a1b      	ldr	r3, [r3, #32]
 8013d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	6a1b      	ldr	r3, [r3, #32]
 8013d66:	f023 0201 	bic.w	r2, r3, #1
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	699b      	ldr	r3, [r3, #24]
 8013d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	011b      	lsls	r3, r3, #4
 8013d80:	693a      	ldr	r2, [r7, #16]
 8013d82:	4313      	orrs	r3, r2
 8013d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	f023 030a 	bic.w	r3, r3, #10
 8013d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013d8e:	697a      	ldr	r2, [r7, #20]
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	4313      	orrs	r3, r2
 8013d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	693a      	ldr	r2, [r7, #16]
 8013d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	697a      	ldr	r2, [r7, #20]
 8013da0:	621a      	str	r2, [r3, #32]
}
 8013da2:	bf00      	nop
 8013da4:	371c      	adds	r7, #28
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bc80      	pop	{r7}
 8013daa:	4770      	bx	lr

08013dac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b087      	sub	sp, #28
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	60b9      	str	r1, [r7, #8]
 8013db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	6a1b      	ldr	r3, [r3, #32]
 8013dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	6a1b      	ldr	r3, [r3, #32]
 8013dc2:	f023 0210 	bic.w	r2, r3, #16
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	699b      	ldr	r3, [r3, #24]
 8013dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	031b      	lsls	r3, r3, #12
 8013ddc:	693a      	ldr	r2, [r7, #16]
 8013dde:	4313      	orrs	r3, r2
 8013de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013de8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	011b      	lsls	r3, r3, #4
 8013dee:	697a      	ldr	r2, [r7, #20]
 8013df0:	4313      	orrs	r3, r2
 8013df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	693a      	ldr	r2, [r7, #16]
 8013df8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	697a      	ldr	r2, [r7, #20]
 8013dfe:	621a      	str	r2, [r3, #32]
}
 8013e00:	bf00      	nop
 8013e02:	371c      	adds	r7, #28
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bc80      	pop	{r7}
 8013e08:	4770      	bx	lr

08013e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013e0a:	b480      	push	{r7}
 8013e0c:	b085      	sub	sp, #20
 8013e0e:	af00      	add	r7, sp, #0
 8013e10:	6078      	str	r0, [r7, #4]
 8013e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013e22:	683a      	ldr	r2, [r7, #0]
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	4313      	orrs	r3, r2
 8013e28:	f043 0307 	orr.w	r3, r3, #7
 8013e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	68fa      	ldr	r2, [r7, #12]
 8013e32:	609a      	str	r2, [r3, #8]
}
 8013e34:	bf00      	nop
 8013e36:	3714      	adds	r7, #20
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bc80      	pop	{r7}
 8013e3c:	4770      	bx	lr

08013e3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013e3e:	b480      	push	{r7}
 8013e40:	b087      	sub	sp, #28
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	60f8      	str	r0, [r7, #12]
 8013e46:	60b9      	str	r1, [r7, #8]
 8013e48:	607a      	str	r2, [r7, #4]
 8013e4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	689b      	ldr	r3, [r3, #8]
 8013e50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013e58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	021a      	lsls	r2, r3, #8
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	431a      	orrs	r2, r3
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	4313      	orrs	r3, r2
 8013e66:	697a      	ldr	r2, [r7, #20]
 8013e68:	4313      	orrs	r3, r2
 8013e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	697a      	ldr	r2, [r7, #20]
 8013e70:	609a      	str	r2, [r3, #8]
}
 8013e72:	bf00      	nop
 8013e74:	371c      	adds	r7, #28
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bc80      	pop	{r7}
 8013e7a:	4770      	bx	lr

08013e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	b085      	sub	sp, #20
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d101      	bne.n	8013e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013e90:	2302      	movs	r3, #2
 8013e92:	e046      	b.n	8013f22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2201      	movs	r2, #1
 8013e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2202      	movs	r2, #2
 8013ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	689b      	ldr	r3, [r3, #8]
 8013eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	68fa      	ldr	r2, [r7, #12]
 8013ec2:	4313      	orrs	r3, r2
 8013ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	68fa      	ldr	r2, [r7, #12]
 8013ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	4a16      	ldr	r2, [pc, #88]	@ (8013f2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8013ed4:	4293      	cmp	r3, r2
 8013ed6:	d00e      	beq.n	8013ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ee0:	d009      	beq.n	8013ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	4a12      	ldr	r2, [pc, #72]	@ (8013f30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8013ee8:	4293      	cmp	r3, r2
 8013eea:	d004      	beq.n	8013ef6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4a10      	ldr	r2, [pc, #64]	@ (8013f34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d10c      	bne.n	8013f10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	685b      	ldr	r3, [r3, #4]
 8013f02:	68ba      	ldr	r2, [r7, #8]
 8013f04:	4313      	orrs	r3, r2
 8013f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	68ba      	ldr	r2, [r7, #8]
 8013f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2201      	movs	r2, #1
 8013f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013f20:	2300      	movs	r3, #0
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	3714      	adds	r7, #20
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bc80      	pop	{r7}
 8013f2a:	4770      	bx	lr
 8013f2c:	40012c00 	.word	0x40012c00
 8013f30:	40000400 	.word	0x40000400
 8013f34:	40000800 	.word	0x40000800

08013f38 <siprintf>:
 8013f38:	b40e      	push	{r1, r2, r3}
 8013f3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013f3e:	b500      	push	{lr}
 8013f40:	b09c      	sub	sp, #112	@ 0x70
 8013f42:	ab1d      	add	r3, sp, #116	@ 0x74
 8013f44:	9002      	str	r0, [sp, #8]
 8013f46:	9006      	str	r0, [sp, #24]
 8013f48:	9107      	str	r1, [sp, #28]
 8013f4a:	9104      	str	r1, [sp, #16]
 8013f4c:	4808      	ldr	r0, [pc, #32]	@ (8013f70 <siprintf+0x38>)
 8013f4e:	4909      	ldr	r1, [pc, #36]	@ (8013f74 <siprintf+0x3c>)
 8013f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f54:	9105      	str	r1, [sp, #20]
 8013f56:	6800      	ldr	r0, [r0, #0]
 8013f58:	a902      	add	r1, sp, #8
 8013f5a:	9301      	str	r3, [sp, #4]
 8013f5c:	f000 f992 	bl	8014284 <_svfiprintf_r>
 8013f60:	2200      	movs	r2, #0
 8013f62:	9b02      	ldr	r3, [sp, #8]
 8013f64:	701a      	strb	r2, [r3, #0]
 8013f66:	b01c      	add	sp, #112	@ 0x70
 8013f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f6c:	b003      	add	sp, #12
 8013f6e:	4770      	bx	lr
 8013f70:	2000000c 	.word	0x2000000c
 8013f74:	ffff0208 	.word	0xffff0208

08013f78 <memset>:
 8013f78:	4603      	mov	r3, r0
 8013f7a:	4402      	add	r2, r0
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	d100      	bne.n	8013f82 <memset+0xa>
 8013f80:	4770      	bx	lr
 8013f82:	f803 1b01 	strb.w	r1, [r3], #1
 8013f86:	e7f9      	b.n	8013f7c <memset+0x4>

08013f88 <__errno>:
 8013f88:	4b01      	ldr	r3, [pc, #4]	@ (8013f90 <__errno+0x8>)
 8013f8a:	6818      	ldr	r0, [r3, #0]
 8013f8c:	4770      	bx	lr
 8013f8e:	bf00      	nop
 8013f90:	2000000c 	.word	0x2000000c

08013f94 <__libc_init_array>:
 8013f94:	b570      	push	{r4, r5, r6, lr}
 8013f96:	2600      	movs	r6, #0
 8013f98:	4d0c      	ldr	r5, [pc, #48]	@ (8013fcc <__libc_init_array+0x38>)
 8013f9a:	4c0d      	ldr	r4, [pc, #52]	@ (8013fd0 <__libc_init_array+0x3c>)
 8013f9c:	1b64      	subs	r4, r4, r5
 8013f9e:	10a4      	asrs	r4, r4, #2
 8013fa0:	42a6      	cmp	r6, r4
 8013fa2:	d109      	bne.n	8013fb8 <__libc_init_array+0x24>
 8013fa4:	f000 fc78 	bl	8014898 <_init>
 8013fa8:	2600      	movs	r6, #0
 8013faa:	4d0a      	ldr	r5, [pc, #40]	@ (8013fd4 <__libc_init_array+0x40>)
 8013fac:	4c0a      	ldr	r4, [pc, #40]	@ (8013fd8 <__libc_init_array+0x44>)
 8013fae:	1b64      	subs	r4, r4, r5
 8013fb0:	10a4      	asrs	r4, r4, #2
 8013fb2:	42a6      	cmp	r6, r4
 8013fb4:	d105      	bne.n	8013fc2 <__libc_init_array+0x2e>
 8013fb6:	bd70      	pop	{r4, r5, r6, pc}
 8013fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fbc:	4798      	blx	r3
 8013fbe:	3601      	adds	r6, #1
 8013fc0:	e7ee      	b.n	8013fa0 <__libc_init_array+0xc>
 8013fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fc6:	4798      	blx	r3
 8013fc8:	3601      	adds	r6, #1
 8013fca:	e7f2      	b.n	8013fb2 <__libc_init_array+0x1e>
 8013fcc:	08014914 	.word	0x08014914
 8013fd0:	08014914 	.word	0x08014914
 8013fd4:	08014914 	.word	0x08014914
 8013fd8:	08014918 	.word	0x08014918

08013fdc <__retarget_lock_acquire_recursive>:
 8013fdc:	4770      	bx	lr

08013fde <__retarget_lock_release_recursive>:
 8013fde:	4770      	bx	lr

08013fe0 <_free_r>:
 8013fe0:	b538      	push	{r3, r4, r5, lr}
 8013fe2:	4605      	mov	r5, r0
 8013fe4:	2900      	cmp	r1, #0
 8013fe6:	d040      	beq.n	801406a <_free_r+0x8a>
 8013fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fec:	1f0c      	subs	r4, r1, #4
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	bfb8      	it	lt
 8013ff2:	18e4      	addlt	r4, r4, r3
 8013ff4:	f000 f8de 	bl	80141b4 <__malloc_lock>
 8013ff8:	4a1c      	ldr	r2, [pc, #112]	@ (801406c <_free_r+0x8c>)
 8013ffa:	6813      	ldr	r3, [r2, #0]
 8013ffc:	b933      	cbnz	r3, 801400c <_free_r+0x2c>
 8013ffe:	6063      	str	r3, [r4, #4]
 8014000:	6014      	str	r4, [r2, #0]
 8014002:	4628      	mov	r0, r5
 8014004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014008:	f000 b8da 	b.w	80141c0 <__malloc_unlock>
 801400c:	42a3      	cmp	r3, r4
 801400e:	d908      	bls.n	8014022 <_free_r+0x42>
 8014010:	6820      	ldr	r0, [r4, #0]
 8014012:	1821      	adds	r1, r4, r0
 8014014:	428b      	cmp	r3, r1
 8014016:	bf01      	itttt	eq
 8014018:	6819      	ldreq	r1, [r3, #0]
 801401a:	685b      	ldreq	r3, [r3, #4]
 801401c:	1809      	addeq	r1, r1, r0
 801401e:	6021      	streq	r1, [r4, #0]
 8014020:	e7ed      	b.n	8013ffe <_free_r+0x1e>
 8014022:	461a      	mov	r2, r3
 8014024:	685b      	ldr	r3, [r3, #4]
 8014026:	b10b      	cbz	r3, 801402c <_free_r+0x4c>
 8014028:	42a3      	cmp	r3, r4
 801402a:	d9fa      	bls.n	8014022 <_free_r+0x42>
 801402c:	6811      	ldr	r1, [r2, #0]
 801402e:	1850      	adds	r0, r2, r1
 8014030:	42a0      	cmp	r0, r4
 8014032:	d10b      	bne.n	801404c <_free_r+0x6c>
 8014034:	6820      	ldr	r0, [r4, #0]
 8014036:	4401      	add	r1, r0
 8014038:	1850      	adds	r0, r2, r1
 801403a:	4283      	cmp	r3, r0
 801403c:	6011      	str	r1, [r2, #0]
 801403e:	d1e0      	bne.n	8014002 <_free_r+0x22>
 8014040:	6818      	ldr	r0, [r3, #0]
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	4408      	add	r0, r1
 8014046:	6010      	str	r0, [r2, #0]
 8014048:	6053      	str	r3, [r2, #4]
 801404a:	e7da      	b.n	8014002 <_free_r+0x22>
 801404c:	d902      	bls.n	8014054 <_free_r+0x74>
 801404e:	230c      	movs	r3, #12
 8014050:	602b      	str	r3, [r5, #0]
 8014052:	e7d6      	b.n	8014002 <_free_r+0x22>
 8014054:	6820      	ldr	r0, [r4, #0]
 8014056:	1821      	adds	r1, r4, r0
 8014058:	428b      	cmp	r3, r1
 801405a:	bf01      	itttt	eq
 801405c:	6819      	ldreq	r1, [r3, #0]
 801405e:	685b      	ldreq	r3, [r3, #4]
 8014060:	1809      	addeq	r1, r1, r0
 8014062:	6021      	streq	r1, [r4, #0]
 8014064:	6063      	str	r3, [r4, #4]
 8014066:	6054      	str	r4, [r2, #4]
 8014068:	e7cb      	b.n	8014002 <_free_r+0x22>
 801406a:	bd38      	pop	{r3, r4, r5, pc}
 801406c:	2000029c 	.word	0x2000029c

08014070 <sbrk_aligned>:
 8014070:	b570      	push	{r4, r5, r6, lr}
 8014072:	4e0f      	ldr	r6, [pc, #60]	@ (80140b0 <sbrk_aligned+0x40>)
 8014074:	460c      	mov	r4, r1
 8014076:	6831      	ldr	r1, [r6, #0]
 8014078:	4605      	mov	r5, r0
 801407a:	b911      	cbnz	r1, 8014082 <sbrk_aligned+0x12>
 801407c:	f000 fbaa 	bl	80147d4 <_sbrk_r>
 8014080:	6030      	str	r0, [r6, #0]
 8014082:	4621      	mov	r1, r4
 8014084:	4628      	mov	r0, r5
 8014086:	f000 fba5 	bl	80147d4 <_sbrk_r>
 801408a:	1c43      	adds	r3, r0, #1
 801408c:	d103      	bne.n	8014096 <sbrk_aligned+0x26>
 801408e:	f04f 34ff 	mov.w	r4, #4294967295
 8014092:	4620      	mov	r0, r4
 8014094:	bd70      	pop	{r4, r5, r6, pc}
 8014096:	1cc4      	adds	r4, r0, #3
 8014098:	f024 0403 	bic.w	r4, r4, #3
 801409c:	42a0      	cmp	r0, r4
 801409e:	d0f8      	beq.n	8014092 <sbrk_aligned+0x22>
 80140a0:	1a21      	subs	r1, r4, r0
 80140a2:	4628      	mov	r0, r5
 80140a4:	f000 fb96 	bl	80147d4 <_sbrk_r>
 80140a8:	3001      	adds	r0, #1
 80140aa:	d1f2      	bne.n	8014092 <sbrk_aligned+0x22>
 80140ac:	e7ef      	b.n	801408e <sbrk_aligned+0x1e>
 80140ae:	bf00      	nop
 80140b0:	20000298 	.word	0x20000298

080140b4 <_malloc_r>:
 80140b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140b8:	1ccd      	adds	r5, r1, #3
 80140ba:	f025 0503 	bic.w	r5, r5, #3
 80140be:	3508      	adds	r5, #8
 80140c0:	2d0c      	cmp	r5, #12
 80140c2:	bf38      	it	cc
 80140c4:	250c      	movcc	r5, #12
 80140c6:	2d00      	cmp	r5, #0
 80140c8:	4606      	mov	r6, r0
 80140ca:	db01      	blt.n	80140d0 <_malloc_r+0x1c>
 80140cc:	42a9      	cmp	r1, r5
 80140ce:	d904      	bls.n	80140da <_malloc_r+0x26>
 80140d0:	230c      	movs	r3, #12
 80140d2:	6033      	str	r3, [r6, #0]
 80140d4:	2000      	movs	r0, #0
 80140d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80141b0 <_malloc_r+0xfc>
 80140de:	f000 f869 	bl	80141b4 <__malloc_lock>
 80140e2:	f8d8 3000 	ldr.w	r3, [r8]
 80140e6:	461c      	mov	r4, r3
 80140e8:	bb44      	cbnz	r4, 801413c <_malloc_r+0x88>
 80140ea:	4629      	mov	r1, r5
 80140ec:	4630      	mov	r0, r6
 80140ee:	f7ff ffbf 	bl	8014070 <sbrk_aligned>
 80140f2:	1c43      	adds	r3, r0, #1
 80140f4:	4604      	mov	r4, r0
 80140f6:	d158      	bne.n	80141aa <_malloc_r+0xf6>
 80140f8:	f8d8 4000 	ldr.w	r4, [r8]
 80140fc:	4627      	mov	r7, r4
 80140fe:	2f00      	cmp	r7, #0
 8014100:	d143      	bne.n	801418a <_malloc_r+0xd6>
 8014102:	2c00      	cmp	r4, #0
 8014104:	d04b      	beq.n	801419e <_malloc_r+0xea>
 8014106:	6823      	ldr	r3, [r4, #0]
 8014108:	4639      	mov	r1, r7
 801410a:	4630      	mov	r0, r6
 801410c:	eb04 0903 	add.w	r9, r4, r3
 8014110:	f000 fb60 	bl	80147d4 <_sbrk_r>
 8014114:	4581      	cmp	r9, r0
 8014116:	d142      	bne.n	801419e <_malloc_r+0xea>
 8014118:	6821      	ldr	r1, [r4, #0]
 801411a:	4630      	mov	r0, r6
 801411c:	1a6d      	subs	r5, r5, r1
 801411e:	4629      	mov	r1, r5
 8014120:	f7ff ffa6 	bl	8014070 <sbrk_aligned>
 8014124:	3001      	adds	r0, #1
 8014126:	d03a      	beq.n	801419e <_malloc_r+0xea>
 8014128:	6823      	ldr	r3, [r4, #0]
 801412a:	442b      	add	r3, r5
 801412c:	6023      	str	r3, [r4, #0]
 801412e:	f8d8 3000 	ldr.w	r3, [r8]
 8014132:	685a      	ldr	r2, [r3, #4]
 8014134:	bb62      	cbnz	r2, 8014190 <_malloc_r+0xdc>
 8014136:	f8c8 7000 	str.w	r7, [r8]
 801413a:	e00f      	b.n	801415c <_malloc_r+0xa8>
 801413c:	6822      	ldr	r2, [r4, #0]
 801413e:	1b52      	subs	r2, r2, r5
 8014140:	d420      	bmi.n	8014184 <_malloc_r+0xd0>
 8014142:	2a0b      	cmp	r2, #11
 8014144:	d917      	bls.n	8014176 <_malloc_r+0xc2>
 8014146:	1961      	adds	r1, r4, r5
 8014148:	42a3      	cmp	r3, r4
 801414a:	6025      	str	r5, [r4, #0]
 801414c:	bf18      	it	ne
 801414e:	6059      	strne	r1, [r3, #4]
 8014150:	6863      	ldr	r3, [r4, #4]
 8014152:	bf08      	it	eq
 8014154:	f8c8 1000 	streq.w	r1, [r8]
 8014158:	5162      	str	r2, [r4, r5]
 801415a:	604b      	str	r3, [r1, #4]
 801415c:	4630      	mov	r0, r6
 801415e:	f000 f82f 	bl	80141c0 <__malloc_unlock>
 8014162:	f104 000b 	add.w	r0, r4, #11
 8014166:	1d23      	adds	r3, r4, #4
 8014168:	f020 0007 	bic.w	r0, r0, #7
 801416c:	1ac2      	subs	r2, r0, r3
 801416e:	bf1c      	itt	ne
 8014170:	1a1b      	subne	r3, r3, r0
 8014172:	50a3      	strne	r3, [r4, r2]
 8014174:	e7af      	b.n	80140d6 <_malloc_r+0x22>
 8014176:	6862      	ldr	r2, [r4, #4]
 8014178:	42a3      	cmp	r3, r4
 801417a:	bf0c      	ite	eq
 801417c:	f8c8 2000 	streq.w	r2, [r8]
 8014180:	605a      	strne	r2, [r3, #4]
 8014182:	e7eb      	b.n	801415c <_malloc_r+0xa8>
 8014184:	4623      	mov	r3, r4
 8014186:	6864      	ldr	r4, [r4, #4]
 8014188:	e7ae      	b.n	80140e8 <_malloc_r+0x34>
 801418a:	463c      	mov	r4, r7
 801418c:	687f      	ldr	r7, [r7, #4]
 801418e:	e7b6      	b.n	80140fe <_malloc_r+0x4a>
 8014190:	461a      	mov	r2, r3
 8014192:	685b      	ldr	r3, [r3, #4]
 8014194:	42a3      	cmp	r3, r4
 8014196:	d1fb      	bne.n	8014190 <_malloc_r+0xdc>
 8014198:	2300      	movs	r3, #0
 801419a:	6053      	str	r3, [r2, #4]
 801419c:	e7de      	b.n	801415c <_malloc_r+0xa8>
 801419e:	230c      	movs	r3, #12
 80141a0:	4630      	mov	r0, r6
 80141a2:	6033      	str	r3, [r6, #0]
 80141a4:	f000 f80c 	bl	80141c0 <__malloc_unlock>
 80141a8:	e794      	b.n	80140d4 <_malloc_r+0x20>
 80141aa:	6005      	str	r5, [r0, #0]
 80141ac:	e7d6      	b.n	801415c <_malloc_r+0xa8>
 80141ae:	bf00      	nop
 80141b0:	2000029c 	.word	0x2000029c

080141b4 <__malloc_lock>:
 80141b4:	4801      	ldr	r0, [pc, #4]	@ (80141bc <__malloc_lock+0x8>)
 80141b6:	f7ff bf11 	b.w	8013fdc <__retarget_lock_acquire_recursive>
 80141ba:	bf00      	nop
 80141bc:	20000294 	.word	0x20000294

080141c0 <__malloc_unlock>:
 80141c0:	4801      	ldr	r0, [pc, #4]	@ (80141c8 <__malloc_unlock+0x8>)
 80141c2:	f7ff bf0c 	b.w	8013fde <__retarget_lock_release_recursive>
 80141c6:	bf00      	nop
 80141c8:	20000294 	.word	0x20000294

080141cc <__ssputs_r>:
 80141cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141d0:	461f      	mov	r7, r3
 80141d2:	688e      	ldr	r6, [r1, #8]
 80141d4:	4682      	mov	sl, r0
 80141d6:	42be      	cmp	r6, r7
 80141d8:	460c      	mov	r4, r1
 80141da:	4690      	mov	r8, r2
 80141dc:	680b      	ldr	r3, [r1, #0]
 80141de:	d82d      	bhi.n	801423c <__ssputs_r+0x70>
 80141e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80141e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80141e8:	d026      	beq.n	8014238 <__ssputs_r+0x6c>
 80141ea:	6965      	ldr	r5, [r4, #20]
 80141ec:	6909      	ldr	r1, [r1, #16]
 80141ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80141f2:	eba3 0901 	sub.w	r9, r3, r1
 80141f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80141fa:	1c7b      	adds	r3, r7, #1
 80141fc:	444b      	add	r3, r9
 80141fe:	106d      	asrs	r5, r5, #1
 8014200:	429d      	cmp	r5, r3
 8014202:	bf38      	it	cc
 8014204:	461d      	movcc	r5, r3
 8014206:	0553      	lsls	r3, r2, #21
 8014208:	d527      	bpl.n	801425a <__ssputs_r+0x8e>
 801420a:	4629      	mov	r1, r5
 801420c:	f7ff ff52 	bl	80140b4 <_malloc_r>
 8014210:	4606      	mov	r6, r0
 8014212:	b360      	cbz	r0, 801426e <__ssputs_r+0xa2>
 8014214:	464a      	mov	r2, r9
 8014216:	6921      	ldr	r1, [r4, #16]
 8014218:	f000 fafa 	bl	8014810 <memcpy>
 801421c:	89a3      	ldrh	r3, [r4, #12]
 801421e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014226:	81a3      	strh	r3, [r4, #12]
 8014228:	6126      	str	r6, [r4, #16]
 801422a:	444e      	add	r6, r9
 801422c:	6026      	str	r6, [r4, #0]
 801422e:	463e      	mov	r6, r7
 8014230:	6165      	str	r5, [r4, #20]
 8014232:	eba5 0509 	sub.w	r5, r5, r9
 8014236:	60a5      	str	r5, [r4, #8]
 8014238:	42be      	cmp	r6, r7
 801423a:	d900      	bls.n	801423e <__ssputs_r+0x72>
 801423c:	463e      	mov	r6, r7
 801423e:	4632      	mov	r2, r6
 8014240:	4641      	mov	r1, r8
 8014242:	6820      	ldr	r0, [r4, #0]
 8014244:	f000 faac 	bl	80147a0 <memmove>
 8014248:	2000      	movs	r0, #0
 801424a:	68a3      	ldr	r3, [r4, #8]
 801424c:	1b9b      	subs	r3, r3, r6
 801424e:	60a3      	str	r3, [r4, #8]
 8014250:	6823      	ldr	r3, [r4, #0]
 8014252:	4433      	add	r3, r6
 8014254:	6023      	str	r3, [r4, #0]
 8014256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801425a:	462a      	mov	r2, r5
 801425c:	f000 fae6 	bl	801482c <_realloc_r>
 8014260:	4606      	mov	r6, r0
 8014262:	2800      	cmp	r0, #0
 8014264:	d1e0      	bne.n	8014228 <__ssputs_r+0x5c>
 8014266:	4650      	mov	r0, sl
 8014268:	6921      	ldr	r1, [r4, #16]
 801426a:	f7ff feb9 	bl	8013fe0 <_free_r>
 801426e:	230c      	movs	r3, #12
 8014270:	f8ca 3000 	str.w	r3, [sl]
 8014274:	89a3      	ldrh	r3, [r4, #12]
 8014276:	f04f 30ff 	mov.w	r0, #4294967295
 801427a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801427e:	81a3      	strh	r3, [r4, #12]
 8014280:	e7e9      	b.n	8014256 <__ssputs_r+0x8a>
	...

08014284 <_svfiprintf_r>:
 8014284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014288:	4698      	mov	r8, r3
 801428a:	898b      	ldrh	r3, [r1, #12]
 801428c:	4607      	mov	r7, r0
 801428e:	061b      	lsls	r3, r3, #24
 8014290:	460d      	mov	r5, r1
 8014292:	4614      	mov	r4, r2
 8014294:	b09d      	sub	sp, #116	@ 0x74
 8014296:	d510      	bpl.n	80142ba <_svfiprintf_r+0x36>
 8014298:	690b      	ldr	r3, [r1, #16]
 801429a:	b973      	cbnz	r3, 80142ba <_svfiprintf_r+0x36>
 801429c:	2140      	movs	r1, #64	@ 0x40
 801429e:	f7ff ff09 	bl	80140b4 <_malloc_r>
 80142a2:	6028      	str	r0, [r5, #0]
 80142a4:	6128      	str	r0, [r5, #16]
 80142a6:	b930      	cbnz	r0, 80142b6 <_svfiprintf_r+0x32>
 80142a8:	230c      	movs	r3, #12
 80142aa:	603b      	str	r3, [r7, #0]
 80142ac:	f04f 30ff 	mov.w	r0, #4294967295
 80142b0:	b01d      	add	sp, #116	@ 0x74
 80142b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142b6:	2340      	movs	r3, #64	@ 0x40
 80142b8:	616b      	str	r3, [r5, #20]
 80142ba:	2300      	movs	r3, #0
 80142bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80142be:	2320      	movs	r3, #32
 80142c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80142c4:	2330      	movs	r3, #48	@ 0x30
 80142c6:	f04f 0901 	mov.w	r9, #1
 80142ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80142ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8014468 <_svfiprintf_r+0x1e4>
 80142d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80142d6:	4623      	mov	r3, r4
 80142d8:	469a      	mov	sl, r3
 80142da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142de:	b10a      	cbz	r2, 80142e4 <_svfiprintf_r+0x60>
 80142e0:	2a25      	cmp	r2, #37	@ 0x25
 80142e2:	d1f9      	bne.n	80142d8 <_svfiprintf_r+0x54>
 80142e4:	ebba 0b04 	subs.w	fp, sl, r4
 80142e8:	d00b      	beq.n	8014302 <_svfiprintf_r+0x7e>
 80142ea:	465b      	mov	r3, fp
 80142ec:	4622      	mov	r2, r4
 80142ee:	4629      	mov	r1, r5
 80142f0:	4638      	mov	r0, r7
 80142f2:	f7ff ff6b 	bl	80141cc <__ssputs_r>
 80142f6:	3001      	adds	r0, #1
 80142f8:	f000 80a7 	beq.w	801444a <_svfiprintf_r+0x1c6>
 80142fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142fe:	445a      	add	r2, fp
 8014300:	9209      	str	r2, [sp, #36]	@ 0x24
 8014302:	f89a 3000 	ldrb.w	r3, [sl]
 8014306:	2b00      	cmp	r3, #0
 8014308:	f000 809f 	beq.w	801444a <_svfiprintf_r+0x1c6>
 801430c:	2300      	movs	r3, #0
 801430e:	f04f 32ff 	mov.w	r2, #4294967295
 8014312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014316:	f10a 0a01 	add.w	sl, sl, #1
 801431a:	9304      	str	r3, [sp, #16]
 801431c:	9307      	str	r3, [sp, #28]
 801431e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014322:	931a      	str	r3, [sp, #104]	@ 0x68
 8014324:	4654      	mov	r4, sl
 8014326:	2205      	movs	r2, #5
 8014328:	f814 1b01 	ldrb.w	r1, [r4], #1
 801432c:	484e      	ldr	r0, [pc, #312]	@ (8014468 <_svfiprintf_r+0x1e4>)
 801432e:	f000 fa61 	bl	80147f4 <memchr>
 8014332:	9a04      	ldr	r2, [sp, #16]
 8014334:	b9d8      	cbnz	r0, 801436e <_svfiprintf_r+0xea>
 8014336:	06d0      	lsls	r0, r2, #27
 8014338:	bf44      	itt	mi
 801433a:	2320      	movmi	r3, #32
 801433c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014340:	0711      	lsls	r1, r2, #28
 8014342:	bf44      	itt	mi
 8014344:	232b      	movmi	r3, #43	@ 0x2b
 8014346:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801434a:	f89a 3000 	ldrb.w	r3, [sl]
 801434e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014350:	d015      	beq.n	801437e <_svfiprintf_r+0xfa>
 8014352:	4654      	mov	r4, sl
 8014354:	2000      	movs	r0, #0
 8014356:	f04f 0c0a 	mov.w	ip, #10
 801435a:	9a07      	ldr	r2, [sp, #28]
 801435c:	4621      	mov	r1, r4
 801435e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014362:	3b30      	subs	r3, #48	@ 0x30
 8014364:	2b09      	cmp	r3, #9
 8014366:	d94b      	bls.n	8014400 <_svfiprintf_r+0x17c>
 8014368:	b1b0      	cbz	r0, 8014398 <_svfiprintf_r+0x114>
 801436a:	9207      	str	r2, [sp, #28]
 801436c:	e014      	b.n	8014398 <_svfiprintf_r+0x114>
 801436e:	eba0 0308 	sub.w	r3, r0, r8
 8014372:	fa09 f303 	lsl.w	r3, r9, r3
 8014376:	4313      	orrs	r3, r2
 8014378:	46a2      	mov	sl, r4
 801437a:	9304      	str	r3, [sp, #16]
 801437c:	e7d2      	b.n	8014324 <_svfiprintf_r+0xa0>
 801437e:	9b03      	ldr	r3, [sp, #12]
 8014380:	1d19      	adds	r1, r3, #4
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	9103      	str	r1, [sp, #12]
 8014386:	2b00      	cmp	r3, #0
 8014388:	bfbb      	ittet	lt
 801438a:	425b      	neglt	r3, r3
 801438c:	f042 0202 	orrlt.w	r2, r2, #2
 8014390:	9307      	strge	r3, [sp, #28]
 8014392:	9307      	strlt	r3, [sp, #28]
 8014394:	bfb8      	it	lt
 8014396:	9204      	strlt	r2, [sp, #16]
 8014398:	7823      	ldrb	r3, [r4, #0]
 801439a:	2b2e      	cmp	r3, #46	@ 0x2e
 801439c:	d10a      	bne.n	80143b4 <_svfiprintf_r+0x130>
 801439e:	7863      	ldrb	r3, [r4, #1]
 80143a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80143a2:	d132      	bne.n	801440a <_svfiprintf_r+0x186>
 80143a4:	9b03      	ldr	r3, [sp, #12]
 80143a6:	3402      	adds	r4, #2
 80143a8:	1d1a      	adds	r2, r3, #4
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	9203      	str	r2, [sp, #12]
 80143ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80143b2:	9305      	str	r3, [sp, #20]
 80143b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 801446c <_svfiprintf_r+0x1e8>
 80143b8:	2203      	movs	r2, #3
 80143ba:	4650      	mov	r0, sl
 80143bc:	7821      	ldrb	r1, [r4, #0]
 80143be:	f000 fa19 	bl	80147f4 <memchr>
 80143c2:	b138      	cbz	r0, 80143d4 <_svfiprintf_r+0x150>
 80143c4:	2240      	movs	r2, #64	@ 0x40
 80143c6:	9b04      	ldr	r3, [sp, #16]
 80143c8:	eba0 000a 	sub.w	r0, r0, sl
 80143cc:	4082      	lsls	r2, r0
 80143ce:	4313      	orrs	r3, r2
 80143d0:	3401      	adds	r4, #1
 80143d2:	9304      	str	r3, [sp, #16]
 80143d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143d8:	2206      	movs	r2, #6
 80143da:	4825      	ldr	r0, [pc, #148]	@ (8014470 <_svfiprintf_r+0x1ec>)
 80143dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80143e0:	f000 fa08 	bl	80147f4 <memchr>
 80143e4:	2800      	cmp	r0, #0
 80143e6:	d036      	beq.n	8014456 <_svfiprintf_r+0x1d2>
 80143e8:	4b22      	ldr	r3, [pc, #136]	@ (8014474 <_svfiprintf_r+0x1f0>)
 80143ea:	bb1b      	cbnz	r3, 8014434 <_svfiprintf_r+0x1b0>
 80143ec:	9b03      	ldr	r3, [sp, #12]
 80143ee:	3307      	adds	r3, #7
 80143f0:	f023 0307 	bic.w	r3, r3, #7
 80143f4:	3308      	adds	r3, #8
 80143f6:	9303      	str	r3, [sp, #12]
 80143f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143fa:	4433      	add	r3, r6
 80143fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80143fe:	e76a      	b.n	80142d6 <_svfiprintf_r+0x52>
 8014400:	460c      	mov	r4, r1
 8014402:	2001      	movs	r0, #1
 8014404:	fb0c 3202 	mla	r2, ip, r2, r3
 8014408:	e7a8      	b.n	801435c <_svfiprintf_r+0xd8>
 801440a:	2300      	movs	r3, #0
 801440c:	f04f 0c0a 	mov.w	ip, #10
 8014410:	4619      	mov	r1, r3
 8014412:	3401      	adds	r4, #1
 8014414:	9305      	str	r3, [sp, #20]
 8014416:	4620      	mov	r0, r4
 8014418:	f810 2b01 	ldrb.w	r2, [r0], #1
 801441c:	3a30      	subs	r2, #48	@ 0x30
 801441e:	2a09      	cmp	r2, #9
 8014420:	d903      	bls.n	801442a <_svfiprintf_r+0x1a6>
 8014422:	2b00      	cmp	r3, #0
 8014424:	d0c6      	beq.n	80143b4 <_svfiprintf_r+0x130>
 8014426:	9105      	str	r1, [sp, #20]
 8014428:	e7c4      	b.n	80143b4 <_svfiprintf_r+0x130>
 801442a:	4604      	mov	r4, r0
 801442c:	2301      	movs	r3, #1
 801442e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014432:	e7f0      	b.n	8014416 <_svfiprintf_r+0x192>
 8014434:	ab03      	add	r3, sp, #12
 8014436:	9300      	str	r3, [sp, #0]
 8014438:	462a      	mov	r2, r5
 801443a:	4638      	mov	r0, r7
 801443c:	4b0e      	ldr	r3, [pc, #56]	@ (8014478 <_svfiprintf_r+0x1f4>)
 801443e:	a904      	add	r1, sp, #16
 8014440:	f3af 8000 	nop.w
 8014444:	1c42      	adds	r2, r0, #1
 8014446:	4606      	mov	r6, r0
 8014448:	d1d6      	bne.n	80143f8 <_svfiprintf_r+0x174>
 801444a:	89ab      	ldrh	r3, [r5, #12]
 801444c:	065b      	lsls	r3, r3, #25
 801444e:	f53f af2d 	bmi.w	80142ac <_svfiprintf_r+0x28>
 8014452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014454:	e72c      	b.n	80142b0 <_svfiprintf_r+0x2c>
 8014456:	ab03      	add	r3, sp, #12
 8014458:	9300      	str	r3, [sp, #0]
 801445a:	462a      	mov	r2, r5
 801445c:	4638      	mov	r0, r7
 801445e:	4b06      	ldr	r3, [pc, #24]	@ (8014478 <_svfiprintf_r+0x1f4>)
 8014460:	a904      	add	r1, sp, #16
 8014462:	f000 f87d 	bl	8014560 <_printf_i>
 8014466:	e7ed      	b.n	8014444 <_svfiprintf_r+0x1c0>
 8014468:	080148de 	.word	0x080148de
 801446c:	080148e4 	.word	0x080148e4
 8014470:	080148e8 	.word	0x080148e8
 8014474:	00000000 	.word	0x00000000
 8014478:	080141cd 	.word	0x080141cd

0801447c <_printf_common>:
 801447c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014480:	4616      	mov	r6, r2
 8014482:	4698      	mov	r8, r3
 8014484:	688a      	ldr	r2, [r1, #8]
 8014486:	690b      	ldr	r3, [r1, #16]
 8014488:	4607      	mov	r7, r0
 801448a:	4293      	cmp	r3, r2
 801448c:	bfb8      	it	lt
 801448e:	4613      	movlt	r3, r2
 8014490:	6033      	str	r3, [r6, #0]
 8014492:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014496:	460c      	mov	r4, r1
 8014498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801449c:	b10a      	cbz	r2, 80144a2 <_printf_common+0x26>
 801449e:	3301      	adds	r3, #1
 80144a0:	6033      	str	r3, [r6, #0]
 80144a2:	6823      	ldr	r3, [r4, #0]
 80144a4:	0699      	lsls	r1, r3, #26
 80144a6:	bf42      	ittt	mi
 80144a8:	6833      	ldrmi	r3, [r6, #0]
 80144aa:	3302      	addmi	r3, #2
 80144ac:	6033      	strmi	r3, [r6, #0]
 80144ae:	6825      	ldr	r5, [r4, #0]
 80144b0:	f015 0506 	ands.w	r5, r5, #6
 80144b4:	d106      	bne.n	80144c4 <_printf_common+0x48>
 80144b6:	f104 0a19 	add.w	sl, r4, #25
 80144ba:	68e3      	ldr	r3, [r4, #12]
 80144bc:	6832      	ldr	r2, [r6, #0]
 80144be:	1a9b      	subs	r3, r3, r2
 80144c0:	42ab      	cmp	r3, r5
 80144c2:	dc2b      	bgt.n	801451c <_printf_common+0xa0>
 80144c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80144c8:	6822      	ldr	r2, [r4, #0]
 80144ca:	3b00      	subs	r3, #0
 80144cc:	bf18      	it	ne
 80144ce:	2301      	movne	r3, #1
 80144d0:	0692      	lsls	r2, r2, #26
 80144d2:	d430      	bmi.n	8014536 <_printf_common+0xba>
 80144d4:	4641      	mov	r1, r8
 80144d6:	4638      	mov	r0, r7
 80144d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80144dc:	47c8      	blx	r9
 80144de:	3001      	adds	r0, #1
 80144e0:	d023      	beq.n	801452a <_printf_common+0xae>
 80144e2:	6823      	ldr	r3, [r4, #0]
 80144e4:	6922      	ldr	r2, [r4, #16]
 80144e6:	f003 0306 	and.w	r3, r3, #6
 80144ea:	2b04      	cmp	r3, #4
 80144ec:	bf14      	ite	ne
 80144ee:	2500      	movne	r5, #0
 80144f0:	6833      	ldreq	r3, [r6, #0]
 80144f2:	f04f 0600 	mov.w	r6, #0
 80144f6:	bf08      	it	eq
 80144f8:	68e5      	ldreq	r5, [r4, #12]
 80144fa:	f104 041a 	add.w	r4, r4, #26
 80144fe:	bf08      	it	eq
 8014500:	1aed      	subeq	r5, r5, r3
 8014502:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8014506:	bf08      	it	eq
 8014508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801450c:	4293      	cmp	r3, r2
 801450e:	bfc4      	itt	gt
 8014510:	1a9b      	subgt	r3, r3, r2
 8014512:	18ed      	addgt	r5, r5, r3
 8014514:	42b5      	cmp	r5, r6
 8014516:	d11a      	bne.n	801454e <_printf_common+0xd2>
 8014518:	2000      	movs	r0, #0
 801451a:	e008      	b.n	801452e <_printf_common+0xb2>
 801451c:	2301      	movs	r3, #1
 801451e:	4652      	mov	r2, sl
 8014520:	4641      	mov	r1, r8
 8014522:	4638      	mov	r0, r7
 8014524:	47c8      	blx	r9
 8014526:	3001      	adds	r0, #1
 8014528:	d103      	bne.n	8014532 <_printf_common+0xb6>
 801452a:	f04f 30ff 	mov.w	r0, #4294967295
 801452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014532:	3501      	adds	r5, #1
 8014534:	e7c1      	b.n	80144ba <_printf_common+0x3e>
 8014536:	2030      	movs	r0, #48	@ 0x30
 8014538:	18e1      	adds	r1, r4, r3
 801453a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801453e:	1c5a      	adds	r2, r3, #1
 8014540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014544:	4422      	add	r2, r4
 8014546:	3302      	adds	r3, #2
 8014548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801454c:	e7c2      	b.n	80144d4 <_printf_common+0x58>
 801454e:	2301      	movs	r3, #1
 8014550:	4622      	mov	r2, r4
 8014552:	4641      	mov	r1, r8
 8014554:	4638      	mov	r0, r7
 8014556:	47c8      	blx	r9
 8014558:	3001      	adds	r0, #1
 801455a:	d0e6      	beq.n	801452a <_printf_common+0xae>
 801455c:	3601      	adds	r6, #1
 801455e:	e7d9      	b.n	8014514 <_printf_common+0x98>

08014560 <_printf_i>:
 8014560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014564:	7e0f      	ldrb	r7, [r1, #24]
 8014566:	4691      	mov	r9, r2
 8014568:	2f78      	cmp	r7, #120	@ 0x78
 801456a:	4680      	mov	r8, r0
 801456c:	460c      	mov	r4, r1
 801456e:	469a      	mov	sl, r3
 8014570:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014576:	d807      	bhi.n	8014588 <_printf_i+0x28>
 8014578:	2f62      	cmp	r7, #98	@ 0x62
 801457a:	d80a      	bhi.n	8014592 <_printf_i+0x32>
 801457c:	2f00      	cmp	r7, #0
 801457e:	f000 80d3 	beq.w	8014728 <_printf_i+0x1c8>
 8014582:	2f58      	cmp	r7, #88	@ 0x58
 8014584:	f000 80ba 	beq.w	80146fc <_printf_i+0x19c>
 8014588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801458c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014590:	e03a      	b.n	8014608 <_printf_i+0xa8>
 8014592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014596:	2b15      	cmp	r3, #21
 8014598:	d8f6      	bhi.n	8014588 <_printf_i+0x28>
 801459a:	a101      	add	r1, pc, #4	@ (adr r1, 80145a0 <_printf_i+0x40>)
 801459c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80145a0:	080145f9 	.word	0x080145f9
 80145a4:	0801460d 	.word	0x0801460d
 80145a8:	08014589 	.word	0x08014589
 80145ac:	08014589 	.word	0x08014589
 80145b0:	08014589 	.word	0x08014589
 80145b4:	08014589 	.word	0x08014589
 80145b8:	0801460d 	.word	0x0801460d
 80145bc:	08014589 	.word	0x08014589
 80145c0:	08014589 	.word	0x08014589
 80145c4:	08014589 	.word	0x08014589
 80145c8:	08014589 	.word	0x08014589
 80145cc:	0801470f 	.word	0x0801470f
 80145d0:	08014637 	.word	0x08014637
 80145d4:	080146c9 	.word	0x080146c9
 80145d8:	08014589 	.word	0x08014589
 80145dc:	08014589 	.word	0x08014589
 80145e0:	08014731 	.word	0x08014731
 80145e4:	08014589 	.word	0x08014589
 80145e8:	08014637 	.word	0x08014637
 80145ec:	08014589 	.word	0x08014589
 80145f0:	08014589 	.word	0x08014589
 80145f4:	080146d1 	.word	0x080146d1
 80145f8:	6833      	ldr	r3, [r6, #0]
 80145fa:	1d1a      	adds	r2, r3, #4
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	6032      	str	r2, [r6, #0]
 8014600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014608:	2301      	movs	r3, #1
 801460a:	e09e      	b.n	801474a <_printf_i+0x1ea>
 801460c:	6833      	ldr	r3, [r6, #0]
 801460e:	6820      	ldr	r0, [r4, #0]
 8014610:	1d19      	adds	r1, r3, #4
 8014612:	6031      	str	r1, [r6, #0]
 8014614:	0606      	lsls	r6, r0, #24
 8014616:	d501      	bpl.n	801461c <_printf_i+0xbc>
 8014618:	681d      	ldr	r5, [r3, #0]
 801461a:	e003      	b.n	8014624 <_printf_i+0xc4>
 801461c:	0645      	lsls	r5, r0, #25
 801461e:	d5fb      	bpl.n	8014618 <_printf_i+0xb8>
 8014620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014624:	2d00      	cmp	r5, #0
 8014626:	da03      	bge.n	8014630 <_printf_i+0xd0>
 8014628:	232d      	movs	r3, #45	@ 0x2d
 801462a:	426d      	negs	r5, r5
 801462c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014630:	230a      	movs	r3, #10
 8014632:	4859      	ldr	r0, [pc, #356]	@ (8014798 <_printf_i+0x238>)
 8014634:	e011      	b.n	801465a <_printf_i+0xfa>
 8014636:	6821      	ldr	r1, [r4, #0]
 8014638:	6833      	ldr	r3, [r6, #0]
 801463a:	0608      	lsls	r0, r1, #24
 801463c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014640:	d402      	bmi.n	8014648 <_printf_i+0xe8>
 8014642:	0649      	lsls	r1, r1, #25
 8014644:	bf48      	it	mi
 8014646:	b2ad      	uxthmi	r5, r5
 8014648:	2f6f      	cmp	r7, #111	@ 0x6f
 801464a:	6033      	str	r3, [r6, #0]
 801464c:	bf14      	ite	ne
 801464e:	230a      	movne	r3, #10
 8014650:	2308      	moveq	r3, #8
 8014652:	4851      	ldr	r0, [pc, #324]	@ (8014798 <_printf_i+0x238>)
 8014654:	2100      	movs	r1, #0
 8014656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801465a:	6866      	ldr	r6, [r4, #4]
 801465c:	2e00      	cmp	r6, #0
 801465e:	bfa8      	it	ge
 8014660:	6821      	ldrge	r1, [r4, #0]
 8014662:	60a6      	str	r6, [r4, #8]
 8014664:	bfa4      	itt	ge
 8014666:	f021 0104 	bicge.w	r1, r1, #4
 801466a:	6021      	strge	r1, [r4, #0]
 801466c:	b90d      	cbnz	r5, 8014672 <_printf_i+0x112>
 801466e:	2e00      	cmp	r6, #0
 8014670:	d04b      	beq.n	801470a <_printf_i+0x1aa>
 8014672:	4616      	mov	r6, r2
 8014674:	fbb5 f1f3 	udiv	r1, r5, r3
 8014678:	fb03 5711 	mls	r7, r3, r1, r5
 801467c:	5dc7      	ldrb	r7, [r0, r7]
 801467e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014682:	462f      	mov	r7, r5
 8014684:	42bb      	cmp	r3, r7
 8014686:	460d      	mov	r5, r1
 8014688:	d9f4      	bls.n	8014674 <_printf_i+0x114>
 801468a:	2b08      	cmp	r3, #8
 801468c:	d10b      	bne.n	80146a6 <_printf_i+0x146>
 801468e:	6823      	ldr	r3, [r4, #0]
 8014690:	07df      	lsls	r7, r3, #31
 8014692:	d508      	bpl.n	80146a6 <_printf_i+0x146>
 8014694:	6923      	ldr	r3, [r4, #16]
 8014696:	6861      	ldr	r1, [r4, #4]
 8014698:	4299      	cmp	r1, r3
 801469a:	bfde      	ittt	le
 801469c:	2330      	movle	r3, #48	@ 0x30
 801469e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80146a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80146a6:	1b92      	subs	r2, r2, r6
 80146a8:	6122      	str	r2, [r4, #16]
 80146aa:	464b      	mov	r3, r9
 80146ac:	4621      	mov	r1, r4
 80146ae:	4640      	mov	r0, r8
 80146b0:	f8cd a000 	str.w	sl, [sp]
 80146b4:	aa03      	add	r2, sp, #12
 80146b6:	f7ff fee1 	bl	801447c <_printf_common>
 80146ba:	3001      	adds	r0, #1
 80146bc:	d14a      	bne.n	8014754 <_printf_i+0x1f4>
 80146be:	f04f 30ff 	mov.w	r0, #4294967295
 80146c2:	b004      	add	sp, #16
 80146c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146c8:	6823      	ldr	r3, [r4, #0]
 80146ca:	f043 0320 	orr.w	r3, r3, #32
 80146ce:	6023      	str	r3, [r4, #0]
 80146d0:	2778      	movs	r7, #120	@ 0x78
 80146d2:	4832      	ldr	r0, [pc, #200]	@ (801479c <_printf_i+0x23c>)
 80146d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80146d8:	6823      	ldr	r3, [r4, #0]
 80146da:	6831      	ldr	r1, [r6, #0]
 80146dc:	061f      	lsls	r7, r3, #24
 80146de:	f851 5b04 	ldr.w	r5, [r1], #4
 80146e2:	d402      	bmi.n	80146ea <_printf_i+0x18a>
 80146e4:	065f      	lsls	r7, r3, #25
 80146e6:	bf48      	it	mi
 80146e8:	b2ad      	uxthmi	r5, r5
 80146ea:	6031      	str	r1, [r6, #0]
 80146ec:	07d9      	lsls	r1, r3, #31
 80146ee:	bf44      	itt	mi
 80146f0:	f043 0320 	orrmi.w	r3, r3, #32
 80146f4:	6023      	strmi	r3, [r4, #0]
 80146f6:	b11d      	cbz	r5, 8014700 <_printf_i+0x1a0>
 80146f8:	2310      	movs	r3, #16
 80146fa:	e7ab      	b.n	8014654 <_printf_i+0xf4>
 80146fc:	4826      	ldr	r0, [pc, #152]	@ (8014798 <_printf_i+0x238>)
 80146fe:	e7e9      	b.n	80146d4 <_printf_i+0x174>
 8014700:	6823      	ldr	r3, [r4, #0]
 8014702:	f023 0320 	bic.w	r3, r3, #32
 8014706:	6023      	str	r3, [r4, #0]
 8014708:	e7f6      	b.n	80146f8 <_printf_i+0x198>
 801470a:	4616      	mov	r6, r2
 801470c:	e7bd      	b.n	801468a <_printf_i+0x12a>
 801470e:	6833      	ldr	r3, [r6, #0]
 8014710:	6825      	ldr	r5, [r4, #0]
 8014712:	1d18      	adds	r0, r3, #4
 8014714:	6961      	ldr	r1, [r4, #20]
 8014716:	6030      	str	r0, [r6, #0]
 8014718:	062e      	lsls	r6, r5, #24
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	d501      	bpl.n	8014722 <_printf_i+0x1c2>
 801471e:	6019      	str	r1, [r3, #0]
 8014720:	e002      	b.n	8014728 <_printf_i+0x1c8>
 8014722:	0668      	lsls	r0, r5, #25
 8014724:	d5fb      	bpl.n	801471e <_printf_i+0x1be>
 8014726:	8019      	strh	r1, [r3, #0]
 8014728:	2300      	movs	r3, #0
 801472a:	4616      	mov	r6, r2
 801472c:	6123      	str	r3, [r4, #16]
 801472e:	e7bc      	b.n	80146aa <_printf_i+0x14a>
 8014730:	6833      	ldr	r3, [r6, #0]
 8014732:	2100      	movs	r1, #0
 8014734:	1d1a      	adds	r2, r3, #4
 8014736:	6032      	str	r2, [r6, #0]
 8014738:	681e      	ldr	r6, [r3, #0]
 801473a:	6862      	ldr	r2, [r4, #4]
 801473c:	4630      	mov	r0, r6
 801473e:	f000 f859 	bl	80147f4 <memchr>
 8014742:	b108      	cbz	r0, 8014748 <_printf_i+0x1e8>
 8014744:	1b80      	subs	r0, r0, r6
 8014746:	6060      	str	r0, [r4, #4]
 8014748:	6863      	ldr	r3, [r4, #4]
 801474a:	6123      	str	r3, [r4, #16]
 801474c:	2300      	movs	r3, #0
 801474e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014752:	e7aa      	b.n	80146aa <_printf_i+0x14a>
 8014754:	4632      	mov	r2, r6
 8014756:	4649      	mov	r1, r9
 8014758:	4640      	mov	r0, r8
 801475a:	6923      	ldr	r3, [r4, #16]
 801475c:	47d0      	blx	sl
 801475e:	3001      	adds	r0, #1
 8014760:	d0ad      	beq.n	80146be <_printf_i+0x15e>
 8014762:	6823      	ldr	r3, [r4, #0]
 8014764:	079b      	lsls	r3, r3, #30
 8014766:	d413      	bmi.n	8014790 <_printf_i+0x230>
 8014768:	68e0      	ldr	r0, [r4, #12]
 801476a:	9b03      	ldr	r3, [sp, #12]
 801476c:	4298      	cmp	r0, r3
 801476e:	bfb8      	it	lt
 8014770:	4618      	movlt	r0, r3
 8014772:	e7a6      	b.n	80146c2 <_printf_i+0x162>
 8014774:	2301      	movs	r3, #1
 8014776:	4632      	mov	r2, r6
 8014778:	4649      	mov	r1, r9
 801477a:	4640      	mov	r0, r8
 801477c:	47d0      	blx	sl
 801477e:	3001      	adds	r0, #1
 8014780:	d09d      	beq.n	80146be <_printf_i+0x15e>
 8014782:	3501      	adds	r5, #1
 8014784:	68e3      	ldr	r3, [r4, #12]
 8014786:	9903      	ldr	r1, [sp, #12]
 8014788:	1a5b      	subs	r3, r3, r1
 801478a:	42ab      	cmp	r3, r5
 801478c:	dcf2      	bgt.n	8014774 <_printf_i+0x214>
 801478e:	e7eb      	b.n	8014768 <_printf_i+0x208>
 8014790:	2500      	movs	r5, #0
 8014792:	f104 0619 	add.w	r6, r4, #25
 8014796:	e7f5      	b.n	8014784 <_printf_i+0x224>
 8014798:	080148ef 	.word	0x080148ef
 801479c:	08014900 	.word	0x08014900

080147a0 <memmove>:
 80147a0:	4288      	cmp	r0, r1
 80147a2:	b510      	push	{r4, lr}
 80147a4:	eb01 0402 	add.w	r4, r1, r2
 80147a8:	d902      	bls.n	80147b0 <memmove+0x10>
 80147aa:	4284      	cmp	r4, r0
 80147ac:	4623      	mov	r3, r4
 80147ae:	d807      	bhi.n	80147c0 <memmove+0x20>
 80147b0:	1e43      	subs	r3, r0, #1
 80147b2:	42a1      	cmp	r1, r4
 80147b4:	d008      	beq.n	80147c8 <memmove+0x28>
 80147b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80147be:	e7f8      	b.n	80147b2 <memmove+0x12>
 80147c0:	4601      	mov	r1, r0
 80147c2:	4402      	add	r2, r0
 80147c4:	428a      	cmp	r2, r1
 80147c6:	d100      	bne.n	80147ca <memmove+0x2a>
 80147c8:	bd10      	pop	{r4, pc}
 80147ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147d2:	e7f7      	b.n	80147c4 <memmove+0x24>

080147d4 <_sbrk_r>:
 80147d4:	b538      	push	{r3, r4, r5, lr}
 80147d6:	2300      	movs	r3, #0
 80147d8:	4d05      	ldr	r5, [pc, #20]	@ (80147f0 <_sbrk_r+0x1c>)
 80147da:	4604      	mov	r4, r0
 80147dc:	4608      	mov	r0, r1
 80147de:	602b      	str	r3, [r5, #0]
 80147e0:	f7fc f858 	bl	8010894 <_sbrk>
 80147e4:	1c43      	adds	r3, r0, #1
 80147e6:	d102      	bne.n	80147ee <_sbrk_r+0x1a>
 80147e8:	682b      	ldr	r3, [r5, #0]
 80147ea:	b103      	cbz	r3, 80147ee <_sbrk_r+0x1a>
 80147ec:	6023      	str	r3, [r4, #0]
 80147ee:	bd38      	pop	{r3, r4, r5, pc}
 80147f0:	20000290 	.word	0x20000290

080147f4 <memchr>:
 80147f4:	4603      	mov	r3, r0
 80147f6:	b510      	push	{r4, lr}
 80147f8:	b2c9      	uxtb	r1, r1
 80147fa:	4402      	add	r2, r0
 80147fc:	4293      	cmp	r3, r2
 80147fe:	4618      	mov	r0, r3
 8014800:	d101      	bne.n	8014806 <memchr+0x12>
 8014802:	2000      	movs	r0, #0
 8014804:	e003      	b.n	801480e <memchr+0x1a>
 8014806:	7804      	ldrb	r4, [r0, #0]
 8014808:	3301      	adds	r3, #1
 801480a:	428c      	cmp	r4, r1
 801480c:	d1f6      	bne.n	80147fc <memchr+0x8>
 801480e:	bd10      	pop	{r4, pc}

08014810 <memcpy>:
 8014810:	440a      	add	r2, r1
 8014812:	4291      	cmp	r1, r2
 8014814:	f100 33ff 	add.w	r3, r0, #4294967295
 8014818:	d100      	bne.n	801481c <memcpy+0xc>
 801481a:	4770      	bx	lr
 801481c:	b510      	push	{r4, lr}
 801481e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014822:	4291      	cmp	r1, r2
 8014824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014828:	d1f9      	bne.n	801481e <memcpy+0xe>
 801482a:	bd10      	pop	{r4, pc}

0801482c <_realloc_r>:
 801482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014830:	4680      	mov	r8, r0
 8014832:	4615      	mov	r5, r2
 8014834:	460c      	mov	r4, r1
 8014836:	b921      	cbnz	r1, 8014842 <_realloc_r+0x16>
 8014838:	4611      	mov	r1, r2
 801483a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801483e:	f7ff bc39 	b.w	80140b4 <_malloc_r>
 8014842:	b92a      	cbnz	r2, 8014850 <_realloc_r+0x24>
 8014844:	f7ff fbcc 	bl	8013fe0 <_free_r>
 8014848:	2400      	movs	r4, #0
 801484a:	4620      	mov	r0, r4
 801484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014850:	f000 f81a 	bl	8014888 <_malloc_usable_size_r>
 8014854:	4285      	cmp	r5, r0
 8014856:	4606      	mov	r6, r0
 8014858:	d802      	bhi.n	8014860 <_realloc_r+0x34>
 801485a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801485e:	d8f4      	bhi.n	801484a <_realloc_r+0x1e>
 8014860:	4629      	mov	r1, r5
 8014862:	4640      	mov	r0, r8
 8014864:	f7ff fc26 	bl	80140b4 <_malloc_r>
 8014868:	4607      	mov	r7, r0
 801486a:	2800      	cmp	r0, #0
 801486c:	d0ec      	beq.n	8014848 <_realloc_r+0x1c>
 801486e:	42b5      	cmp	r5, r6
 8014870:	462a      	mov	r2, r5
 8014872:	4621      	mov	r1, r4
 8014874:	bf28      	it	cs
 8014876:	4632      	movcs	r2, r6
 8014878:	f7ff ffca 	bl	8014810 <memcpy>
 801487c:	4621      	mov	r1, r4
 801487e:	4640      	mov	r0, r8
 8014880:	f7ff fbae 	bl	8013fe0 <_free_r>
 8014884:	463c      	mov	r4, r7
 8014886:	e7e0      	b.n	801484a <_realloc_r+0x1e>

08014888 <_malloc_usable_size_r>:
 8014888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801488c:	1f18      	subs	r0, r3, #4
 801488e:	2b00      	cmp	r3, #0
 8014890:	bfbc      	itt	lt
 8014892:	580b      	ldrlt	r3, [r1, r0]
 8014894:	18c0      	addlt	r0, r0, r3
 8014896:	4770      	bx	lr

08014898 <_init>:
 8014898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801489a:	bf00      	nop
 801489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801489e:	bc08      	pop	{r3}
 80148a0:	469e      	mov	lr, r3
 80148a2:	4770      	bx	lr

080148a4 <_fini>:
 80148a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a6:	bf00      	nop
 80148a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148aa:	bc08      	pop	{r3}
 80148ac:	469e      	mov	lr, r3
 80148ae:	4770      	bx	lr
