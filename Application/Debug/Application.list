
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e58  0800810c  0800810c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mysection    00000000  08018000  08018000  00006068  2**0
                  CONTENTS
  3 .rodata       00000064  0800cf64  0800cf64  00005f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800cfc8  0800cfc8  00006068  2**0
                  CONTENTS
  5 .ARM          00000000  0800cfc8  0800cfc8  00006068  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800cfc8  0800cfc8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800cfc8  0800cfc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800cfcc  0800cfcc  00005fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000068  20000000  0800cfd0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000002c8  20000068  0800d038  00006068  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000330  0800d038  00006330  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6b6  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002269  00000000  00000000  00012747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  000149b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b06  00000000  00000000  000157c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017573  00000000  00000000  000162ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f70  00000000  00000000  0002d841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ae57  00000000  00000000  0003e7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c9608  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000402c  00000000  00000000  000c964c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  000cd678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	@ (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	@ (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	@ (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000068 	.word	0x20000068
 8008128:	00000000 	.word	0x00000000
 800812c:	0800cf4c 	.word	0x0800cf4c

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	@ (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	@ (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	@ (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	2000006c 	.word	0x2000006c
 8008148:	0800cf4c 	.word	0x0800cf4c

0800814c <getHX712>:
#include "loadcell_hx712.h"


uint32_t getHX712(uint8_t speed)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	71fb      	strb	r3, [r7, #7]
//__disable_irq();
  uint32_t data = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]
  uint32_t tick = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	613b      	str	r3, [r7, #16]
  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET)
 800815e:	e009      	b.n	8008174 <getHX712+0x28>
  {

    if (tick < 100000) tick++;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	4a34      	ldr	r2, [pc, #208]	@ (8008234 <getHX712+0xe8>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d803      	bhi.n	8008170 <getHX712+0x24>
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	3301      	adds	r3, #1
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	e001      	b.n	8008174 <getHX712+0x28>
    else return 0;
 8008170:	2300      	movs	r3, #0
 8008172:	e05a      	b.n	800822a <getHX712+0xde>
  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET)
 8008174:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008178:	482f      	ldr	r0, [pc, #188]	@ (8008238 <getHX712+0xec>)
 800817a:	f001 fc21 	bl	80099c0 <HAL_GPIO_ReadPin>
 800817e:	4603      	mov	r3, r0
 8008180:	2b01      	cmp	r3, #1
 8008182:	d0ed      	beq.n	8008160 <getHX712+0x14>
  }
  for(int8_t len=0; len<24 ; len++)
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
 8008188:	e025      	b.n	80081d6 <getHX712+0x8a>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800818a:	2201      	movs	r2, #1
 800818c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008190:	4829      	ldr	r0, [pc, #164]	@ (8008238 <getHX712+0xec>)
 8008192:	f001 fc2c 	bl	80099ee <HAL_GPIO_WritePin>
    microDelay(1);
 8008196:	2001      	movs	r0, #1
 8008198:	f000 f88e 	bl	80082b8 <microDelay>
    data = data << 1;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80081a2:	2200      	movs	r2, #0
 80081a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80081a8:	4823      	ldr	r0, [pc, #140]	@ (8008238 <getHX712+0xec>)
 80081aa:	f001 fc20 	bl	80099ee <HAL_GPIO_WritePin>
    microDelay(1);
 80081ae:	2001      	movs	r0, #1
 80081b0:	f000 f882 	bl	80082b8 <microDelay>
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET)
 80081b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80081b8:	481f      	ldr	r0, [pc, #124]	@ (8008238 <getHX712+0xec>)
 80081ba:	f001 fc01 	bl	80099c0 <HAL_GPIO_ReadPin>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d102      	bne.n	80081ca <getHX712+0x7e>
      data ++;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	3301      	adds	r3, #1
 80081c8:	617b      	str	r3, [r7, #20]
  for(int8_t len=0; len<24 ; len++)
 80081ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	3301      	adds	r3, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	73fb      	strb	r3, [r7, #15]
 80081d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081da:	2b17      	cmp	r3, #23
 80081dc:	ddd5      	ble.n	800818a <getHX712+0x3e>
  }

  for (int i = 0; i<speed; i++){
 80081de:	2300      	movs	r3, #0
 80081e0:	60bb      	str	r3, [r7, #8]
 80081e2:	e014      	b.n	800820e <getHX712+0xc2>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80081e4:	2201      	movs	r2, #1
 80081e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80081ea:	4813      	ldr	r0, [pc, #76]	@ (8008238 <getHX712+0xec>)
 80081ec:	f001 fbff 	bl	80099ee <HAL_GPIO_WritePin>
	  microDelay(1);
 80081f0:	2001      	movs	r0, #1
 80081f2:	f000 f861 	bl	80082b8 <microDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80081f6:	2200      	movs	r2, #0
 80081f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80081fc:	480e      	ldr	r0, [pc, #56]	@ (8008238 <getHX712+0xec>)
 80081fe:	f001 fbf6 	bl	80099ee <HAL_GPIO_WritePin>
	  microDelay(1);
 8008202:	2001      	movs	r0, #1
 8008204:	f000 f858 	bl	80082b8 <microDelay>
  for (int i = 0; i<speed; i++){
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	3301      	adds	r3, #1
 800820c:	60bb      	str	r3, [r7, #8]
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	429a      	cmp	r2, r3
 8008214:	dbe6      	blt.n	80081e4 <getHX712+0x98>
  }

  data = data ^ 0x800000;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 800821c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800821e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008222:	4806      	ldr	r0, [pc, #24]	@ (800823c <getHX712+0xf0>)
 8008224:	f001 fbfb 	bl	8009a1e <HAL_GPIO_TogglePin>
  //__enable_irq();

  return data;
 8008228:	697b      	ldr	r3, [r7, #20]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	0001869f 	.word	0x0001869f
 8008238:	40010c00 	.word	0x40010c00
 800823c:	40011000 	.word	0x40011000

08008240 <int_to_string>:


void int_to_string(int num, uint8_t* str) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
    // in case of negative
    if (num < 0) {
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	da07      	bge.n	8008260 <int_to_string+0x20>
        *str++ = '-';
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	603a      	str	r2, [r7, #0]
 8008256:	222d      	movs	r2, #45	@ 0x2d
 8008258:	701a      	strb	r2, [r3, #0]
        num = -num;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	425b      	negs	r3, r3
 800825e:	607b      	str	r3, [r7, #4]
    }
    // Convert integer part to string
    sprintf((char*)str, "%d", num);
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	4909      	ldr	r1, [pc, #36]	@ (8008288 <int_to_string+0x48>)
 8008264:	6838      	ldr	r0, [r7, #0]
 8008266:	f004 f9c1 	bl	800c5ec <siprintf>
    // Move the pointer to the end of the integer part
    while (*str != '\0') {
 800826a:	e002      	b.n	8008272 <int_to_string+0x32>
        str++;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	603b      	str	r3, [r7, #0]
    while (*str != '\0') {
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1f8      	bne.n	800826c <int_to_string+0x2c>
    }
    // Null-terminate the string
    *str = '\0';
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2200      	movs	r2, #0
 800827e:	701a      	strb	r2, [r3, #0]
}
 8008280:	bf00      	nop
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	0800cf64 	.word	0x0800cf64

0800828c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008290:	f3bf 8f4f 	dsb	sy
}
 8008294:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008296:	4b06      	ldr	r3, [pc, #24]	@ (80082b0 <__NVIC_SystemReset+0x24>)
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800829e:	4904      	ldr	r1, [pc, #16]	@ (80082b0 <__NVIC_SystemReset+0x24>)
 80082a0:	4b04      	ldr	r3, [pc, #16]	@ (80082b4 <__NVIC_SystemReset+0x28>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80082a6:	f3bf 8f4f 	dsb	sy
}
 80082aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80082ac:	bf00      	nop
 80082ae:	e7fd      	b.n	80082ac <__NVIC_SystemReset+0x20>
 80082b0:	e000ed00 	.word	0xe000ed00
 80082b4:	05fa0004 	.word	0x05fa0004

080082b8 <microDelay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void microDelay(uint32_t delay)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80082c0:	4b21      	ldr	r3, [pc, #132]	@ (8008348 <microDelay+0x90>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2200      	movs	r2, #0
 80082c6:	625a      	str	r2, [r3, #36]	@ 0x24
  uint32_t overflow_flag = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	617b      	str	r3, [r7, #20]
  uint32_t delay_ms = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	613b      	str	r3, [r7, #16]
  uint16_t delay_us = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	81fb      	strh	r3, [r7, #14]

  // delay handling
  delay_ms = delay/1000; //x ms
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a1d      	ldr	r2, [pc, #116]	@ (800834c <microDelay+0x94>)
 80082d8:	fba2 2303 	umull	r2, r3, r2, r3
 80082dc:	099b      	lsrs	r3, r3, #6
 80082de:	613b      	str	r3, [r7, #16]
  delay_us = delay%1000;
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	4b1a      	ldr	r3, [pc, #104]	@ (800834c <microDelay+0x94>)
 80082e4:	fba3 1302 	umull	r1, r3, r3, r2
 80082e8:	099b      	lsrs	r3, r3, #6
 80082ea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80082ee:	fb01 f303 	mul.w	r3, r1, r3
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	81fb      	strh	r3, [r7, #14]

  while (!((overflow_flag >= delay_ms) & (__HAL_TIM_GET_COUNTER(&htim2) >= delay_us))){
 80082f6:	e00d      	b.n	8008314 <microDelay+0x5c>
	if (__HAL_TIM_GET_COUNTER(&htim2) >= 1000-1){
 80082f8:	4b13      	ldr	r3, [pc, #76]	@ (8008348 <microDelay+0x90>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fe:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8008302:	4293      	cmp	r3, r2
 8008304:	d906      	bls.n	8008314 <microDelay+0x5c>
	  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8008306:	4b10      	ldr	r3, [pc, #64]	@ (8008348 <microDelay+0x90>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2200      	movs	r2, #0
 800830c:	625a      	str	r2, [r3, #36]	@ 0x24
	  overflow_flag++;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	3301      	adds	r3, #1
 8008312:	617b      	str	r3, [r7, #20]
  while (!((overflow_flag >= delay_ms) & (__HAL_TIM_GET_COUNTER(&htim2) >= delay_us))){
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	429a      	cmp	r2, r3
 800831a:	bf34      	ite	cc
 800831c:	2301      	movcc	r3, #1
 800831e:	2300      	movcs	r3, #0
 8008320:	b2da      	uxtb	r2, r3
 8008322:	4b09      	ldr	r3, [pc, #36]	@ (8008348 <microDelay+0x90>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008328:	89fb      	ldrh	r3, [r7, #14]
 800832a:	4299      	cmp	r1, r3
 800832c:	bf34      	ite	cc
 800832e:	2301      	movcc	r3, #1
 8008330:	2300      	movcs	r3, #0
 8008332:	b2db      	uxtb	r3, r3
 8008334:	4313      	orrs	r3, r2
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1dd      	bne.n	80082f8 <microDelay+0x40>
	}
  }
}
 800833c:	bf00      	nop
 800833e:	bf00      	nop
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr
 8008348:	200000d8 	.word	0x200000d8
 800834c:	10624dd3 	.word	0x10624dd3

08008350 <receive_signal_handling>:


void receive_signal_handling(void){
 8008350:	b5b0      	push	{r4, r5, r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
	//__disable_irq();
	int_to_string(303, TxData);
 8008356:	4991      	ldr	r1, [pc, #580]	@ (800859c <receive_signal_handling+0x24c>)
 8008358:	f240 102f 	movw	r0, #303	@ 0x12f
 800835c:	f7ff ff70 	bl	8008240 <int_to_string>

	if (mem_erased_flag == 1){
 8008360:	4b8f      	ldr	r3, [pc, #572]	@ (80085a0 <receive_signal_handling+0x250>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b01      	cmp	r3, #1
 8008366:	f040 81f2 	bne.w	800874e <receive_signal_handling+0x3fe>
		if (start_flag <= 1) start_flag++;
 800836a:	4b8e      	ldr	r3, [pc, #568]	@ (80085a4 <receive_signal_handling+0x254>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d806      	bhi.n	8008380 <receive_signal_handling+0x30>
 8008372:	4b8c      	ldr	r3, [pc, #560]	@ (80085a4 <receive_signal_handling+0x254>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	3301      	adds	r3, #1
 8008378:	b2da      	uxtb	r2, r3
 800837a:	4b8a      	ldr	r3, [pc, #552]	@ (80085a4 <receive_signal_handling+0x254>)
 800837c:	701a      	strb	r2, [r3, #0]
					break;
			}
		}
	}
	//__enable_irq();
}
 800837e:	e1e6      	b.n	800874e <receive_signal_handling+0x3fe>
			switch (state) {
 8008380:	4b89      	ldr	r3, [pc, #548]	@ (80085a8 <receive_signal_handling+0x258>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	3b01      	subs	r3, #1
 8008386:	2b05      	cmp	r3, #5
 8008388:	f200 81e1 	bhi.w	800874e <receive_signal_handling+0x3fe>
 800838c:	a201      	add	r2, pc, #4	@ (adr r2, 8008394 <receive_signal_handling+0x44>)
 800838e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008392:	bf00      	nop
 8008394:	080083ad 	.word	0x080083ad
 8008398:	080083e7 	.word	0x080083e7
 800839c:	08008431 	.word	0x08008431
 80083a0:	080084bb 	.word	0x080084bb
 80083a4:	0800853d 	.word	0x0800853d
 80083a8:	080086e9 	.word	0x080086e9
					data[i] = receive_data[0];
 80083ac:	4b7f      	ldr	r3, [pc, #508]	@ (80085ac <receive_signal_handling+0x25c>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	4b7f      	ldr	r3, [pc, #508]	@ (80085b0 <receive_signal_handling+0x260>)
 80083b4:	7819      	ldrb	r1, [r3, #0]
 80083b6:	4b7f      	ldr	r3, [pc, #508]	@ (80085b4 <receive_signal_handling+0x264>)
 80083b8:	5499      	strb	r1, [r3, r2]
					state = read_address;
 80083ba:	4b7b      	ldr	r3, [pc, #492]	@ (80085a8 <receive_signal_handling+0x258>)
 80083bc:	2202      	movs	r2, #2
 80083be:	701a      	strb	r2, [r3, #0]
					line_length = read_line_length(data[i]);
 80083c0:	4b7a      	ldr	r3, [pc, #488]	@ (80085ac <receive_signal_handling+0x25c>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	4b7b      	ldr	r3, [pc, #492]	@ (80085b4 <receive_signal_handling+0x264>)
 80083c8:	5c9b      	ldrb	r3, [r3, r2]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fa2e 	bl	800882c <read_line_length>
 80083d0:	4603      	mov	r3, r0
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	4b78      	ldr	r3, [pc, #480]	@ (80085b8 <receive_signal_handling+0x268>)
 80083d6:	701a      	strb	r2, [r3, #0]
					i++;
 80083d8:	4b74      	ldr	r3, [pc, #464]	@ (80085ac <receive_signal_handling+0x25c>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	3301      	adds	r3, #1
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	4b72      	ldr	r3, [pc, #456]	@ (80085ac <receive_signal_handling+0x25c>)
 80083e2:	701a      	strb	r2, [r3, #0]
					break;
 80083e4:	e1b3      	b.n	800874e <receive_signal_handling+0x3fe>
					data[i] = receive_data[0];
 80083e6:	4b71      	ldr	r3, [pc, #452]	@ (80085ac <receive_signal_handling+0x25c>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	4b70      	ldr	r3, [pc, #448]	@ (80085b0 <receive_signal_handling+0x260>)
 80083ee:	7819      	ldrb	r1, [r3, #0]
 80083f0:	4b70      	ldr	r3, [pc, #448]	@ (80085b4 <receive_signal_handling+0x264>)
 80083f2:	5499      	strb	r1, [r3, r2]
					address += data[i];
 80083f4:	4b6d      	ldr	r3, [pc, #436]	@ (80085ac <receive_signal_handling+0x25c>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	4b6e      	ldr	r3, [pc, #440]	@ (80085b4 <receive_signal_handling+0x264>)
 80083fc:	5c9b      	ldrb	r3, [r3, r2]
 80083fe:	461a      	mov	r2, r3
 8008400:	4b6e      	ldr	r3, [pc, #440]	@ (80085bc <receive_signal_handling+0x26c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4413      	add	r3, r2
 8008406:	4a6d      	ldr	r2, [pc, #436]	@ (80085bc <receive_signal_handling+0x26c>)
 8008408:	6013      	str	r3, [r2, #0]
					address = address << 8;
 800840a:	4b6c      	ldr	r3, [pc, #432]	@ (80085bc <receive_signal_handling+0x26c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	4a6a      	ldr	r2, [pc, #424]	@ (80085bc <receive_signal_handling+0x26c>)
 8008412:	6013      	str	r3, [r2, #0]
					if (i == 2) state = read_recordtype;
 8008414:	4b65      	ldr	r3, [pc, #404]	@ (80085ac <receive_signal_handling+0x25c>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b02      	cmp	r3, #2
 800841a:	d102      	bne.n	8008422 <receive_signal_handling+0xd2>
 800841c:	4b62      	ldr	r3, [pc, #392]	@ (80085a8 <receive_signal_handling+0x258>)
 800841e:	2203      	movs	r2, #3
 8008420:	701a      	strb	r2, [r3, #0]
					i++;
 8008422:	4b62      	ldr	r3, [pc, #392]	@ (80085ac <receive_signal_handling+0x25c>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	3301      	adds	r3, #1
 8008428:	b2da      	uxtb	r2, r3
 800842a:	4b60      	ldr	r3, [pc, #384]	@ (80085ac <receive_signal_handling+0x25c>)
 800842c:	701a      	strb	r2, [r3, #0]
					break;
 800842e:	e18e      	b.n	800874e <receive_signal_handling+0x3fe>
					data[i] = receive_data[0];
 8008430:	4b5e      	ldr	r3, [pc, #376]	@ (80085ac <receive_signal_handling+0x25c>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	4b5e      	ldr	r3, [pc, #376]	@ (80085b0 <receive_signal_handling+0x260>)
 8008438:	7819      	ldrb	r1, [r3, #0]
 800843a:	4b5e      	ldr	r3, [pc, #376]	@ (80085b4 <receive_signal_handling+0x264>)
 800843c:	5499      	strb	r1, [r3, r2]
					if (data[i] == 0) data_type = 0;
 800843e:	4b5b      	ldr	r3, [pc, #364]	@ (80085ac <receive_signal_handling+0x25c>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	4b5b      	ldr	r3, [pc, #364]	@ (80085b4 <receive_signal_handling+0x264>)
 8008446:	5c9b      	ldrb	r3, [r3, r2]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <receive_signal_handling+0x104>
 800844c:	4b5c      	ldr	r3, [pc, #368]	@ (80085c0 <receive_signal_handling+0x270>)
 800844e:	2200      	movs	r2, #0
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	e028      	b.n	80084a6 <receive_signal_handling+0x156>
					else if (data[i] == 4) data_type = 4;
 8008454:	4b55      	ldr	r3, [pc, #340]	@ (80085ac <receive_signal_handling+0x25c>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	4b56      	ldr	r3, [pc, #344]	@ (80085b4 <receive_signal_handling+0x264>)
 800845c:	5c9b      	ldrb	r3, [r3, r2]
 800845e:	2b04      	cmp	r3, #4
 8008460:	d103      	bne.n	800846a <receive_signal_handling+0x11a>
 8008462:	4b57      	ldr	r3, [pc, #348]	@ (80085c0 <receive_signal_handling+0x270>)
 8008464:	2204      	movs	r2, #4
 8008466:	701a      	strb	r2, [r3, #0]
 8008468:	e01d      	b.n	80084a6 <receive_signal_handling+0x156>
					else if (data[i] == 1) {
 800846a:	4b50      	ldr	r3, [pc, #320]	@ (80085ac <receive_signal_handling+0x25c>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	4b50      	ldr	r3, [pc, #320]	@ (80085b4 <receive_signal_handling+0x264>)
 8008472:	5c9b      	ldrb	r3, [r3, r2]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d108      	bne.n	800848a <receive_signal_handling+0x13a>
						int_to_string(567, TxData);
 8008478:	4948      	ldr	r1, [pc, #288]	@ (800859c <receive_signal_handling+0x24c>)
 800847a:	f240 2037 	movw	r0, #567	@ 0x237
 800847e:	f7ff fedf 	bl	8008240 <int_to_string>
						state = read_end;
 8008482:	4b49      	ldr	r3, [pc, #292]	@ (80085a8 <receive_signal_handling+0x258>)
 8008484:	2206      	movs	r2, #6
 8008486:	701a      	strb	r2, [r3, #0]
						break;
 8008488:	e161      	b.n	800874e <receive_signal_handling+0x3fe>
					else if (data[i] == 6){
 800848a:	4b48      	ldr	r3, [pc, #288]	@ (80085ac <receive_signal_handling+0x25c>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	4b48      	ldr	r3, [pc, #288]	@ (80085b4 <receive_signal_handling+0x264>)
 8008492:	5c9b      	ldrb	r3, [r3, r2]
 8008494:	2b06      	cmp	r3, #6
 8008496:	d103      	bne.n	80084a0 <receive_signal_handling+0x150>
						data_type = 6;
 8008498:	4b49      	ldr	r3, [pc, #292]	@ (80085c0 <receive_signal_handling+0x270>)
 800849a:	2206      	movs	r2, #6
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	e002      	b.n	80084a6 <receive_signal_handling+0x156>
					else data_type = 10;
 80084a0:	4b47      	ldr	r3, [pc, #284]	@ (80085c0 <receive_signal_handling+0x270>)
 80084a2:	220a      	movs	r2, #10
 80084a4:	701a      	strb	r2, [r3, #0]
					state = read_datapart;
 80084a6:	4b40      	ldr	r3, [pc, #256]	@ (80085a8 <receive_signal_handling+0x258>)
 80084a8:	2204      	movs	r2, #4
 80084aa:	701a      	strb	r2, [r3, #0]
					i++;
 80084ac:	4b3f      	ldr	r3, [pc, #252]	@ (80085ac <receive_signal_handling+0x25c>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	4b3d      	ldr	r3, [pc, #244]	@ (80085ac <receive_signal_handling+0x25c>)
 80084b6:	701a      	strb	r2, [r3, #0]
					break;
 80084b8:	e149      	b.n	800874e <receive_signal_handling+0x3fe>
					data[i] = receive_data[0];
 80084ba:	4b3c      	ldr	r3, [pc, #240]	@ (80085ac <receive_signal_handling+0x25c>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	4b3b      	ldr	r3, [pc, #236]	@ (80085b0 <receive_signal_handling+0x260>)
 80084c2:	7819      	ldrb	r1, [r3, #0]
 80084c4:	4b3b      	ldr	r3, [pc, #236]	@ (80085b4 <receive_signal_handling+0x264>)
 80084c6:	5499      	strb	r1, [r3, r2]
					if(data_type == 4){
 80084c8:	4b3d      	ldr	r3, [pc, #244]	@ (80085c0 <receive_signal_handling+0x270>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d10f      	bne.n	80084f0 <receive_signal_handling+0x1a0>
					 	main_address += data[i];
 80084d0:	4b36      	ldr	r3, [pc, #216]	@ (80085ac <receive_signal_handling+0x25c>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	4b37      	ldr	r3, [pc, #220]	@ (80085b4 <receive_signal_handling+0x264>)
 80084d8:	5c9b      	ldrb	r3, [r3, r2]
 80084da:	461a      	mov	r2, r3
 80084dc:	4b39      	ldr	r3, [pc, #228]	@ (80085c4 <receive_signal_handling+0x274>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4413      	add	r3, r2
 80084e2:	4a38      	ldr	r2, [pc, #224]	@ (80085c4 <receive_signal_handling+0x274>)
 80084e4:	6013      	str	r3, [r2, #0]
					 	main_address = main_address << 8;
 80084e6:	4b37      	ldr	r3, [pc, #220]	@ (80085c4 <receive_signal_handling+0x274>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	4a35      	ldr	r2, [pc, #212]	@ (80085c4 <receive_signal_handling+0x274>)
 80084ee:	6013      	str	r3, [r2, #0]
					if (data_type == 6){
 80084f0:	4b33      	ldr	r3, [pc, #204]	@ (80085c0 <receive_signal_handling+0x270>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b06      	cmp	r3, #6
 80084f6:	d10f      	bne.n	8008518 <receive_signal_handling+0x1c8>
						key += data[i];
 80084f8:	4b2c      	ldr	r3, [pc, #176]	@ (80085ac <receive_signal_handling+0x25c>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	4b2d      	ldr	r3, [pc, #180]	@ (80085b4 <receive_signal_handling+0x264>)
 8008500:	5c9b      	ldrb	r3, [r3, r2]
 8008502:	461a      	mov	r2, r3
 8008504:	4b30      	ldr	r3, [pc, #192]	@ (80085c8 <receive_signal_handling+0x278>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4413      	add	r3, r2
 800850a:	4a2f      	ldr	r2, [pc, #188]	@ (80085c8 <receive_signal_handling+0x278>)
 800850c:	6013      	str	r3, [r2, #0]
						key = key << 8;
 800850e:	4b2e      	ldr	r3, [pc, #184]	@ (80085c8 <receive_signal_handling+0x278>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	4a2c      	ldr	r2, [pc, #176]	@ (80085c8 <receive_signal_handling+0x278>)
 8008516:	6013      	str	r3, [r2, #0]
					if (i == (line_length - 2)) {
 8008518:	4b24      	ldr	r3, [pc, #144]	@ (80085ac <receive_signal_handling+0x25c>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	4b26      	ldr	r3, [pc, #152]	@ (80085b8 <receive_signal_handling+0x268>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	3b02      	subs	r3, #2
 8008524:	429a      	cmp	r2, r3
 8008526:	d102      	bne.n	800852e <receive_signal_handling+0x1de>
						state = read_checksum;
 8008528:	4b1f      	ldr	r3, [pc, #124]	@ (80085a8 <receive_signal_handling+0x258>)
 800852a:	2205      	movs	r2, #5
 800852c:	701a      	strb	r2, [r3, #0]
					i++;
 800852e:	4b1f      	ldr	r3, [pc, #124]	@ (80085ac <receive_signal_handling+0x25c>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	b2da      	uxtb	r2, r3
 8008536:	4b1d      	ldr	r3, [pc, #116]	@ (80085ac <receive_signal_handling+0x25c>)
 8008538:	701a      	strb	r2, [r3, #0]
					break;
 800853a:	e108      	b.n	800874e <receive_signal_handling+0x3fe>
					data[i] = receive_data[0];
 800853c:	4b1b      	ldr	r3, [pc, #108]	@ (80085ac <receive_signal_handling+0x25c>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	4b1b      	ldr	r3, [pc, #108]	@ (80085b0 <receive_signal_handling+0x260>)
 8008544:	7819      	ldrb	r1, [r3, #0]
 8008546:	4b1b      	ldr	r3, [pc, #108]	@ (80085b4 <receive_signal_handling+0x264>)
 8008548:	5499      	strb	r1, [r3, r2]
					if (check_cs(data[i], i)) {
 800854a:	4b18      	ldr	r3, [pc, #96]	@ (80085ac <receive_signal_handling+0x25c>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	4b18      	ldr	r3, [pc, #96]	@ (80085b4 <receive_signal_handling+0x264>)
 8008552:	5c9b      	ldrb	r3, [r3, r2]
 8008554:	461a      	mov	r2, r3
 8008556:	4b15      	ldr	r3, [pc, #84]	@ (80085ac <receive_signal_handling+0x25c>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	4619      	mov	r1, r3
 800855c:	4610      	mov	r0, r2
 800855e:	f000 f971 	bl	8008844 <check_cs>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80a1 	beq.w	80086ac <receive_signal_handling+0x35c>
						int_to_string(555, TxData); // send 555 for all scenerio
 800856a:	490c      	ldr	r1, [pc, #48]	@ (800859c <receive_signal_handling+0x24c>)
 800856c:	f240 202b 	movw	r0, #555	@ 0x22b
 8008570:	f7ff fe66 	bl	8008240 <int_to_string>
						if (data_type == 6){
 8008574:	4b12      	ldr	r3, [pc, #72]	@ (80085c0 <receive_signal_handling+0x270>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b06      	cmp	r3, #6
 800857a:	d12b      	bne.n	80085d4 <receive_signal_handling+0x284>
							if (key == pref_key) {
 800857c:	4b12      	ldr	r3, [pc, #72]	@ (80085c8 <receive_signal_handling+0x278>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a12      	ldr	r2, [pc, #72]	@ (80085cc <receive_signal_handling+0x27c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d103      	bne.n	800858e <receive_signal_handling+0x23e>
								correct_key = 1;
 8008586:	4b12      	ldr	r3, [pc, #72]	@ (80085d0 <receive_signal_handling+0x280>)
 8008588:	2201      	movs	r2, #1
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	e096      	b.n	80086bc <receive_signal_handling+0x36c>
							else int_to_string(405, TxData);
 800858e:	4903      	ldr	r1, [pc, #12]	@ (800859c <receive_signal_handling+0x24c>)
 8008590:	f240 1095 	movw	r0, #405	@ 0x195
 8008594:	f7ff fe54 	bl	8008240 <int_to_string>
 8008598:	e090      	b.n	80086bc <receive_signal_handling+0x36c>
 800859a:	bf00      	nop
 800859c:	20000124 	.word	0x20000124
 80085a0:	20000121 	.word	0x20000121
 80085a4:	2000013c 	.word	0x2000013c
 80085a8:	20000008 	.word	0x20000008
 80085ac:	20000145 	.word	0x20000145
 80085b0:	20000120 	.word	0x20000120
 80085b4:	20000148 	.word	0x20000148
 80085b8:	200001ac 	.word	0x200001ac
 80085bc:	200001b4 	.word	0x200001b4
 80085c0:	20000009 	.word	0x20000009
 80085c4:	200001b0 	.word	0x200001b0
 80085c8:	20000140 	.word	0x20000140
 80085cc:	12345600 	.word	0x12345600
 80085d0:	20000144 	.word	0x20000144
						else if (data_type == 0 && correct_key == 1){
 80085d4:	4b60      	ldr	r3, [pc, #384]	@ (8008758 <receive_signal_handling+0x408>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d16f      	bne.n	80086bc <receive_signal_handling+0x36c>
 80085dc:	4b5f      	ldr	r3, [pc, #380]	@ (800875c <receive_signal_handling+0x40c>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d16b      	bne.n	80086bc <receive_signal_handling+0x36c>
							HAL_FLASH_Unlock();
 80085e4:	f000 ff60 	bl	80094a8 <HAL_FLASH_Unlock>
							address = main_address << 8 | (address >> 8) ; // checked
 80085e8:	4b5d      	ldr	r3, [pc, #372]	@ (8008760 <receive_signal_handling+0x410>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	021a      	lsls	r2, r3, #8
 80085ee:	4b5d      	ldr	r3, [pc, #372]	@ (8008764 <receive_signal_handling+0x414>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	4313      	orrs	r3, r2
 80085f6:	4a5b      	ldr	r2, [pc, #364]	@ (8008764 <receive_signal_handling+0x414>)
 80085f8:	6013      	str	r3, [r2, #0]
							j = 0;
 80085fa:	4b5b      	ldr	r3, [pc, #364]	@ (8008768 <receive_signal_handling+0x418>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	701a      	strb	r2, [r3, #0]
							for (int m = 0; m < data[0]; m++) {
 8008600:	2300      	movs	r3, #0
 8008602:	607b      	str	r3, [r7, #4]
 8008604:	e049      	b.n	800869a <receive_signal_handling+0x34a>
								read_data[j] = data[m+4];
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3304      	adds	r3, #4
 800860a:	4a57      	ldr	r2, [pc, #348]	@ (8008768 <receive_signal_handling+0x418>)
 800860c:	7812      	ldrb	r2, [r2, #0]
 800860e:	4611      	mov	r1, r2
 8008610:	4a56      	ldr	r2, [pc, #344]	@ (800876c <receive_signal_handling+0x41c>)
 8008612:	5cd2      	ldrb	r2, [r2, r3]
 8008614:	4b56      	ldr	r3, [pc, #344]	@ (8008770 <receive_signal_handling+0x420>)
 8008616:	545a      	strb	r2, [r3, r1]
								j++;
 8008618:	4b53      	ldr	r3, [pc, #332]	@ (8008768 <receive_signal_handling+0x418>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	3301      	adds	r3, #1
 800861e:	b2da      	uxtb	r2, r3
 8008620:	4b51      	ldr	r3, [pc, #324]	@ (8008768 <receive_signal_handling+0x418>)
 8008622:	701a      	strb	r2, [r3, #0]
								if(j == 4) {
 8008624:	4b50      	ldr	r3, [pc, #320]	@ (8008768 <receive_signal_handling+0x418>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b04      	cmp	r3, #4
 800862a:	d133      	bne.n	8008694 <receive_signal_handling+0x344>
									result = (read_data[3] << 24) | (read_data[2] << 16) | (read_data[1] << 8) | read_data[0];
 800862c:	4b50      	ldr	r3, [pc, #320]	@ (8008770 <receive_signal_handling+0x420>)
 800862e:	78db      	ldrb	r3, [r3, #3]
 8008630:	061a      	lsls	r2, r3, #24
 8008632:	4b4f      	ldr	r3, [pc, #316]	@ (8008770 <receive_signal_handling+0x420>)
 8008634:	789b      	ldrb	r3, [r3, #2]
 8008636:	041b      	lsls	r3, r3, #16
 8008638:	431a      	orrs	r2, r3
 800863a:	4b4d      	ldr	r3, [pc, #308]	@ (8008770 <receive_signal_handling+0x420>)
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	4313      	orrs	r3, r2
 8008642:	4a4b      	ldr	r2, [pc, #300]	@ (8008770 <receive_signal_handling+0x420>)
 8008644:	7812      	ldrb	r2, [r2, #0]
 8008646:	4313      	orrs	r3, r2
 8008648:	461a      	mov	r2, r3
 800864a:	4b4a      	ldr	r3, [pc, #296]	@ (8008774 <receive_signal_handling+0x424>)
 800864c:	601a      	str	r2, [r3, #0]
									HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, result);
 800864e:	4b45      	ldr	r3, [pc, #276]	@ (8008764 <receive_signal_handling+0x414>)
 8008650:	6819      	ldr	r1, [r3, #0]
 8008652:	4b48      	ldr	r3, [pc, #288]	@ (8008774 <receive_signal_handling+0x424>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	461c      	mov	r4, r3
 800865a:	4615      	mov	r5, r2
 800865c:	4622      	mov	r2, r4
 800865e:	462b      	mov	r3, r5
 8008660:	2002      	movs	r0, #2
 8008662:	f000 feb1 	bl	80093c8 <HAL_FLASH_Program>
									CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 8008666:	4b44      	ldr	r3, [pc, #272]	@ (8008778 <receive_signal_handling+0x428>)
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	4a43      	ldr	r2, [pc, #268]	@ (8008778 <receive_signal_handling+0x428>)
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	6113      	str	r3, [r2, #16]
									CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 8008672:	4b41      	ldr	r3, [pc, #260]	@ (8008778 <receive_signal_handling+0x428>)
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	4a40      	ldr	r2, [pc, #256]	@ (8008778 <receive_signal_handling+0x428>)
 8008678:	f023 0302 	bic.w	r3, r3, #2
 800867c:	6113      	str	r3, [r2, #16]
									address+= 0x04;
 800867e:	4b39      	ldr	r3, [pc, #228]	@ (8008764 <receive_signal_handling+0x414>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3304      	adds	r3, #4
 8008684:	4a37      	ldr	r2, [pc, #220]	@ (8008764 <receive_signal_handling+0x414>)
 8008686:	6013      	str	r3, [r2, #0]
									result = 0;
 8008688:	4b3a      	ldr	r3, [pc, #232]	@ (8008774 <receive_signal_handling+0x424>)
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
									j = 0;
 800868e:	4b36      	ldr	r3, [pc, #216]	@ (8008768 <receive_signal_handling+0x418>)
 8008690:	2200      	movs	r2, #0
 8008692:	701a      	strb	r2, [r3, #0]
							for (int m = 0; m < data[0]; m++) {
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3301      	adds	r3, #1
 8008698:	607b      	str	r3, [r7, #4]
 800869a:	4b34      	ldr	r3, [pc, #208]	@ (800876c <receive_signal_handling+0x41c>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4293      	cmp	r3, r2
 80086a4:	dbaf      	blt.n	8008606 <receive_signal_handling+0x2b6>
							HAL_FLASH_Lock();
 80086a6:	f000 ff25 	bl	80094f4 <HAL_FLASH_Lock>
 80086aa:	e007      	b.n	80086bc <receive_signal_handling+0x36c>
						cs_flag = 0; // 0 = fail
 80086ac:	4b33      	ldr	r3, [pc, #204]	@ (800877c <receive_signal_handling+0x42c>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
						int_to_string(404, TxData);
 80086b2:	4933      	ldr	r1, [pc, #204]	@ (8008780 <receive_signal_handling+0x430>)
 80086b4:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 80086b8:	f7ff fdc2 	bl	8008240 <int_to_string>
					data_type = 10;
 80086bc:	4b26      	ldr	r3, [pc, #152]	@ (8008758 <receive_signal_handling+0x408>)
 80086be:	220a      	movs	r2, #10
 80086c0:	701a      	strb	r2, [r3, #0]
					cs_flag = 0;
 80086c2:	4b2e      	ldr	r3, [pc, #184]	@ (800877c <receive_signal_handling+0x42c>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	701a      	strb	r2, [r3, #0]
					state = read_bytecount;
 80086c8:	4b2e      	ldr	r3, [pc, #184]	@ (8008784 <receive_signal_handling+0x434>)
 80086ca:	2201      	movs	r2, #1
 80086cc:	701a      	strb	r2, [r3, #0]
					i = 0;
 80086ce:	4b2e      	ldr	r3, [pc, #184]	@ (8008788 <receive_signal_handling+0x438>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	701a      	strb	r2, [r3, #0]
					j = 0;
 80086d4:	4b24      	ldr	r3, [pc, #144]	@ (8008768 <receive_signal_handling+0x418>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	701a      	strb	r2, [r3, #0]
					address = 0;
 80086da:	4b22      	ldr	r3, [pc, #136]	@ (8008764 <receive_signal_handling+0x414>)
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
					start_flag = 1;
 80086e0:	4b2a      	ldr	r3, [pc, #168]	@ (800878c <receive_signal_handling+0x43c>)
 80086e2:	2201      	movs	r2, #1
 80086e4:	701a      	strb	r2, [r3, #0]
					break;
 80086e6:	e032      	b.n	800874e <receive_signal_handling+0x3fe>
					uploading_flag = 0;
 80086e8:	4b29      	ldr	r3, [pc, #164]	@ (8008790 <receive_signal_handling+0x440>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	701a      	strb	r2, [r3, #0]
					mem_erased_flag = 0;
 80086ee:	4b29      	ldr	r3, [pc, #164]	@ (8008794 <receive_signal_handling+0x444>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	701a      	strb	r2, [r3, #0]
					i = 0;
 80086f4:	4b24      	ldr	r3, [pc, #144]	@ (8008788 <receive_signal_handling+0x438>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
					j = 0;
 80086fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008768 <receive_signal_handling+0x418>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]
					state = read_bytecount;
 8008700:	4b20      	ldr	r3, [pc, #128]	@ (8008784 <receive_signal_handling+0x434>)
 8008702:	2201      	movs	r2, #1
 8008704:	701a      	strb	r2, [r3, #0]
					line_length = 0;
 8008706:	4b24      	ldr	r3, [pc, #144]	@ (8008798 <receive_signal_handling+0x448>)
 8008708:	2200      	movs	r2, #0
 800870a:	701a      	strb	r2, [r3, #0]
					cs_flag = 0;
 800870c:	4b1b      	ldr	r3, [pc, #108]	@ (800877c <receive_signal_handling+0x42c>)
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
					data_type = 10;
 8008712:	4b11      	ldr	r3, [pc, #68]	@ (8008758 <receive_signal_handling+0x408>)
 8008714:	220a      	movs	r2, #10
 8008716:	701a      	strb	r2, [r3, #0]
					main_address = 0;
 8008718:	4b11      	ldr	r3, [pc, #68]	@ (8008760 <receive_signal_handling+0x410>)
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]
					address = 0;
 800871e:	4b11      	ldr	r3, [pc, #68]	@ (8008764 <receive_signal_handling+0x414>)
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]
					UPDATE_FLAG_ADDRESS = 0x0801F000;
 8008724:	4b1d      	ldr	r3, [pc, #116]	@ (800879c <receive_signal_handling+0x44c>)
 8008726:	4a1e      	ldr	r2, [pc, #120]	@ (80087a0 <receive_signal_handling+0x450>)
 8008728:	601a      	str	r2, [r3, #0]
					WRITE_ADDRESS = 0x08010000;
 800872a:	4b1e      	ldr	r3, [pc, #120]	@ (80087a4 <receive_signal_handling+0x454>)
 800872c:	4a1e      	ldr	r2, [pc, #120]	@ (80087a8 <receive_signal_handling+0x458>)
 800872e:	601a      	str	r2, [r3, #0]
					result = 0;
 8008730:	4b10      	ldr	r3, [pc, #64]	@ (8008774 <receive_signal_handling+0x424>)
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
					start_flag = 0;
 8008736:	4b15      	ldr	r3, [pc, #84]	@ (800878c <receive_signal_handling+0x43c>)
 8008738:	2200      	movs	r2, #0
 800873a:	701a      	strb	r2, [r3, #0]
					correct_key = 0;
 800873c:	4b07      	ldr	r3, [pc, #28]	@ (800875c <receive_signal_handling+0x40c>)
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
					int_to_string(555, TxData);
 8008742:	490f      	ldr	r1, [pc, #60]	@ (8008780 <receive_signal_handling+0x430>)
 8008744:	f240 202b 	movw	r0, #555	@ 0x22b
 8008748:	f7ff fd7a 	bl	8008240 <int_to_string>
					break;
 800874c:	bf00      	nop
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bdb0      	pop	{r4, r5, r7, pc}
 8008756:	bf00      	nop
 8008758:	20000009 	.word	0x20000009
 800875c:	20000144 	.word	0x20000144
 8008760:	200001b0 	.word	0x200001b0
 8008764:	200001b4 	.word	0x200001b4
 8008768:	20000146 	.word	0x20000146
 800876c:	20000148 	.word	0x20000148
 8008770:	20000138 	.word	0x20000138
 8008774:	20000134 	.word	0x20000134
 8008778:	40022000 	.word	0x40022000
 800877c:	200001ad 	.word	0x200001ad
 8008780:	20000124 	.word	0x20000124
 8008784:	20000008 	.word	0x20000008
 8008788:	20000145 	.word	0x20000145
 800878c:	2000013c 	.word	0x2000013c
 8008790:	200001ae 	.word	0x200001ae
 8008794:	20000121 	.word	0x20000121
 8008798:	200001ac 	.word	0x200001ac
 800879c:	20000000 	.word	0x20000000
 80087a0:	0801f000 	.word	0x0801f000
 80087a4:	20000004 	.word	0x20000004
 80087a8:	08010000 	.word	0x08010000

080087ac <erase_memory>:

void erase_memory(void){
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0
	if (mem_erased_flag != 1){ // CLEAR IMAGE
 80087b0:	4b18      	ldr	r3, [pc, #96]	@ (8008814 <erase_memory+0x68>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d02a      	beq.n	800880e <erase_memory+0x62>
		//__disable_irq();
		mem_erased_flag = 1;
 80087b8:	4b16      	ldr	r3, [pc, #88]	@ (8008814 <erase_memory+0x68>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80087be:	2201      	movs	r2, #1
 80087c0:	2180      	movs	r1, #128	@ 0x80
 80087c2:	4815      	ldr	r0, [pc, #84]	@ (8008818 <erase_memory+0x6c>)
 80087c4:	f001 f913 	bl	80099ee <HAL_GPIO_WritePin>


		HAL_FLASH_Unlock();
 80087c8:	f000 fe6e 	bl	80094a8 <HAL_FLASH_Unlock>
		while(WRITE_ADDRESS < 0x08018000){
 80087cc:	e010      	b.n	80087f0 <erase_memory+0x44>
			FLASH_PageErase(WRITE_ADDRESS);
 80087ce:	4b13      	ldr	r3, [pc, #76]	@ (800881c <erase_memory+0x70>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 ff50 	bl	8009678 <FLASH_PageErase>
			CLEAR_BIT (FLASH->CR, (FLASH_CR_PER));
 80087d8:	4b11      	ldr	r3, [pc, #68]	@ (8008820 <erase_memory+0x74>)
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	4a10      	ldr	r2, [pc, #64]	@ (8008820 <erase_memory+0x74>)
 80087de:	f023 0302 	bic.w	r3, r3, #2
 80087e2:	6113      	str	r3, [r2, #16]
			WRITE_ADDRESS += 0x00000400; //1 PAGE
 80087e4:	4b0d      	ldr	r3, [pc, #52]	@ (800881c <erase_memory+0x70>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ec:	4a0b      	ldr	r2, [pc, #44]	@ (800881c <erase_memory+0x70>)
 80087ee:	6013      	str	r3, [r2, #0]
		while(WRITE_ADDRESS < 0x08018000){
 80087f0:	4b0a      	ldr	r3, [pc, #40]	@ (800881c <erase_memory+0x70>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008824 <erase_memory+0x78>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d3e9      	bcc.n	80087ce <erase_memory+0x22>
		}
		HAL_FLASH_Lock();
 80087fa:	f000 fe7b 	bl	80094f4 <HAL_FLASH_Lock>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80087fe:	2200      	movs	r2, #0
 8008800:	2180      	movs	r1, #128	@ 0x80
 8008802:	4805      	ldr	r0, [pc, #20]	@ (8008818 <erase_memory+0x6c>)
 8008804:	f001 f8f3 	bl	80099ee <HAL_GPIO_WritePin>
		WRITE_ADDRESS = 0x08010000; // return cursor to the beginning
 8008808:	4b04      	ldr	r3, [pc, #16]	@ (800881c <erase_memory+0x70>)
 800880a:	4a07      	ldr	r2, [pc, #28]	@ (8008828 <erase_memory+0x7c>)
 800880c:	601a      	str	r2, [r3, #0]
		//__enable_irq();
	}
}
 800880e:	bf00      	nop
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20000121 	.word	0x20000121
 8008818:	40010800 	.word	0x40010800
 800881c:	20000004 	.word	0x20000004
 8008820:	40022000 	.word	0x40022000
 8008824:	08018000 	.word	0x08018000
 8008828:	08010000 	.word	0x08010000

0800882c <read_line_length>:


uint32_t read_line_length(uint32_t len) {
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  //datacount = 1 Bytes, address = 2, recordtype = 1, cs = 1
  return 1 + 2 + 1 + 1 + len;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3305      	adds	r3, #5
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr
	...

08008844 <check_cs>:

uint8_t check_cs(int cs, int line_length) {
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  int total_cs = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < line_length; i++) {
 8008852:	2300      	movs	r3, #0
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	e00a      	b.n	800886e <check_cs+0x2a>
    total_cs += data[i];
 8008858:	4a14      	ldr	r2, [pc, #80]	@ (80088ac <check_cs+0x68>)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4413      	add	r3, r2
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	4413      	add	r3, r2
 8008866:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < line_length; i++) {
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	3301      	adds	r3, #1
 800886c:	613b      	str	r3, [r7, #16]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	dbf0      	blt.n	8008858 <check_cs+0x14>
  }
  int calc_cs = (256 - total_cs % 256) % 256;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	425a      	negs	r2, r3
 800887a:	b2db      	uxtb	r3, r3
 800887c:	b2d2      	uxtb	r2, r2
 800887e:	bf58      	it	pl
 8008880:	4253      	negpl	r3, r2
 8008882:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8008886:	425a      	negs	r2, r3
 8008888:	b2db      	uxtb	r3, r3
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	bf58      	it	pl
 800888e:	4253      	negpl	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]
  if (calc_cs == cs) return 1;
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	429a      	cmp	r2, r3
 8008898:	d101      	bne.n	800889e <check_cs+0x5a>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <check_cs+0x5c>
  else return 0;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bc80      	pop	{r7}
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	20000148 	.word	0x20000148

080088b0 <HAL_I2C_ListenCpltCallback>:



void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 fb05 	bl	8009ec8 <HAL_I2C_EnableListen_IT>
}
 80088be:	bf00      	nop
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
 80088d4:	4613      	mov	r3, r2
 80088d6:	803b      	strh	r3, [r7, #0]

  if (TransferDirection  == I2C_DIRECTION_RECEIVE){
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <HAL_I2C_AddrCallback+0x24>
	  HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, TxData, TXDATA_SIZE, I2C_FIRST_FRAME);
 80088de:	2301      	movs	r3, #1
 80088e0:	220a      	movs	r2, #10
 80088e2:	4922      	ldr	r1, [pc, #136]	@ (800896c <HAL_I2C_AddrCallback+0xa4>)
 80088e4:	4822      	ldr	r0, [pc, #136]	@ (8008970 <HAL_I2C_AddrCallback+0xa8>)
 80088e6:	f001 fa0b 	bl	8009d00 <HAL_I2C_Slave_Seq_Transmit_IT>
	  }
	  else if (receive_data[0] == 245 && uploading_flag == 0){
		  raise_gotoUpApp_flag = 1;
	  }
  }
}
 80088ea:	e03b      	b.n	8008964 <HAL_I2C_AddrCallback+0x9c>
  } else if (TransferDirection  == I2C_DIRECTION_TRANSMIT){
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d138      	bne.n	8008964 <HAL_I2C_AddrCallback+0x9c>
	  HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, receive_data, 1, I2C_FIRST_AND_LAST_FRAME);
 80088f2:	2308      	movs	r3, #8
 80088f4:	2201      	movs	r2, #1
 80088f6:	491f      	ldr	r1, [pc, #124]	@ (8008974 <HAL_I2C_AddrCallback+0xac>)
 80088f8:	481d      	ldr	r0, [pc, #116]	@ (8008970 <HAL_I2C_AddrCallback+0xa8>)
 80088fa:	f001 fa73 	bl	8009de4 <HAL_I2C_Slave_Seq_Receive_IT>
	  if (receive_data[0] == 243 && mem_erased_flag != 1) {
 80088fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008974 <HAL_I2C_AddrCallback+0xac>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2bf3      	cmp	r3, #243	@ 0xf3
 8008904:	d10c      	bne.n	8008920 <HAL_I2C_AddrCallback+0x58>
 8008906:	4b1c      	ldr	r3, [pc, #112]	@ (8008978 <HAL_I2C_AddrCallback+0xb0>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d008      	beq.n	8008920 <HAL_I2C_AddrCallback+0x58>
		  erase_flag = 1;
 800890e:	4b1b      	ldr	r3, [pc, #108]	@ (800897c <HAL_I2C_AddrCallback+0xb4>)
 8008910:	2201      	movs	r2, #1
 8008912:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8008914:	2201      	movs	r2, #1
 8008916:	2180      	movs	r1, #128	@ 0x80
 8008918:	4819      	ldr	r0, [pc, #100]	@ (8008980 <HAL_I2C_AddrCallback+0xb8>)
 800891a:	f001 f868 	bl	80099ee <HAL_GPIO_WritePin>
 800891e:	e021      	b.n	8008964 <HAL_I2C_AddrCallback+0x9c>
	  else if (receive_data[0] == 242 || uploading_flag == 1){
 8008920:	4b14      	ldr	r3, [pc, #80]	@ (8008974 <HAL_I2C_AddrCallback+0xac>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2bf2      	cmp	r3, #242	@ 0xf2
 8008926:	d003      	beq.n	8008930 <HAL_I2C_AddrCallback+0x68>
 8008928:	4b16      	ldr	r3, [pc, #88]	@ (8008984 <HAL_I2C_AddrCallback+0xbc>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d103      	bne.n	8008938 <HAL_I2C_AddrCallback+0x70>
	  	  uploading_data  = 1;
 8008930:	4b15      	ldr	r3, [pc, #84]	@ (8008988 <HAL_I2C_AddrCallback+0xc0>)
 8008932:	2201      	movs	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
 8008936:	e015      	b.n	8008964 <HAL_I2C_AddrCallback+0x9c>
	  else if (receive_data[0] == 244 && uploading_flag == 0){
 8008938:	4b0e      	ldr	r3, [pc, #56]	@ (8008974 <HAL_I2C_AddrCallback+0xac>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2bf4      	cmp	r3, #244	@ 0xf4
 800893e:	d105      	bne.n	800894c <HAL_I2C_AddrCallback+0x84>
 8008940:	4b10      	ldr	r3, [pc, #64]	@ (8008984 <HAL_I2C_AddrCallback+0xbc>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <HAL_I2C_AddrCallback+0x84>
		  NVIC_SystemReset();
 8008948:	f7ff fca0 	bl	800828c <__NVIC_SystemReset>
	  else if (receive_data[0] == 245 && uploading_flag == 0){
 800894c:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <HAL_I2C_AddrCallback+0xac>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2bf5      	cmp	r3, #245	@ 0xf5
 8008952:	d107      	bne.n	8008964 <HAL_I2C_AddrCallback+0x9c>
 8008954:	4b0b      	ldr	r3, [pc, #44]	@ (8008984 <HAL_I2C_AddrCallback+0xbc>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d103      	bne.n	8008964 <HAL_I2C_AddrCallback+0x9c>
		  raise_gotoUpApp_flag = 1;
 800895c:	4b0b      	ldr	r3, [pc, #44]	@ (800898c <HAL_I2C_AddrCallback+0xc4>)
 800895e:	2201      	movs	r2, #1
 8008960:	701a      	strb	r2, [r3, #0]
}
 8008962:	e7ff      	b.n	8008964 <HAL_I2C_AddrCallback+0x9c>
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20000124 	.word	0x20000124
 8008970:	20000084 	.word	0x20000084
 8008974:	20000120 	.word	0x20000120
 8008978:	20000121 	.word	0x20000121
 800897c:	200001b9 	.word	0x200001b9
 8008980:	40010800 	.word	0x40010800
 8008984:	200001ae 	.word	0x200001ae
 8008988:	200001b8 	.word	0x200001b8
 800898c:	200001ba 	.word	0x200001ba

08008990 <main>:

/* USER CODE END 0 */

int main(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008994:	f000 fb22 	bl	8008fdc <HAL_Init>
  SystemClock_Config();
 8008998:	f000 f888 	bl	8008aac <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
 800899c:	b662      	cpsie	i
}
 800899e:	bf00      	nop
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80089a0:	f000 f944 	bl	8008c2c <MX_GPIO_Init>
  MX_TIM2_Init();
 80089a4:	f000 f8f6 	bl	8008b94 <MX_TIM2_Init>
  MX_I2C1_Init();
 80089a8:	f000 f8c6 	bl	8008b38 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80089ac:	4833      	ldr	r0, [pc, #204]	@ (8008a7c <main+0xec>)
 80089ae:	f003 fbb5 	bl	800c11c <HAL_TIM_Base_Start>
  if (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 80089b2:	4833      	ldr	r0, [pc, #204]	@ (8008a80 <main+0xf0>)
 80089b4:	f001 fa88 	bl	8009ec8 <HAL_I2C_EnableListen_IT>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <main+0x32>
	  Error_Handler();
 80089be:	f000 f9d1 	bl	8008d64 <Error_Handler>
  }
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80089c2:	482f      	ldr	r0, [pc, #188]	@ (8008a80 <main+0xf0>)
 80089c4:	f001 fab5 	bl	8009f32 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if (uploading_flag == 0){
 80089c8:	4b2e      	ldr	r3, [pc, #184]	@ (8008a84 <main+0xf4>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d110      	bne.n	80089f2 <main+0x62>
		  weight = getHX712(1);
 80089d0:	2001      	movs	r0, #1
 80089d2:	f7ff fbbb 	bl	800814c <getHX712>
 80089d6:	4603      	mov	r3, r0
 80089d8:	4a2b      	ldr	r2, [pc, #172]	@ (8008a88 <main+0xf8>)
 80089da:	6013      	str	r3, [r2, #0]
		  int_to_string(weight, TxData);
 80089dc:	4b2a      	ldr	r3, [pc, #168]	@ (8008a88 <main+0xf8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	492a      	ldr	r1, [pc, #168]	@ (8008a8c <main+0xfc>)
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff fc2c 	bl	8008240 <int_to_string>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80089e8:	2200      	movs	r2, #0
 80089ea:	2180      	movs	r1, #128	@ 0x80
 80089ec:	4828      	ldr	r0, [pc, #160]	@ (8008a90 <main+0x100>)
 80089ee:	f000 fffe 	bl	80099ee <HAL_GPIO_WritePin>
	  }


	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET){
 80089f2:	2101      	movs	r1, #1
 80089f4:	4827      	ldr	r0, [pc, #156]	@ (8008a94 <main+0x104>)
 80089f6:	f000 ffe3 	bl	80099c0 <HAL_GPIO_ReadPin>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d101      	bne.n	8008a04 <main+0x74>
		  erase_memory();
 8008a00:	f7ff fed4 	bl	80087ac <erase_memory>
	  }

	  if (erase_flag == 1){
 8008a04:	4b24      	ldr	r3, [pc, #144]	@ (8008a98 <main+0x108>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d104      	bne.n	8008a16 <main+0x86>
		  erase_memory();
 8008a0c:	f7ff fece 	bl	80087ac <erase_memory>
		  erase_flag = 0;
 8008a10:	4b21      	ldr	r3, [pc, #132]	@ (8008a98 <main+0x108>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
	  }

	  if (uploading_data == 1) {
 8008a16:	4b21      	ldr	r3, [pc, #132]	@ (8008a9c <main+0x10c>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d10b      	bne.n	8008a36 <main+0xa6>
		  uploading_flag = 1;
 8008a1e:	4b19      	ldr	r3, [pc, #100]	@ (8008a84 <main+0xf4>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	701a      	strb	r2, [r3, #0]
		  receive_signal_handling();
 8008a24:	f7ff fc94 	bl	8008350 <receive_signal_handling>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8008a28:	2180      	movs	r1, #128	@ 0x80
 8008a2a:	4819      	ldr	r0, [pc, #100]	@ (8008a90 <main+0x100>)
 8008a2c:	f000 fff7 	bl	8009a1e <HAL_GPIO_TogglePin>
		  uploading_data = 0;
 8008a30:	4b1a      	ldr	r3, [pc, #104]	@ (8008a9c <main+0x10c>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	701a      	strb	r2, [r3, #0]
	  }

	  //rise the mem_erased_flag
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET || raise_gotoUpApp_flag == 1){
 8008a36:	2102      	movs	r1, #2
 8008a38:	4816      	ldr	r0, [pc, #88]	@ (8008a94 <main+0x104>)
 8008a3a:	f000 ffc1 	bl	80099c0 <HAL_GPIO_ReadPin>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d003      	beq.n	8008a4c <main+0xbc>
 8008a44:	4b16      	ldr	r3, [pc, #88]	@ (8008aa0 <main+0x110>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d1bd      	bne.n	80089c8 <main+0x38>
		  HAL_FLASH_Unlock();
 8008a4c:	f000 fd2c 	bl	80094a8 <HAL_FLASH_Unlock>
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, UPDATE_FLAG_ADDRESS, 0x01);
 8008a50:	4b14      	ldr	r3, [pc, #80]	@ (8008aa4 <main+0x114>)
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	f04f 0201 	mov.w	r2, #1
 8008a58:	f04f 0300 	mov.w	r3, #0
 8008a5c:	2002      	movs	r0, #2
 8008a5e:	f000 fcb3 	bl	80093c8 <HAL_FLASH_Program>
		  CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));
 8008a62:	4b11      	ldr	r3, [pc, #68]	@ (8008aa8 <main+0x118>)
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	4a10      	ldr	r2, [pc, #64]	@ (8008aa8 <main+0x118>)
 8008a68:	f023 0301 	bic.w	r3, r3, #1
 8008a6c:	6113      	str	r3, [r2, #16]
		  HAL_FLASH_Lock();
 8008a6e:	f000 fd41 	bl	80094f4 <HAL_FLASH_Lock>
		  raise_gotoUpApp_flag = 0;
 8008a72:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa0 <main+0x110>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	701a      	strb	r2, [r3, #0]
	  if (uploading_flag == 0){
 8008a78:	e7a6      	b.n	80089c8 <main+0x38>
 8008a7a:	bf00      	nop
 8008a7c:	200000d8 	.word	0x200000d8
 8008a80:	20000084 	.word	0x20000084
 8008a84:	200001ae 	.word	0x200001ae
 8008a88:	20000130 	.word	0x20000130
 8008a8c:	20000124 	.word	0x20000124
 8008a90:	40010800 	.word	0x40010800
 8008a94:	40010c00 	.word	0x40010c00
 8008a98:	200001b9 	.word	0x200001b9
 8008a9c:	200001b8 	.word	0x200001b8
 8008aa0:	200001ba 	.word	0x200001ba
 8008aa4:	20000000 	.word	0x20000000
 8008aa8:	40022000 	.word	0x40022000

08008aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b090      	sub	sp, #64	@ 0x40
 8008ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ab2:	f107 0318 	add.w	r3, r7, #24
 8008ab6:	2228      	movs	r2, #40	@ 0x28
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f003 fdb6 	bl	800c62c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008ac0:	1d3b      	adds	r3, r7, #4
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	605a      	str	r2, [r3, #4]
 8008ac8:	609a      	str	r2, [r3, #8]
 8008aca:	60da      	str	r2, [r3, #12]
 8008acc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008ad2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008ad6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008adc:	2301      	movs	r3, #1
 8008ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008aea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008af0:	f107 0318 	add.w	r3, r7, #24
 8008af4:	4618      	mov	r0, r3
 8008af6:	f002 fec5 	bl	800b884 <HAL_RCC_OscConfig>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008b00:	f000 f930 	bl	8008d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b04:	230f      	movs	r3, #15
 8008b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008b10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008b16:	2300      	movs	r3, #0
 8008b18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008b1a:	1d3b      	adds	r3, r7, #4
 8008b1c:	2102      	movs	r1, #2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f003 f932 	bl	800bd88 <HAL_RCC_ClockConfig>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008b2a:	f000 f91b 	bl	8008d64 <Error_Handler>
  }
}
 8008b2e:	bf00      	nop
 8008b30:	3740      	adds	r7, #64	@ 0x40
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008b3c:	4b12      	ldr	r3, [pc, #72]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b3e:	4a13      	ldr	r2, [pc, #76]	@ (8008b8c <MX_I2C1_Init+0x54>)
 8008b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008b42:	4b11      	ldr	r3, [pc, #68]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b44:	4a12      	ldr	r2, [pc, #72]	@ (8008b90 <MX_I2C1_Init+0x58>)
 8008b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008b48:	4b0f      	ldr	r3, [pc, #60]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 8008b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b50:	2210      	movs	r2, #16
 8008b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b54:	4b0c      	ldr	r3, [pc, #48]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008b62:	4b09      	ldr	r3, [pc, #36]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b68:	4b07      	ldr	r3, [pc, #28]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8008b6e:	4b06      	ldr	r3, [pc, #24]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b70:	2280      	movs	r2, #128	@ 0x80
 8008b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008b74:	4804      	ldr	r0, [pc, #16]	@ (8008b88 <MX_I2C1_Init+0x50>)
 8008b76:	f000 ff6b 	bl	8009a50 <HAL_I2C_Init>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008b80:	f000 f8f0 	bl	8008d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008b84:	bf00      	nop
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20000084 	.word	0x20000084
 8008b8c:	40005400 	.word	0x40005400
 8008b90:	000186a0 	.word	0x000186a0

08008b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b9a:	f107 0308 	add.w	r3, r7, #8
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	605a      	str	r2, [r3, #4]
 8008ba4:	609a      	str	r2, [r3, #8]
 8008ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ba8:	463b      	mov	r3, r7
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c28 <MX_TIM2_Init+0x94>)
 8008bb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8008bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c28 <MX_TIM2_Init+0x94>)
 8008bba:	2247      	movs	r2, #71	@ 0x47
 8008bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8008c28 <MX_TIM2_Init+0x94>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008bc4:	4b18      	ldr	r3, [pc, #96]	@ (8008c28 <MX_TIM2_Init+0x94>)
 8008bc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bcc:	4b16      	ldr	r3, [pc, #88]	@ (8008c28 <MX_TIM2_Init+0x94>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bd2:	4b15      	ldr	r3, [pc, #84]	@ (8008c28 <MX_TIM2_Init+0x94>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008bd8:	4813      	ldr	r0, [pc, #76]	@ (8008c28 <MX_TIM2_Init+0x94>)
 8008bda:	f003 fa4f 	bl	800c07c <HAL_TIM_Base_Init>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008be4:	f000 f8be 	bl	8008d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008bee:	f107 0308 	add.w	r3, r7, #8
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	480c      	ldr	r0, [pc, #48]	@ (8008c28 <MX_TIM2_Init+0x94>)
 8008bf6:	f003 fadb 	bl	800c1b0 <HAL_TIM_ConfigClockSource>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008c00:	f000 f8b0 	bl	8008d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c04:	2300      	movs	r3, #0
 8008c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	4619      	mov	r1, r3
 8008c10:	4805      	ldr	r0, [pc, #20]	@ (8008c28 <MX_TIM2_Init+0x94>)
 8008c12:	f003 fc8d 	bl	800c530 <HAL_TIMEx_MasterConfigSynchronization>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008c1c:	f000 f8a2 	bl	8008d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008c20:	bf00      	nop
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	200000d8 	.word	0x200000d8

08008c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c32:	f107 0310 	add.w	r3, r7, #16
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	605a      	str	r2, [r3, #4]
 8008c3c:	609a      	str	r2, [r3, #8]
 8008c3e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c40:	4b44      	ldr	r3, [pc, #272]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	4a43      	ldr	r2, [pc, #268]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c46:	f043 0310 	orr.w	r3, r3, #16
 8008c4a:	6193      	str	r3, [r2, #24]
 8008c4c:	4b41      	ldr	r3, [pc, #260]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c58:	4b3e      	ldr	r3, [pc, #248]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c5e:	f043 0320 	orr.w	r3, r3, #32
 8008c62:	6193      	str	r3, [r2, #24]
 8008c64:	4b3b      	ldr	r3, [pc, #236]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	60bb      	str	r3, [r7, #8]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c70:	4b38      	ldr	r3, [pc, #224]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	4a37      	ldr	r2, [pc, #220]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c76:	f043 0304 	orr.w	r3, r3, #4
 8008c7a:	6193      	str	r3, [r2, #24]
 8008c7c:	4b35      	ldr	r3, [pc, #212]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	607b      	str	r3, [r7, #4]
 8008c86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c88:	4b32      	ldr	r3, [pc, #200]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	4a31      	ldr	r2, [pc, #196]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c8e:	f043 0308 	orr.w	r3, r3, #8
 8008c92:	6193      	str	r3, [r2, #24]
 8008c94:	4b2f      	ldr	r3, [pc, #188]	@ (8008d54 <MX_GPIO_Init+0x128>)
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f003 0308 	and.w	r3, r3, #8
 8008c9c:	603b      	str	r3, [r7, #0]
 8008c9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008ca6:	482c      	ldr	r0, [pc, #176]	@ (8008d58 <MX_GPIO_Init+0x12c>)
 8008ca8:	f000 fea1 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8008cac:	2200      	movs	r2, #0
 8008cae:	2180      	movs	r1, #128	@ 0x80
 8008cb0:	482a      	ldr	r0, [pc, #168]	@ (8008d5c <MX_GPIO_Init+0x130>)
 8008cb2:	f000 fe9c 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008cbc:	4828      	ldr	r0, [pc, #160]	@ (8008d60 <MX_GPIO_Init+0x134>)
 8008cbe:	f000 fe96 	bl	80099ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008cd4:	f107 0310 	add.w	r3, r7, #16
 8008cd8:	4619      	mov	r1, r3
 8008cda:	481f      	ldr	r0, [pc, #124]	@ (8008d58 <MX_GPIO_Init+0x12c>)
 8008cdc:	f000 fcec 	bl	80096b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008ce0:	2380      	movs	r3, #128	@ 0x80
 8008ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cec:	2302      	movs	r3, #2
 8008cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cf0:	f107 0310 	add.w	r3, r7, #16
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4819      	ldr	r0, [pc, #100]	@ (8008d5c <MX_GPIO_Init+0x130>)
 8008cf8:	f000 fcde 	bl	80096b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008cfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d02:	2300      	movs	r3, #0
 8008d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d0a:	f107 0310 	add.w	r3, r7, #16
 8008d0e:	4619      	mov	r1, r3
 8008d10:	4813      	ldr	r0, [pc, #76]	@ (8008d60 <MX_GPIO_Init+0x134>)
 8008d12:	f000 fcd1 	bl	80096b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008d16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d24:	2302      	movs	r3, #2
 8008d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d28:	f107 0310 	add.w	r3, r7, #16
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	480c      	ldr	r0, [pc, #48]	@ (8008d60 <MX_GPIO_Init+0x134>)
 8008d30:	f000 fcc2 	bl	80096b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008d34:	2302      	movs	r3, #2
 8008d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d40:	f107 0310 	add.w	r3, r7, #16
 8008d44:	4619      	mov	r1, r3
 8008d46:	4806      	ldr	r0, [pc, #24]	@ (8008d60 <MX_GPIO_Init+0x134>)
 8008d48:	f000 fcb6 	bl	80096b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008d4c:	bf00      	nop
 8008d4e:	3720      	adds	r7, #32
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	40021000 	.word	0x40021000
 8008d58:	40011000 	.word	0x40011000
 8008d5c:	40010800 	.word	0x40010800
 8008d60:	40010c00 	.word	0x40010c00

08008d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008d68:	b672      	cpsid	i
}
 8008d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008d6c:	bf00      	nop
 8008d6e:	e7fd      	b.n	8008d6c <Error_Handler+0x8>

08008d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008d76:	4b0e      	ldr	r3, [pc, #56]	@ (8008db0 <HAL_MspInit+0x40>)
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8008db0 <HAL_MspInit+0x40>)
 8008d7c:	f043 0301 	orr.w	r3, r3, #1
 8008d80:	6193      	str	r3, [r2, #24]
 8008d82:	4b0b      	ldr	r3, [pc, #44]	@ (8008db0 <HAL_MspInit+0x40>)
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	607b      	str	r3, [r7, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d8e:	4b08      	ldr	r3, [pc, #32]	@ (8008db0 <HAL_MspInit+0x40>)
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	4a07      	ldr	r2, [pc, #28]	@ (8008db0 <HAL_MspInit+0x40>)
 8008d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d98:	61d3      	str	r3, [r2, #28]
 8008d9a:	4b05      	ldr	r3, [pc, #20]	@ (8008db0 <HAL_MspInit+0x40>)
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr
 8008db0:	40021000 	.word	0x40021000

08008db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dbc:	f107 0310 	add.w	r3, r7, #16
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	605a      	str	r2, [r3, #4]
 8008dc6:	609a      	str	r2, [r3, #8]
 8008dc8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a1d      	ldr	r2, [pc, #116]	@ (8008e44 <HAL_I2C_MspInit+0x90>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d133      	bne.n	8008e3c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8008e48 <HAL_I2C_MspInit+0x94>)
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e48 <HAL_I2C_MspInit+0x94>)
 8008dda:	f043 0308 	orr.w	r3, r3, #8
 8008dde:	6193      	str	r3, [r2, #24]
 8008de0:	4b19      	ldr	r3, [pc, #100]	@ (8008e48 <HAL_I2C_MspInit+0x94>)
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008dec:	23c0      	movs	r3, #192	@ 0xc0
 8008dee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008df0:	2312      	movs	r3, #18
 8008df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008df4:	2303      	movs	r3, #3
 8008df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008df8:	f107 0310 	add.w	r3, r7, #16
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4813      	ldr	r0, [pc, #76]	@ (8008e4c <HAL_I2C_MspInit+0x98>)
 8008e00:	f000 fc5a 	bl	80096b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008e04:	4b10      	ldr	r3, [pc, #64]	@ (8008e48 <HAL_I2C_MspInit+0x94>)
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	4a0f      	ldr	r2, [pc, #60]	@ (8008e48 <HAL_I2C_MspInit+0x94>)
 8008e0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008e0e:	61d3      	str	r3, [r2, #28]
 8008e10:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <HAL_I2C_MspInit+0x94>)
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e18:	60bb      	str	r3, [r7, #8]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	201f      	movs	r0, #31
 8008e22:	f000 fa14 	bl	800924e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8008e26:	201f      	movs	r0, #31
 8008e28:	f000 fa2d 	bl	8009286 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2100      	movs	r1, #0
 8008e30:	2020      	movs	r0, #32
 8008e32:	f000 fa0c 	bl	800924e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8008e36:	2020      	movs	r0, #32
 8008e38:	f000 fa25 	bl	8009286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008e3c:	bf00      	nop
 8008e3e:	3720      	adds	r7, #32
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	40005400 	.word	0x40005400
 8008e48:	40021000 	.word	0x40021000
 8008e4c:	40010c00 	.word	0x40010c00

08008e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e60:	d10b      	bne.n	8008e7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008e62:	4b08      	ldr	r3, [pc, #32]	@ (8008e84 <HAL_TIM_Base_MspInit+0x34>)
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	4a07      	ldr	r2, [pc, #28]	@ (8008e84 <HAL_TIM_Base_MspInit+0x34>)
 8008e68:	f043 0301 	orr.w	r3, r3, #1
 8008e6c:	61d3      	str	r3, [r2, #28]
 8008e6e:	4b05      	ldr	r3, [pc, #20]	@ (8008e84 <HAL_TIM_Base_MspInit+0x34>)
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8008e7a:	bf00      	nop
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bc80      	pop	{r7}
 8008e82:	4770      	bx	lr
 8008e84:	40021000 	.word	0x40021000

08008e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008e8c:	bf00      	nop
 8008e8e:	e7fd      	b.n	8008e8c <NMI_Handler+0x4>

08008e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e90:	b480      	push	{r7}
 8008e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e94:	bf00      	nop
 8008e96:	e7fd      	b.n	8008e94 <HardFault_Handler+0x4>

08008e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e9c:	bf00      	nop
 8008e9e:	e7fd      	b.n	8008e9c <MemManage_Handler+0x4>

08008ea0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <BusFault_Handler+0x4>

08008ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008eac:	bf00      	nop
 8008eae:	e7fd      	b.n	8008eac <UsageFault_Handler+0x4>

08008eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008eb4:	bf00      	nop
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr

08008ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ec0:	bf00      	nop
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bc80      	pop	{r7}
 8008ec6:	4770      	bx	lr

08008ec8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ecc:	bf00      	nop
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr

08008ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ed8:	f000 f8c6 	bl	8009068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008edc:	bf00      	nop
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8008ee4:	4802      	ldr	r0, [pc, #8]	@ (8008ef0 <I2C1_EV_IRQHandler+0x10>)
 8008ee6:	f001 f824 	bl	8009f32 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000084 	.word	0x20000084

08008ef4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8008ef8:	4802      	ldr	r0, [pc, #8]	@ (8008f04 <I2C1_ER_IRQHandler+0x10>)
 8008efa:	f001 f96d 	bl	800a1d8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008efe:	bf00      	nop
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000084 	.word	0x20000084

08008f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f10:	4a14      	ldr	r2, [pc, #80]	@ (8008f64 <_sbrk+0x5c>)
 8008f12:	4b15      	ldr	r3, [pc, #84]	@ (8008f68 <_sbrk+0x60>)
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f1c:	4b13      	ldr	r3, [pc, #76]	@ (8008f6c <_sbrk+0x64>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f24:	4b11      	ldr	r3, [pc, #68]	@ (8008f6c <_sbrk+0x64>)
 8008f26:	4a12      	ldr	r2, [pc, #72]	@ (8008f70 <_sbrk+0x68>)
 8008f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f2a:	4b10      	ldr	r3, [pc, #64]	@ (8008f6c <_sbrk+0x64>)
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4413      	add	r3, r2
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d207      	bcs.n	8008f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f38:	f003 fb80 	bl	800c63c <__errno>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	220c      	movs	r2, #12
 8008f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f42:	f04f 33ff 	mov.w	r3, #4294967295
 8008f46:	e009      	b.n	8008f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008f48:	4b08      	ldr	r3, [pc, #32]	@ (8008f6c <_sbrk+0x64>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008f4e:	4b07      	ldr	r3, [pc, #28]	@ (8008f6c <_sbrk+0x64>)
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4413      	add	r3, r2
 8008f56:	4a05      	ldr	r2, [pc, #20]	@ (8008f6c <_sbrk+0x64>)
 8008f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20005000 	.word	0x20005000
 8008f68:	00000400 	.word	0x00000400
 8008f6c:	200001bc 	.word	0x200001bc
 8008f70:	20000330 	.word	0x20000330

08008f74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8008f78:	4b03      	ldr	r3, [pc, #12]	@ (8008f88 <SystemInit+0x14>)
 8008f7a:	4a04      	ldr	r2, [pc, #16]	@ (8008f8c <SystemInit+0x18>)
 8008f7c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008f7e:	bf00      	nop
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bc80      	pop	{r7}
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	e000ed00 	.word	0xe000ed00
 8008f8c:	08008000 	.word	0x08008000

08008f90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008f90:	f7ff fff0 	bl	8008f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008f94:	480b      	ldr	r0, [pc, #44]	@ (8008fc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008f96:	490c      	ldr	r1, [pc, #48]	@ (8008fc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008f98:	4a0c      	ldr	r2, [pc, #48]	@ (8008fcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8008f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f9c:	e002      	b.n	8008fa4 <LoopCopyDataInit>

08008f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fa2:	3304      	adds	r3, #4

08008fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fa8:	d3f9      	bcc.n	8008f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008faa:	4a09      	ldr	r2, [pc, #36]	@ (8008fd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008fac:	4c09      	ldr	r4, [pc, #36]	@ (8008fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008fb0:	e001      	b.n	8008fb6 <LoopFillZerobss>

08008fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008fb4:	3204      	adds	r2, #4

08008fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008fb8:	d3fb      	bcc.n	8008fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008fba:	f003 fb45 	bl	800c648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008fbe:	f7ff fce7 	bl	8008990 <main>
  bx lr
 8008fc2:	4770      	bx	lr
  ldr r0, =_sdata
 8008fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008fc8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8008fcc:	0800cfd0 	.word	0x0800cfd0
  ldr r2, =_sbss
 8008fd0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008fd4:	20000330 	.word	0x20000330

08008fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008fd8:	e7fe      	b.n	8008fd8 <ADC1_2_IRQHandler>
	...

08008fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008fe0:	4b08      	ldr	r3, [pc, #32]	@ (8009004 <HAL_Init+0x28>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a07      	ldr	r2, [pc, #28]	@ (8009004 <HAL_Init+0x28>)
 8008fe6:	f043 0310 	orr.w	r3, r3, #16
 8008fea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fec:	2003      	movs	r0, #3
 8008fee:	f000 f923 	bl	8009238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ff2:	200f      	movs	r0, #15
 8008ff4:	f000 f808 	bl	8009008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008ff8:	f7ff feba 	bl	8008d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	40022000 	.word	0x40022000

08009008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009010:	4b12      	ldr	r3, [pc, #72]	@ (800905c <HAL_InitTick+0x54>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	4b12      	ldr	r3, [pc, #72]	@ (8009060 <HAL_InitTick+0x58>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	4619      	mov	r1, r3
 800901a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800901e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009022:	fbb2 f3f3 	udiv	r3, r2, r3
 8009026:	4618      	mov	r0, r3
 8009028:	f000 f93b 	bl	80092a2 <HAL_SYSTICK_Config>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e00e      	b.n	8009054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b0f      	cmp	r3, #15
 800903a:	d80a      	bhi.n	8009052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800903c:	2200      	movs	r2, #0
 800903e:	6879      	ldr	r1, [r7, #4]
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	f000 f903 	bl	800924e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009048:	4a06      	ldr	r2, [pc, #24]	@ (8009064 <HAL_InitTick+0x5c>)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	e000      	b.n	8009054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
}
 8009054:	4618      	mov	r0, r3
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	2000000c 	.word	0x2000000c
 8009060:	20000014 	.word	0x20000014
 8009064:	20000010 	.word	0x20000010

08009068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800906c:	4b05      	ldr	r3, [pc, #20]	@ (8009084 <HAL_IncTick+0x1c>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	461a      	mov	r2, r3
 8009072:	4b05      	ldr	r3, [pc, #20]	@ (8009088 <HAL_IncTick+0x20>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4413      	add	r3, r2
 8009078:	4a03      	ldr	r2, [pc, #12]	@ (8009088 <HAL_IncTick+0x20>)
 800907a:	6013      	str	r3, [r2, #0]
}
 800907c:	bf00      	nop
 800907e:	46bd      	mov	sp, r7
 8009080:	bc80      	pop	{r7}
 8009082:	4770      	bx	lr
 8009084:	20000014 	.word	0x20000014
 8009088:	200001c0 	.word	0x200001c0

0800908c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  return uwTick;
 8009090:	4b02      	ldr	r3, [pc, #8]	@ (800909c <HAL_GetTick+0x10>)
 8009092:	681b      	ldr	r3, [r3, #0]
}
 8009094:	4618      	mov	r0, r3
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr
 800909c:	200001c0 	.word	0x200001c0

080090a0 <__NVIC_SetPriorityGrouping>:
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090b0:	4b0c      	ldr	r3, [pc, #48]	@ (80090e4 <__NVIC_SetPriorityGrouping+0x44>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80090bc:	4013      	ands	r3, r2
 80090be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80090c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80090cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090d2:	4a04      	ldr	r2, [pc, #16]	@ (80090e4 <__NVIC_SetPriorityGrouping+0x44>)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	60d3      	str	r3, [r2, #12]
}
 80090d8:	bf00      	nop
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	bc80      	pop	{r7}
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	e000ed00 	.word	0xe000ed00

080090e8 <__NVIC_GetPriorityGrouping>:
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090ec:	4b04      	ldr	r3, [pc, #16]	@ (8009100 <__NVIC_GetPriorityGrouping+0x18>)
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	0a1b      	lsrs	r3, r3, #8
 80090f2:	f003 0307 	and.w	r3, r3, #7
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bc80      	pop	{r7}
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	e000ed00 	.word	0xe000ed00

08009104 <__NVIC_EnableIRQ>:
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800910e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	db0b      	blt.n	800912e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009116:	79fb      	ldrb	r3, [r7, #7]
 8009118:	f003 021f 	and.w	r2, r3, #31
 800911c:	4906      	ldr	r1, [pc, #24]	@ (8009138 <__NVIC_EnableIRQ+0x34>)
 800911e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009122:	095b      	lsrs	r3, r3, #5
 8009124:	2001      	movs	r0, #1
 8009126:	fa00 f202 	lsl.w	r2, r0, r2
 800912a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	bc80      	pop	{r7}
 8009136:	4770      	bx	lr
 8009138:	e000e100 	.word	0xe000e100

0800913c <__NVIC_SetPriority>:
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	6039      	str	r1, [r7, #0]
 8009146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800914c:	2b00      	cmp	r3, #0
 800914e:	db0a      	blt.n	8009166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	b2da      	uxtb	r2, r3
 8009154:	490c      	ldr	r1, [pc, #48]	@ (8009188 <__NVIC_SetPriority+0x4c>)
 8009156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800915a:	0112      	lsls	r2, r2, #4
 800915c:	b2d2      	uxtb	r2, r2
 800915e:	440b      	add	r3, r1
 8009160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009164:	e00a      	b.n	800917c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	b2da      	uxtb	r2, r3
 800916a:	4908      	ldr	r1, [pc, #32]	@ (800918c <__NVIC_SetPriority+0x50>)
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	3b04      	subs	r3, #4
 8009174:	0112      	lsls	r2, r2, #4
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	440b      	add	r3, r1
 800917a:	761a      	strb	r2, [r3, #24]
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	e000e100 	.word	0xe000e100
 800918c:	e000ed00 	.word	0xe000ed00

08009190 <NVIC_EncodePriority>:
{
 8009190:	b480      	push	{r7}
 8009192:	b089      	sub	sp, #36	@ 0x24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	f1c3 0307 	rsb	r3, r3, #7
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	bf28      	it	cs
 80091ae:	2304      	movcs	r3, #4
 80091b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	3304      	adds	r3, #4
 80091b6:	2b06      	cmp	r3, #6
 80091b8:	d902      	bls.n	80091c0 <NVIC_EncodePriority+0x30>
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	3b03      	subs	r3, #3
 80091be:	e000      	b.n	80091c2 <NVIC_EncodePriority+0x32>
 80091c0:	2300      	movs	r3, #0
 80091c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091c4:	f04f 32ff 	mov.w	r2, #4294967295
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	fa02 f303 	lsl.w	r3, r2, r3
 80091ce:	43da      	mvns	r2, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	401a      	ands	r2, r3
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091d8:	f04f 31ff 	mov.w	r1, #4294967295
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	fa01 f303 	lsl.w	r3, r1, r3
 80091e2:	43d9      	mvns	r1, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091e8:	4313      	orrs	r3, r2
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3724      	adds	r7, #36	@ 0x24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bc80      	pop	{r7}
 80091f2:	4770      	bx	lr

080091f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3b01      	subs	r3, #1
 8009200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009204:	d301      	bcc.n	800920a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009206:	2301      	movs	r3, #1
 8009208:	e00f      	b.n	800922a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800920a:	4a0a      	ldr	r2, [pc, #40]	@ (8009234 <SysTick_Config+0x40>)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3b01      	subs	r3, #1
 8009210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009212:	210f      	movs	r1, #15
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	f7ff ff90 	bl	800913c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800921c:	4b05      	ldr	r3, [pc, #20]	@ (8009234 <SysTick_Config+0x40>)
 800921e:	2200      	movs	r2, #0
 8009220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009222:	4b04      	ldr	r3, [pc, #16]	@ (8009234 <SysTick_Config+0x40>)
 8009224:	2207      	movs	r2, #7
 8009226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	e000e010 	.word	0xe000e010

08009238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff ff2d 	bl	80090a0 <__NVIC_SetPriorityGrouping>
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800924e:	b580      	push	{r7, lr}
 8009250:	b086      	sub	sp, #24
 8009252:	af00      	add	r7, sp, #0
 8009254:	4603      	mov	r3, r0
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	607a      	str	r2, [r7, #4]
 800925a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800925c:	2300      	movs	r3, #0
 800925e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009260:	f7ff ff42 	bl	80090e8 <__NVIC_GetPriorityGrouping>
 8009264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	68b9      	ldr	r1, [r7, #8]
 800926a:	6978      	ldr	r0, [r7, #20]
 800926c:	f7ff ff90 	bl	8009190 <NVIC_EncodePriority>
 8009270:	4602      	mov	r2, r0
 8009272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f7ff ff5f 	bl	800913c <__NVIC_SetPriority>
}
 800927e:	bf00      	nop
 8009280:	3718      	adds	r7, #24
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	4603      	mov	r3, r0
 800928e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009294:	4618      	mov	r0, r3
 8009296:	f7ff ff35 	bl	8009104 <__NVIC_EnableIRQ>
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff ffa2 	bl	80091f4 <SysTick_Config>
 80092b0:	4603      	mov	r3, r0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d005      	beq.n	80092e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2204      	movs	r2, #4
 80092d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	73fb      	strb	r3, [r7, #15]
 80092de:	e051      	b.n	8009384 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 020e 	bic.w	r2, r2, #14
 80092ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 0201 	bic.w	r2, r2, #1
 80092fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a22      	ldr	r2, [pc, #136]	@ (8009390 <HAL_DMA_Abort_IT+0xd4>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d029      	beq.n	800935e <HAL_DMA_Abort_IT+0xa2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a21      	ldr	r2, [pc, #132]	@ (8009394 <HAL_DMA_Abort_IT+0xd8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d022      	beq.n	800935a <HAL_DMA_Abort_IT+0x9e>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a1f      	ldr	r2, [pc, #124]	@ (8009398 <HAL_DMA_Abort_IT+0xdc>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d01a      	beq.n	8009354 <HAL_DMA_Abort_IT+0x98>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a1e      	ldr	r2, [pc, #120]	@ (800939c <HAL_DMA_Abort_IT+0xe0>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d012      	beq.n	800934e <HAL_DMA_Abort_IT+0x92>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a1c      	ldr	r2, [pc, #112]	@ (80093a0 <HAL_DMA_Abort_IT+0xe4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00a      	beq.n	8009348 <HAL_DMA_Abort_IT+0x8c>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a1b      	ldr	r2, [pc, #108]	@ (80093a4 <HAL_DMA_Abort_IT+0xe8>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d102      	bne.n	8009342 <HAL_DMA_Abort_IT+0x86>
 800933c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009340:	e00e      	b.n	8009360 <HAL_DMA_Abort_IT+0xa4>
 8009342:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009346:	e00b      	b.n	8009360 <HAL_DMA_Abort_IT+0xa4>
 8009348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800934c:	e008      	b.n	8009360 <HAL_DMA_Abort_IT+0xa4>
 800934e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009352:	e005      	b.n	8009360 <HAL_DMA_Abort_IT+0xa4>
 8009354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009358:	e002      	b.n	8009360 <HAL_DMA_Abort_IT+0xa4>
 800935a:	2310      	movs	r3, #16
 800935c:	e000      	b.n	8009360 <HAL_DMA_Abort_IT+0xa4>
 800935e:	2301      	movs	r3, #1
 8009360:	4a11      	ldr	r2, [pc, #68]	@ (80093a8 <HAL_DMA_Abort_IT+0xec>)
 8009362:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	4798      	blx	r3
    } 
  }
  return status;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	40020008 	.word	0x40020008
 8009394:	4002001c 	.word	0x4002001c
 8009398:	40020030 	.word	0x40020030
 800939c:	40020044 	.word	0x40020044
 80093a0:	40020058 	.word	0x40020058
 80093a4:	4002006c 	.word	0x4002006c
 80093a8:	40020000 	.word	0x40020000

080093ac <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80093ba:	b2db      	uxtb	r3, r3
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr
	...

080093c8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80093c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80093e2:	4b2f      	ldr	r3, [pc, #188]	@ (80094a0 <HAL_FLASH_Program+0xd8>)
 80093e4:	7e1b      	ldrb	r3, [r3, #24]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d101      	bne.n	80093ee <HAL_FLASH_Program+0x26>
 80093ea:	2302      	movs	r3, #2
 80093ec:	e054      	b.n	8009498 <HAL_FLASH_Program+0xd0>
 80093ee:	4b2c      	ldr	r3, [pc, #176]	@ (80094a0 <HAL_FLASH_Program+0xd8>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80093f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80093f8:	f000 f8a8 	bl	800954c <FLASH_WaitForLastOperation>
 80093fc:	4603      	mov	r3, r0
 80093fe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d144      	bne.n	8009490 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d102      	bne.n	8009412 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800940c:	2301      	movs	r3, #1
 800940e:	757b      	strb	r3, [r7, #21]
 8009410:	e007      	b.n	8009422 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d102      	bne.n	800941e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8009418:	2302      	movs	r3, #2
 800941a:	757b      	strb	r3, [r7, #21]
 800941c:	e001      	b.n	8009422 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800941e:	2304      	movs	r3, #4
 8009420:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8009422:	2300      	movs	r3, #0
 8009424:	75bb      	strb	r3, [r7, #22]
 8009426:	e02d      	b.n	8009484 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8009428:	7dbb      	ldrb	r3, [r7, #22]
 800942a:	005a      	lsls	r2, r3, #1
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	eb02 0c03 	add.w	ip, r2, r3
 8009432:	7dbb      	ldrb	r3, [r7, #22]
 8009434:	0119      	lsls	r1, r3, #4
 8009436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800943a:	f1c1 0620 	rsb	r6, r1, #32
 800943e:	f1a1 0020 	sub.w	r0, r1, #32
 8009442:	fa22 f401 	lsr.w	r4, r2, r1
 8009446:	fa03 f606 	lsl.w	r6, r3, r6
 800944a:	4334      	orrs	r4, r6
 800944c:	fa23 f000 	lsr.w	r0, r3, r0
 8009450:	4304      	orrs	r4, r0
 8009452:	fa23 f501 	lsr.w	r5, r3, r1
 8009456:	b2a3      	uxth	r3, r4
 8009458:	4619      	mov	r1, r3
 800945a:	4660      	mov	r0, ip
 800945c:	f000 f85a 	bl	8009514 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009460:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009464:	f000 f872 	bl	800954c <FLASH_WaitForLastOperation>
 8009468:	4603      	mov	r3, r0
 800946a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800946c:	4b0d      	ldr	r3, [pc, #52]	@ (80094a4 <HAL_FLASH_Program+0xdc>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	4a0c      	ldr	r2, [pc, #48]	@ (80094a4 <HAL_FLASH_Program+0xdc>)
 8009472:	f023 0301 	bic.w	r3, r3, #1
 8009476:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d107      	bne.n	800948e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800947e:	7dbb      	ldrb	r3, [r7, #22]
 8009480:	3301      	adds	r3, #1
 8009482:	75bb      	strb	r3, [r7, #22]
 8009484:	7dba      	ldrb	r2, [r7, #22]
 8009486:	7d7b      	ldrb	r3, [r7, #21]
 8009488:	429a      	cmp	r2, r3
 800948a:	d3cd      	bcc.n	8009428 <HAL_FLASH_Program+0x60>
 800948c:	e000      	b.n	8009490 <HAL_FLASH_Program+0xc8>
      {
        break;
 800948e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009490:	4b03      	ldr	r3, [pc, #12]	@ (80094a0 <HAL_FLASH_Program+0xd8>)
 8009492:	2200      	movs	r2, #0
 8009494:	761a      	strb	r2, [r3, #24]

  return status;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
}
 8009498:	4618      	mov	r0, r3
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a0:	200001c8 	.word	0x200001c8
 80094a4:	40022000 	.word	0x40022000

080094a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80094b2:	4b0d      	ldr	r3, [pc, #52]	@ (80094e8 <HAL_FLASH_Unlock+0x40>)
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00d      	beq.n	80094da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80094be:	4b0a      	ldr	r3, [pc, #40]	@ (80094e8 <HAL_FLASH_Unlock+0x40>)
 80094c0:	4a0a      	ldr	r2, [pc, #40]	@ (80094ec <HAL_FLASH_Unlock+0x44>)
 80094c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80094c4:	4b08      	ldr	r3, [pc, #32]	@ (80094e8 <HAL_FLASH_Unlock+0x40>)
 80094c6:	4a0a      	ldr	r2, [pc, #40]	@ (80094f0 <HAL_FLASH_Unlock+0x48>)
 80094c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80094ca:	4b07      	ldr	r3, [pc, #28]	@ (80094e8 <HAL_FLASH_Unlock+0x40>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80094da:	79fb      	ldrb	r3, [r7, #7]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	40022000 	.word	0x40022000
 80094ec:	45670123 	.word	0x45670123
 80094f0:	cdef89ab 	.word	0xcdef89ab

080094f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80094f4:	b480      	push	{r7}
 80094f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80094f8:	4b05      	ldr	r3, [pc, #20]	@ (8009510 <HAL_FLASH_Lock+0x1c>)
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	4a04      	ldr	r2, [pc, #16]	@ (8009510 <HAL_FLASH_Lock+0x1c>)
 80094fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009502:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40022000 	.word	0x40022000

08009514 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009520:	4b08      	ldr	r3, [pc, #32]	@ (8009544 <FLASH_Program_HalfWord+0x30>)
 8009522:	2200      	movs	r2, #0
 8009524:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009526:	4b08      	ldr	r3, [pc, #32]	@ (8009548 <FLASH_Program_HalfWord+0x34>)
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	4a07      	ldr	r2, [pc, #28]	@ (8009548 <FLASH_Program_HalfWord+0x34>)
 800952c:	f043 0301 	orr.w	r3, r3, #1
 8009530:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	887a      	ldrh	r2, [r7, #2]
 8009536:	801a      	strh	r2, [r3, #0]
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	bc80      	pop	{r7}
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	200001c8 	.word	0x200001c8
 8009548:	40022000 	.word	0x40022000

0800954c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8009554:	f7ff fd9a 	bl	800908c <HAL_GetTick>
 8009558:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800955a:	e010      	b.n	800957e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009562:	d00c      	beq.n	800957e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d007      	beq.n	800957a <FLASH_WaitForLastOperation+0x2e>
 800956a:	f7ff fd8f 	bl	800908c <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	d201      	bcs.n	800957e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e025      	b.n	80095ca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800957e:	4b15      	ldr	r3, [pc, #84]	@ (80095d4 <FLASH_WaitForLastOperation+0x88>)
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e8      	bne.n	800955c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800958a:	4b12      	ldr	r3, [pc, #72]	@ (80095d4 <FLASH_WaitForLastOperation+0x88>)
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f003 0320 	and.w	r3, r3, #32
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009596:	4b0f      	ldr	r3, [pc, #60]	@ (80095d4 <FLASH_WaitForLastOperation+0x88>)
 8009598:	2220      	movs	r2, #32
 800959a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800959c:	4b0d      	ldr	r3, [pc, #52]	@ (80095d4 <FLASH_WaitForLastOperation+0x88>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	f003 0310 	and.w	r3, r3, #16
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10b      	bne.n	80095c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80095a8:	4b0a      	ldr	r3, [pc, #40]	@ (80095d4 <FLASH_WaitForLastOperation+0x88>)
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d105      	bne.n	80095c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80095b4:	4b07      	ldr	r3, [pc, #28]	@ (80095d4 <FLASH_WaitForLastOperation+0x88>)
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80095c0:	f000 f80a 	bl	80095d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e000      	b.n	80095ca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40022000 	.word	0x40022000

080095d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80095e2:	4b23      	ldr	r3, [pc, #140]	@ (8009670 <FLASH_SetErrorCode+0x98>)
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f003 0310 	and.w	r3, r3, #16
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d009      	beq.n	8009602 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80095ee:	4b21      	ldr	r3, [pc, #132]	@ (8009674 <FLASH_SetErrorCode+0x9c>)
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	f043 0302 	orr.w	r3, r3, #2
 80095f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009674 <FLASH_SetErrorCode+0x9c>)
 80095f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f043 0310 	orr.w	r3, r3, #16
 8009600:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009602:	4b1b      	ldr	r3, [pc, #108]	@ (8009670 <FLASH_SetErrorCode+0x98>)
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b00      	cmp	r3, #0
 800960c:	d009      	beq.n	8009622 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800960e:	4b19      	ldr	r3, [pc, #100]	@ (8009674 <FLASH_SetErrorCode+0x9c>)
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	4a17      	ldr	r2, [pc, #92]	@ (8009674 <FLASH_SetErrorCode+0x9c>)
 8009618:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f043 0304 	orr.w	r3, r3, #4
 8009620:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8009622:	4b13      	ldr	r3, [pc, #76]	@ (8009670 <FLASH_SetErrorCode+0x98>)
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800962e:	4b11      	ldr	r3, [pc, #68]	@ (8009674 <FLASH_SetErrorCode+0x9c>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	f043 0304 	orr.w	r3, r3, #4
 8009636:	4a0f      	ldr	r2, [pc, #60]	@ (8009674 <FLASH_SetErrorCode+0x9c>)
 8009638:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800963a:	4b0d      	ldr	r3, [pc, #52]	@ (8009670 <FLASH_SetErrorCode+0x98>)
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	4a0c      	ldr	r2, [pc, #48]	@ (8009670 <FLASH_SetErrorCode+0x98>)
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f240 1201 	movw	r2, #257	@ 0x101
 800964c:	4293      	cmp	r3, r2
 800964e:	d106      	bne.n	800965e <FLASH_SetErrorCode+0x86>
 8009650:	4b07      	ldr	r3, [pc, #28]	@ (8009670 <FLASH_SetErrorCode+0x98>)
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	4a06      	ldr	r2, [pc, #24]	@ (8009670 <FLASH_SetErrorCode+0x98>)
 8009656:	f023 0301 	bic.w	r3, r3, #1
 800965a:	61d3      	str	r3, [r2, #28]
}  
 800965c:	e002      	b.n	8009664 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800965e:	4a04      	ldr	r2, [pc, #16]	@ (8009670 <FLASH_SetErrorCode+0x98>)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	60d3      	str	r3, [r2, #12]
}  
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	40022000 	.word	0x40022000
 8009674:	200001c8 	.word	0x200001c8

08009678 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009680:	4b0b      	ldr	r3, [pc, #44]	@ (80096b0 <FLASH_PageErase+0x38>)
 8009682:	2200      	movs	r2, #0
 8009684:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009686:	4b0b      	ldr	r3, [pc, #44]	@ (80096b4 <FLASH_PageErase+0x3c>)
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	4a0a      	ldr	r2, [pc, #40]	@ (80096b4 <FLASH_PageErase+0x3c>)
 800968c:	f043 0302 	orr.w	r3, r3, #2
 8009690:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8009692:	4a08      	ldr	r2, [pc, #32]	@ (80096b4 <FLASH_PageErase+0x3c>)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009698:	4b06      	ldr	r3, [pc, #24]	@ (80096b4 <FLASH_PageErase+0x3c>)
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	4a05      	ldr	r2, [pc, #20]	@ (80096b4 <FLASH_PageErase+0x3c>)
 800969e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bc80      	pop	{r7}
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	200001c8 	.word	0x200001c8
 80096b4:	40022000 	.word	0x40022000

080096b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b08b      	sub	sp, #44	@ 0x2c
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80096c2:	2300      	movs	r3, #0
 80096c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80096c6:	2300      	movs	r3, #0
 80096c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80096ca:	e169      	b.n	80099a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80096cc:	2201      	movs	r2, #1
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	fa02 f303 	lsl.w	r3, r2, r3
 80096d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69fa      	ldr	r2, [r7, #28]
 80096dc:	4013      	ands	r3, r2
 80096de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80096e0:	69ba      	ldr	r2, [r7, #24]
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	f040 8158 	bne.w	800999a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	4a9a      	ldr	r2, [pc, #616]	@ (8009958 <HAL_GPIO_Init+0x2a0>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d05e      	beq.n	80097b2 <HAL_GPIO_Init+0xfa>
 80096f4:	4a98      	ldr	r2, [pc, #608]	@ (8009958 <HAL_GPIO_Init+0x2a0>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d875      	bhi.n	80097e6 <HAL_GPIO_Init+0x12e>
 80096fa:	4a98      	ldr	r2, [pc, #608]	@ (800995c <HAL_GPIO_Init+0x2a4>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d058      	beq.n	80097b2 <HAL_GPIO_Init+0xfa>
 8009700:	4a96      	ldr	r2, [pc, #600]	@ (800995c <HAL_GPIO_Init+0x2a4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d86f      	bhi.n	80097e6 <HAL_GPIO_Init+0x12e>
 8009706:	4a96      	ldr	r2, [pc, #600]	@ (8009960 <HAL_GPIO_Init+0x2a8>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d052      	beq.n	80097b2 <HAL_GPIO_Init+0xfa>
 800970c:	4a94      	ldr	r2, [pc, #592]	@ (8009960 <HAL_GPIO_Init+0x2a8>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d869      	bhi.n	80097e6 <HAL_GPIO_Init+0x12e>
 8009712:	4a94      	ldr	r2, [pc, #592]	@ (8009964 <HAL_GPIO_Init+0x2ac>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d04c      	beq.n	80097b2 <HAL_GPIO_Init+0xfa>
 8009718:	4a92      	ldr	r2, [pc, #584]	@ (8009964 <HAL_GPIO_Init+0x2ac>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d863      	bhi.n	80097e6 <HAL_GPIO_Init+0x12e>
 800971e:	4a92      	ldr	r2, [pc, #584]	@ (8009968 <HAL_GPIO_Init+0x2b0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d046      	beq.n	80097b2 <HAL_GPIO_Init+0xfa>
 8009724:	4a90      	ldr	r2, [pc, #576]	@ (8009968 <HAL_GPIO_Init+0x2b0>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d85d      	bhi.n	80097e6 <HAL_GPIO_Init+0x12e>
 800972a:	2b12      	cmp	r3, #18
 800972c:	d82a      	bhi.n	8009784 <HAL_GPIO_Init+0xcc>
 800972e:	2b12      	cmp	r3, #18
 8009730:	d859      	bhi.n	80097e6 <HAL_GPIO_Init+0x12e>
 8009732:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <HAL_GPIO_Init+0x80>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	080097b3 	.word	0x080097b3
 800973c:	0800978d 	.word	0x0800978d
 8009740:	0800979f 	.word	0x0800979f
 8009744:	080097e1 	.word	0x080097e1
 8009748:	080097e7 	.word	0x080097e7
 800974c:	080097e7 	.word	0x080097e7
 8009750:	080097e7 	.word	0x080097e7
 8009754:	080097e7 	.word	0x080097e7
 8009758:	080097e7 	.word	0x080097e7
 800975c:	080097e7 	.word	0x080097e7
 8009760:	080097e7 	.word	0x080097e7
 8009764:	080097e7 	.word	0x080097e7
 8009768:	080097e7 	.word	0x080097e7
 800976c:	080097e7 	.word	0x080097e7
 8009770:	080097e7 	.word	0x080097e7
 8009774:	080097e7 	.word	0x080097e7
 8009778:	080097e7 	.word	0x080097e7
 800977c:	08009795 	.word	0x08009795
 8009780:	080097a9 	.word	0x080097a9
 8009784:	4a79      	ldr	r2, [pc, #484]	@ (800996c <HAL_GPIO_Init+0x2b4>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d013      	beq.n	80097b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800978a:	e02c      	b.n	80097e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	623b      	str	r3, [r7, #32]
          break;
 8009792:	e029      	b.n	80097e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	3304      	adds	r3, #4
 800979a:	623b      	str	r3, [r7, #32]
          break;
 800979c:	e024      	b.n	80097e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	3308      	adds	r3, #8
 80097a4:	623b      	str	r3, [r7, #32]
          break;
 80097a6:	e01f      	b.n	80097e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	330c      	adds	r3, #12
 80097ae:	623b      	str	r3, [r7, #32]
          break;
 80097b0:	e01a      	b.n	80097e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d102      	bne.n	80097c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80097ba:	2304      	movs	r3, #4
 80097bc:	623b      	str	r3, [r7, #32]
          break;
 80097be:	e013      	b.n	80097e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d105      	bne.n	80097d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80097c8:	2308      	movs	r3, #8
 80097ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	69fa      	ldr	r2, [r7, #28]
 80097d0:	611a      	str	r2, [r3, #16]
          break;
 80097d2:	e009      	b.n	80097e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80097d4:	2308      	movs	r3, #8
 80097d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	615a      	str	r2, [r3, #20]
          break;
 80097de:	e003      	b.n	80097e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80097e0:	2300      	movs	r3, #0
 80097e2:	623b      	str	r3, [r7, #32]
          break;
 80097e4:	e000      	b.n	80097e8 <HAL_GPIO_Init+0x130>
          break;
 80097e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	2bff      	cmp	r3, #255	@ 0xff
 80097ec:	d801      	bhi.n	80097f2 <HAL_GPIO_Init+0x13a>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	e001      	b.n	80097f6 <HAL_GPIO_Init+0x13e>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3304      	adds	r3, #4
 80097f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	2bff      	cmp	r3, #255	@ 0xff
 80097fc:	d802      	bhi.n	8009804 <HAL_GPIO_Init+0x14c>
 80097fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	e002      	b.n	800980a <HAL_GPIO_Init+0x152>
 8009804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009806:	3b08      	subs	r3, #8
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	210f      	movs	r1, #15
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	fa01 f303 	lsl.w	r3, r1, r3
 8009818:	43db      	mvns	r3, r3
 800981a:	401a      	ands	r2, r3
 800981c:	6a39      	ldr	r1, [r7, #32]
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	fa01 f303 	lsl.w	r3, r1, r3
 8009824:	431a      	orrs	r2, r3
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009832:	2b00      	cmp	r3, #0
 8009834:	f000 80b1 	beq.w	800999a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009838:	4b4d      	ldr	r3, [pc, #308]	@ (8009970 <HAL_GPIO_Init+0x2b8>)
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	4a4c      	ldr	r2, [pc, #304]	@ (8009970 <HAL_GPIO_Init+0x2b8>)
 800983e:	f043 0301 	orr.w	r3, r3, #1
 8009842:	6193      	str	r3, [r2, #24]
 8009844:	4b4a      	ldr	r3, [pc, #296]	@ (8009970 <HAL_GPIO_Init+0x2b8>)
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	60bb      	str	r3, [r7, #8]
 800984e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009850:	4a48      	ldr	r2, [pc, #288]	@ (8009974 <HAL_GPIO_Init+0x2bc>)
 8009852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009854:	089b      	lsrs	r3, r3, #2
 8009856:	3302      	adds	r3, #2
 8009858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800985c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800985e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009860:	f003 0303 	and.w	r3, r3, #3
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	220f      	movs	r2, #15
 8009868:	fa02 f303 	lsl.w	r3, r2, r3
 800986c:	43db      	mvns	r3, r3
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	4013      	ands	r3, r2
 8009872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a40      	ldr	r2, [pc, #256]	@ (8009978 <HAL_GPIO_Init+0x2c0>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d013      	beq.n	80098a4 <HAL_GPIO_Init+0x1ec>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a3f      	ldr	r2, [pc, #252]	@ (800997c <HAL_GPIO_Init+0x2c4>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d00d      	beq.n	80098a0 <HAL_GPIO_Init+0x1e8>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a3e      	ldr	r2, [pc, #248]	@ (8009980 <HAL_GPIO_Init+0x2c8>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d007      	beq.n	800989c <HAL_GPIO_Init+0x1e4>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a3d      	ldr	r2, [pc, #244]	@ (8009984 <HAL_GPIO_Init+0x2cc>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d101      	bne.n	8009898 <HAL_GPIO_Init+0x1e0>
 8009894:	2303      	movs	r3, #3
 8009896:	e006      	b.n	80098a6 <HAL_GPIO_Init+0x1ee>
 8009898:	2304      	movs	r3, #4
 800989a:	e004      	b.n	80098a6 <HAL_GPIO_Init+0x1ee>
 800989c:	2302      	movs	r3, #2
 800989e:	e002      	b.n	80098a6 <HAL_GPIO_Init+0x1ee>
 80098a0:	2301      	movs	r3, #1
 80098a2:	e000      	b.n	80098a6 <HAL_GPIO_Init+0x1ee>
 80098a4:	2300      	movs	r3, #0
 80098a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098a8:	f002 0203 	and.w	r2, r2, #3
 80098ac:	0092      	lsls	r2, r2, #2
 80098ae:	4093      	lsls	r3, r2
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80098b6:	492f      	ldr	r1, [pc, #188]	@ (8009974 <HAL_GPIO_Init+0x2bc>)
 80098b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ba:	089b      	lsrs	r3, r3, #2
 80098bc:	3302      	adds	r3, #2
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d006      	beq.n	80098de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80098d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	492c      	ldr	r1, [pc, #176]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	4313      	orrs	r3, r2
 80098da:	608b      	str	r3, [r1, #8]
 80098dc:	e006      	b.n	80098ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80098de:	4b2a      	ldr	r3, [pc, #168]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 80098e0:	689a      	ldr	r2, [r3, #8]
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	43db      	mvns	r3, r3
 80098e6:	4928      	ldr	r1, [pc, #160]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d006      	beq.n	8009906 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80098f8:	4b23      	ldr	r3, [pc, #140]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	4922      	ldr	r1, [pc, #136]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	4313      	orrs	r3, r2
 8009902:	60cb      	str	r3, [r1, #12]
 8009904:	e006      	b.n	8009914 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009906:	4b20      	ldr	r3, [pc, #128]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	43db      	mvns	r3, r3
 800990e:	491e      	ldr	r1, [pc, #120]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 8009910:	4013      	ands	r3, r2
 8009912:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d006      	beq.n	800992e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009920:	4b19      	ldr	r3, [pc, #100]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	4918      	ldr	r1, [pc, #96]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	4313      	orrs	r3, r2
 800992a:	604b      	str	r3, [r1, #4]
 800992c:	e006      	b.n	800993c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800992e:	4b16      	ldr	r3, [pc, #88]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	43db      	mvns	r3, r3
 8009936:	4914      	ldr	r1, [pc, #80]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 8009938:	4013      	ands	r3, r2
 800993a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d021      	beq.n	800998c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009948:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	490e      	ldr	r1, [pc, #56]	@ (8009988 <HAL_GPIO_Init+0x2d0>)
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	4313      	orrs	r3, r2
 8009952:	600b      	str	r3, [r1, #0]
 8009954:	e021      	b.n	800999a <HAL_GPIO_Init+0x2e2>
 8009956:	bf00      	nop
 8009958:	10320000 	.word	0x10320000
 800995c:	10310000 	.word	0x10310000
 8009960:	10220000 	.word	0x10220000
 8009964:	10210000 	.word	0x10210000
 8009968:	10120000 	.word	0x10120000
 800996c:	10110000 	.word	0x10110000
 8009970:	40021000 	.word	0x40021000
 8009974:	40010000 	.word	0x40010000
 8009978:	40010800 	.word	0x40010800
 800997c:	40010c00 	.word	0x40010c00
 8009980:	40011000 	.word	0x40011000
 8009984:	40011400 	.word	0x40011400
 8009988:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800998c:	4b0b      	ldr	r3, [pc, #44]	@ (80099bc <HAL_GPIO_Init+0x304>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	43db      	mvns	r3, r3
 8009994:	4909      	ldr	r1, [pc, #36]	@ (80099bc <HAL_GPIO_Init+0x304>)
 8009996:	4013      	ands	r3, r2
 8009998:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	3301      	adds	r3, #1
 800999e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a6:	fa22 f303 	lsr.w	r3, r2, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f47f ae8e 	bne.w	80096cc <HAL_GPIO_Init+0x14>
  }
}
 80099b0:	bf00      	nop
 80099b2:	bf00      	nop
 80099b4:	372c      	adds	r7, #44	@ 0x2c
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bc80      	pop	{r7}
 80099ba:	4770      	bx	lr
 80099bc:	40010400 	.word	0x40010400

080099c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	887b      	ldrh	r3, [r7, #2]
 80099d2:	4013      	ands	r3, r2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80099d8:	2301      	movs	r3, #1
 80099da:	73fb      	strb	r3, [r7, #15]
 80099dc:	e001      	b.n	80099e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bc80      	pop	{r7}
 80099ec:	4770      	bx	lr

080099ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	807b      	strh	r3, [r7, #2]
 80099fa:	4613      	mov	r3, r2
 80099fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80099fe:	787b      	ldrb	r3, [r7, #1]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a04:	887a      	ldrh	r2, [r7, #2]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009a0a:	e003      	b.n	8009a14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009a0c:	887b      	ldrh	r3, [r7, #2]
 8009a0e:	041a      	lsls	r2, r3, #16
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	611a      	str	r2, [r3, #16]
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bc80      	pop	{r7}
 8009a1c:	4770      	bx	lr

08009a1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b085      	sub	sp, #20
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	460b      	mov	r3, r1
 8009a28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009a30:	887a      	ldrh	r2, [r7, #2]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4013      	ands	r3, r2
 8009a36:	041a      	lsls	r2, r3, #16
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	43d9      	mvns	r1, r3
 8009a3c:	887b      	ldrh	r3, [r7, #2]
 8009a3e:	400b      	ands	r3, r1
 8009a40:	431a      	orrs	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	611a      	str	r2, [r3, #16]
}
 8009a46:	bf00      	nop
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bc80      	pop	{r7}
 8009a4e:	4770      	bx	lr

08009a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e12b      	b.n	8009cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d106      	bne.n	8009a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff f99c 	bl	8008db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2224      	movs	r2, #36	@ 0x24
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0201 	bic.w	r2, r2, #1
 8009a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009ab4:	f002 fab0 	bl	800c018 <HAL_RCC_GetPCLK1Freq>
 8009ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	4a81      	ldr	r2, [pc, #516]	@ (8009cc4 <HAL_I2C_Init+0x274>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d807      	bhi.n	8009ad4 <HAL_I2C_Init+0x84>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4a80      	ldr	r2, [pc, #512]	@ (8009cc8 <HAL_I2C_Init+0x278>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	bf94      	ite	ls
 8009acc:	2301      	movls	r3, #1
 8009ace:	2300      	movhi	r3, #0
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	e006      	b.n	8009ae2 <HAL_I2C_Init+0x92>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4a7d      	ldr	r2, [pc, #500]	@ (8009ccc <HAL_I2C_Init+0x27c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	bf94      	ite	ls
 8009adc:	2301      	movls	r3, #1
 8009ade:	2300      	movhi	r3, #0
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e0e7      	b.n	8009cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4a78      	ldr	r2, [pc, #480]	@ (8009cd0 <HAL_I2C_Init+0x280>)
 8009aee:	fba2 2303 	umull	r2, r3, r2, r3
 8009af2:	0c9b      	lsrs	r3, r3, #18
 8009af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	4a6a      	ldr	r2, [pc, #424]	@ (8009cc4 <HAL_I2C_Init+0x274>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d802      	bhi.n	8009b24 <HAL_I2C_Init+0xd4>
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	3301      	adds	r3, #1
 8009b22:	e009      	b.n	8009b38 <HAL_I2C_Init+0xe8>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009b2a:	fb02 f303 	mul.w	r3, r2, r3
 8009b2e:	4a69      	ldr	r2, [pc, #420]	@ (8009cd4 <HAL_I2C_Init+0x284>)
 8009b30:	fba2 2303 	umull	r2, r3, r2, r3
 8009b34:	099b      	lsrs	r3, r3, #6
 8009b36:	3301      	adds	r3, #1
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6812      	ldr	r2, [r2, #0]
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009b4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	495c      	ldr	r1, [pc, #368]	@ (8009cc4 <HAL_I2C_Init+0x274>)
 8009b54:	428b      	cmp	r3, r1
 8009b56:	d819      	bhi.n	8009b8c <HAL_I2C_Init+0x13c>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	1e59      	subs	r1, r3, #1
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b66:	1c59      	adds	r1, r3, #1
 8009b68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009b6c:	400b      	ands	r3, r1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <HAL_I2C_Init+0x138>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	1e59      	subs	r1, r3, #1
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b80:	3301      	adds	r3, #1
 8009b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b86:	e051      	b.n	8009c2c <HAL_I2C_Init+0x1dc>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	e04f      	b.n	8009c2c <HAL_I2C_Init+0x1dc>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d111      	bne.n	8009bb8 <HAL_I2C_Init+0x168>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	1e58      	subs	r0, r3, #1
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6859      	ldr	r1, [r3, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	440b      	add	r3, r1
 8009ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bf0c      	ite	eq
 8009bb0:	2301      	moveq	r3, #1
 8009bb2:	2300      	movne	r3, #0
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	e012      	b.n	8009bde <HAL_I2C_Init+0x18e>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	1e58      	subs	r0, r3, #1
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6859      	ldr	r1, [r3, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	0099      	lsls	r1, r3, #2
 8009bc8:	440b      	add	r3, r1
 8009bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8009bce:	3301      	adds	r3, #1
 8009bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	bf0c      	ite	eq
 8009bd8:	2301      	moveq	r3, #1
 8009bda:	2300      	movne	r3, #0
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <HAL_I2C_Init+0x196>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e022      	b.n	8009c2c <HAL_I2C_Init+0x1dc>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10e      	bne.n	8009c0c <HAL_I2C_Init+0x1bc>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	1e58      	subs	r0, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6859      	ldr	r1, [r3, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	440b      	add	r3, r1
 8009bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c00:	3301      	adds	r3, #1
 8009c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c0a:	e00f      	b.n	8009c2c <HAL_I2C_Init+0x1dc>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	1e58      	subs	r0, r3, #1
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6859      	ldr	r1, [r3, #4]
 8009c14:	460b      	mov	r3, r1
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	440b      	add	r3, r1
 8009c1a:	0099      	lsls	r1, r3, #2
 8009c1c:	440b      	add	r3, r1
 8009c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c22:	3301      	adds	r3, #1
 8009c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	6809      	ldr	r1, [r1, #0]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	69da      	ldr	r2, [r3, #28]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	431a      	orrs	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009c5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6911      	ldr	r1, [r2, #16]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	68d2      	ldr	r2, [r2, #12]
 8009c66:	4311      	orrs	r1, r2
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	6812      	ldr	r2, [r2, #0]
 8009c6c:	430b      	orrs	r3, r1
 8009c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	695a      	ldr	r2, [r3, #20]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	431a      	orrs	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f042 0201 	orr.w	r2, r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	000186a0 	.word	0x000186a0
 8009cc8:	001e847f 	.word	0x001e847f
 8009ccc:	003d08ff 	.word	0x003d08ff
 8009cd0:	431bde83 	.word	0x431bde83
 8009cd4:	10624dd3 	.word	0x10624dd3

08009cd8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cea:	2b80      	cmp	r3, #128	@ 0x80
 8009cec:	d103      	bne.n	8009cf6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	611a      	str	r2, [r3, #16]
  }
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr

08009d00 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d1c:	2b28      	cmp	r3, #40	@ 0x28
 8009d1e:	d15b      	bne.n	8009dd8 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8009d26:	88fb      	ldrh	r3, [r7, #6]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e054      	b.n	8009dda <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d101      	bne.n	8009d3e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	e04d      	b.n	8009dda <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d007      	beq.n	8009d64 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f042 0201 	orr.w	r2, r2, #1
 8009d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2229      	movs	r2, #41	@ 0x29
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	88fa      	ldrh	r2, [r7, #6]
 8009d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009da6:	2300      	movs	r3, #0
 8009da8:	617b      	str	r3, [r7, #20]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	617b      	str	r3, [r7, #20]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	617b      	str	r3, [r7, #20]
 8009dba:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8009dd2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e000      	b.n	8009dda <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8009dd8:	2302      	movs	r3, #2
  }
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bc80      	pop	{r7}
 8009de2:	4770      	bx	lr

08009de4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	4613      	mov	r3, r2
 8009df2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009e00:	2b28      	cmp	r3, #40	@ 0x28
 8009e02:	d15b      	bne.n	8009ebc <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8009e0a:	88fb      	ldrh	r3, [r7, #6]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e054      	b.n	8009ebe <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d101      	bne.n	8009e22 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8009e1e:	2302      	movs	r3, #2
 8009e20:	e04d      	b.n	8009ebe <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d007      	beq.n	8009e48 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f042 0201 	orr.w	r2, r2, #1
 8009e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	222a      	movs	r2, #42	@ 0x2a
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2220      	movs	r2, #32
 8009e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	88fa      	ldrh	r2, [r7, #6]
 8009e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	617b      	str	r3, [r7, #20]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	617b      	str	r3, [r7, #20]
 8009e9e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8009eb6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e000      	b.n	8009ebe <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8009ebc:	2302      	movs	r3, #2
  }
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bc80      	pop	{r7}
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	d124      	bne.n	8009f26 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2228      	movs	r2, #40	@ 0x28
 8009ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d007      	beq.n	8009f02 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f042 0201 	orr.w	r2, r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009f10:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8009f20:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e000      	b.n	8009f28 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009f26:	2302      	movs	r3, #2
  }
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bc80      	pop	{r7}
 8009f30:	4770      	bx	lr

08009f32 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b088      	sub	sp, #32
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009f52:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f5a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	2b10      	cmp	r3, #16
 8009f60:	d003      	beq.n	8009f6a <HAL_I2C_EV_IRQHandler+0x38>
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b40      	cmp	r3, #64	@ 0x40
 8009f66:	f040 80b1 	bne.w	800a0cc <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10d      	bne.n	8009fa0 <HAL_I2C_EV_IRQHandler+0x6e>
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009f8a:	d003      	beq.n	8009f94 <HAL_I2C_EV_IRQHandler+0x62>
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009f92:	d101      	bne.n	8009f98 <HAL_I2C_EV_IRQHandler+0x66>
 8009f94:	2301      	movs	r3, #1
 8009f96:	e000      	b.n	8009f9a <HAL_I2C_EV_IRQHandler+0x68>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	f000 8114 	beq.w	800a1c8 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00b      	beq.n	8009fc2 <HAL_I2C_EV_IRQHandler+0x90>
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d006      	beq.n	8009fc2 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 fc4b 	bl	800b850 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fd4a 	bl	800aa54 <I2C_Master_SB>
 8009fc0:	e083      	b.n	800a0ca <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	f003 0308 	and.w	r3, r3, #8
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d008      	beq.n	8009fde <HAL_I2C_EV_IRQHandler+0xac>
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fdc1 	bl	800ab5e <I2C_Master_ADD10>
 8009fdc:	e075      	b.n	800a0ca <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	f003 0302 	and.w	r3, r3, #2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <HAL_I2C_EV_IRQHandler+0xc8>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fddc 	bl	800abb0 <I2C_Master_ADDR>
 8009ff8:	e067      	b.n	800a0ca <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b00      	cmp	r3, #0
 800a002:	d036      	beq.n	800a072 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a00e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a012:	f000 80db 	beq.w	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00d      	beq.n	800a03c <HAL_I2C_EV_IRQHandler+0x10a>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a026:	2b00      	cmp	r3, #0
 800a028:	d008      	beq.n	800a03c <HAL_I2C_EV_IRQHandler+0x10a>
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	f003 0304 	and.w	r3, r3, #4
 800a030:	2b00      	cmp	r3, #0
 800a032:	d103      	bne.n	800a03c <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f9be 	bl	800a3b6 <I2C_MasterTransmit_TXE>
 800a03a:	e046      	b.n	800a0ca <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	f003 0304 	and.w	r3, r3, #4
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 80c2 	beq.w	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 80bc 	beq.w	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a054:	7bbb      	ldrb	r3, [r7, #14]
 800a056:	2b21      	cmp	r3, #33	@ 0x21
 800a058:	d103      	bne.n	800a062 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 fa47 	bl	800a4ee <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a060:	e0b4      	b.n	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	2b40      	cmp	r3, #64	@ 0x40
 800a066:	f040 80b1 	bne.w	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fab5 	bl	800a5da <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a070:	e0ac      	b.n	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a07c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a080:	f000 80a4 	beq.w	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00d      	beq.n	800a0aa <HAL_I2C_EV_IRQHandler+0x178>
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a094:	2b00      	cmp	r3, #0
 800a096:	d008      	beq.n	800a0aa <HAL_I2C_EV_IRQHandler+0x178>
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	f003 0304 	and.w	r3, r3, #4
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d103      	bne.n	800a0aa <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fb31 	bl	800a70a <I2C_MasterReceive_RXNE>
 800a0a8:	e00f      	b.n	800a0ca <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 808b 	beq.w	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f000 8085 	beq.w	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fbdc 	bl	800a880 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a0c8:	e080      	b.n	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
 800a0ca:	e07f      	b.n	800a1cc <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d004      	beq.n	800a0de <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	61fb      	str	r3, [r7, #28]
 800a0dc:	e007      	b.n	800a0ee <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d011      	beq.n	800a11c <HAL_I2C_EV_IRQHandler+0x1ea>
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00c      	beq.n	800a11c <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a106:	2b00      	cmp	r3, #0
 800a108:	d003      	beq.n	800a112 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a112:	69b9      	ldr	r1, [r7, #24]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 ffa2 	bl	800b05e <I2C_Slave_ADDR>
 800a11a:	e05a      	b.n	800a1d2 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f003 0310 	and.w	r3, r3, #16
 800a122:	2b00      	cmp	r3, #0
 800a124:	d008      	beq.n	800a138 <HAL_I2C_EV_IRQHandler+0x206>
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d003      	beq.n	800a138 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 ffdd 	bl	800b0f0 <I2C_Slave_STOPF>
 800a136:	e04c      	b.n	800a1d2 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a138:	7bbb      	ldrb	r3, [r7, #14]
 800a13a:	2b21      	cmp	r3, #33	@ 0x21
 800a13c:	d002      	beq.n	800a144 <HAL_I2C_EV_IRQHandler+0x212>
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
 800a140:	2b29      	cmp	r3, #41	@ 0x29
 800a142:	d120      	bne.n	800a186 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00d      	beq.n	800a16a <HAL_I2C_EV_IRQHandler+0x238>
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a154:	2b00      	cmp	r3, #0
 800a156:	d008      	beq.n	800a16a <HAL_I2C_EV_IRQHandler+0x238>
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d103      	bne.n	800a16a <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 febf 	bl	800aee6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a168:	e032      	b.n	800a1d0 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	f003 0304 	and.w	r3, r3, #4
 800a170:	2b00      	cmp	r3, #0
 800a172:	d02d      	beq.n	800a1d0 <HAL_I2C_EV_IRQHandler+0x29e>
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d028      	beq.n	800a1d0 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 feee 	bl	800af60 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a184:	e024      	b.n	800a1d0 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00d      	beq.n	800a1ac <HAL_I2C_EV_IRQHandler+0x27a>
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a196:	2b00      	cmp	r3, #0
 800a198:	d008      	beq.n	800a1ac <HAL_I2C_EV_IRQHandler+0x27a>
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d103      	bne.n	800a1ac <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fefb 	bl	800afa0 <I2C_SlaveReceive_RXNE>
 800a1aa:	e012      	b.n	800a1d2 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00d      	beq.n	800a1d2 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d008      	beq.n	800a1d2 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 ff2b 	bl	800b01c <I2C_SlaveReceive_BTF>
 800a1c6:	e004      	b.n	800a1d2 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a1c8:	bf00      	nop
 800a1ca:	e002      	b.n	800a1d2 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a1cc:	bf00      	nop
 800a1ce:	e000      	b.n	800a1d2 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a1d0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a1d2:	3720      	adds	r7, #32
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08a      	sub	sp, #40	@ 0x28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a1fa:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a202:	2b00      	cmp	r3, #0
 800a204:	d015      	beq.n	800a232 <HAL_I2C_ER_IRQHandler+0x5a>
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d010      	beq.n	800a232 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a212:	f043 0301 	orr.w	r3, r3, #1
 800a216:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a220:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a230:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00d      	beq.n	800a258 <HAL_I2C_ER_IRQHandler+0x80>
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a242:	2b00      	cmp	r3, #0
 800a244:	d008      	beq.n	800a258 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a248:	f043 0302 	orr.w	r3, r3, #2
 800a24c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800a256:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d03e      	beq.n	800a2e0 <HAL_I2C_ER_IRQHandler+0x108>
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d039      	beq.n	800a2e0 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800a26c:	7efb      	ldrb	r3, [r7, #27]
 800a26e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a274:	b29b      	uxth	r3, r3
 800a276:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a27e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a284:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a286:	7ebb      	ldrb	r3, [r7, #26]
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d112      	bne.n	800a2b2 <HAL_I2C_ER_IRQHandler+0xda>
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10f      	bne.n	800a2b2 <HAL_I2C_ER_IRQHandler+0xda>
 800a292:	7cfb      	ldrb	r3, [r7, #19]
 800a294:	2b21      	cmp	r3, #33	@ 0x21
 800a296:	d008      	beq.n	800a2aa <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a298:	7cfb      	ldrb	r3, [r7, #19]
 800a29a:	2b29      	cmp	r3, #41	@ 0x29
 800a29c:	d005      	beq.n	800a2aa <HAL_I2C_ER_IRQHandler+0xd2>
 800a29e:	7cfb      	ldrb	r3, [r7, #19]
 800a2a0:	2b28      	cmp	r3, #40	@ 0x28
 800a2a2:	d106      	bne.n	800a2b2 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b21      	cmp	r3, #33	@ 0x21
 800a2a8:	d103      	bne.n	800a2b2 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f001 f850 	bl	800b350 <I2C_Slave_AF>
 800a2b0:	e016      	b.n	800a2e0 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a2ba:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2be:	f043 0304 	orr.w	r3, r3, #4
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a2c4:	7efb      	ldrb	r3, [r7, #27]
 800a2c6:	2b10      	cmp	r3, #16
 800a2c8:	d002      	beq.n	800a2d0 <HAL_I2C_ER_IRQHandler+0xf8>
 800a2ca:	7efb      	ldrb	r3, [r7, #27]
 800a2cc:	2b40      	cmp	r3, #64	@ 0x40
 800a2ce:	d107      	bne.n	800a2e0 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2de:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00d      	beq.n	800a306 <HAL_I2C_ER_IRQHandler+0x12e>
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d008      	beq.n	800a306 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f6:	f043 0308 	orr.w	r3, r3, #8
 800a2fa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800a304:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 f88d 	bl	800b438 <I2C_ITError>
  }
}
 800a31e:	bf00      	nop
 800a320:	3728      	adds	r7, #40	@ 0x28
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a32e:	bf00      	nop
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	bc80      	pop	{r7}
 800a336:	4770      	bx	lr

0800a338 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	bc80      	pop	{r7}
 800a348:	4770      	bx	lr

0800a34a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a352:	bf00      	nop
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	bc80      	pop	{r7}
 800a35a:	4770      	bx	lr

0800a35c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	bc80      	pop	{r7}
 800a36c:	4770      	bx	lr

0800a36e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a36e:	b480      	push	{r7}
 800a370:	b083      	sub	sp, #12
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bc80      	pop	{r7}
 800a37e:	4770      	bx	lr

0800a380 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bc80      	pop	{r7}
 800a390:	4770      	bx	lr

0800a392 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a392:	b480      	push	{r7}
 800a394:	b083      	sub	sp, #12
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bc80      	pop	{r7}
 800a3a2:	4770      	bx	lr

0800a3a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bc80      	pop	{r7}
 800a3b4:	4770      	bx	lr

0800a3b6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3cc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d150      	bne.n	800a47e <I2C_MasterTransmit_TXE+0xc8>
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	2b21      	cmp	r3, #33	@ 0x21
 800a3e0:	d14d      	bne.n	800a47e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d01d      	beq.n	800a424 <I2C_MasterTransmit_TXE+0x6e>
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2b20      	cmp	r3, #32
 800a3ec:	d01a      	beq.n	800a424 <I2C_MasterTransmit_TXE+0x6e>
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a3f4:	d016      	beq.n	800a424 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a404:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2211      	movs	r2, #17
 800a40a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2220      	movs	r2, #32
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff ff82 	bl	800a326 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a422:	e060      	b.n	800a4e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a432:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a442:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b40      	cmp	r3, #64	@ 0x40
 800a45c:	d107      	bne.n	800a46e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff ff81 	bl	800a36e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a46c:	e03b      	b.n	800a4e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff ff55 	bl	800a326 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a47c:	e033      	b.n	800a4e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	2b21      	cmp	r3, #33	@ 0x21
 800a482:	d005      	beq.n	800a490 <I2C_MasterTransmit_TXE+0xda>
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	2b40      	cmp	r3, #64	@ 0x40
 800a488:	d12d      	bne.n	800a4e6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	2b22      	cmp	r3, #34	@ 0x22
 800a48e:	d12a      	bne.n	800a4e6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a494:	b29b      	uxth	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d108      	bne.n	800a4ac <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4a8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a4aa:	e01c      	b.n	800a4e6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b40      	cmp	r3, #64	@ 0x40
 800a4b6:	d103      	bne.n	800a4c0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f88e 	bl	800a5da <I2C_MemoryTransmit_TXE_BTF>
}
 800a4be:	e012      	b.n	800a4e6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d0:	1c5a      	adds	r2, r3, #1
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a4e4:	e7ff      	b.n	800a4e6 <I2C_MasterTransmit_TXE+0x130>
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b21      	cmp	r3, #33	@ 0x21
 800a506:	d164      	bne.n	800a5d2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d012      	beq.n	800a538 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a516:	781a      	ldrb	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	3b01      	subs	r3, #1
 800a530:	b29a      	uxth	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a536:	e04c      	b.n	800a5d2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b08      	cmp	r3, #8
 800a53c:	d01d      	beq.n	800a57a <I2C_MasterTransmit_BTF+0x8c>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b20      	cmp	r3, #32
 800a542:	d01a      	beq.n	800a57a <I2C_MasterTransmit_BTF+0x8c>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a54a:	d016      	beq.n	800a57a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685a      	ldr	r2, [r3, #4]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a55a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2211      	movs	r2, #17
 800a560:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2220      	movs	r2, #32
 800a56e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff fed7 	bl	800a326 <HAL_I2C_MasterTxCpltCallback>
}
 800a578:	e02b      	b.n	800a5d2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a588:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a598:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b40      	cmp	r3, #64	@ 0x40
 800a5b2:	d107      	bne.n	800a5c4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff fed6 	bl	800a36e <HAL_I2C_MemTxCpltCallback>
}
 800a5c2:	e006      	b.n	800a5d2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff feaa 	bl	800a326 <HAL_I2C_MasterTxCpltCallback>
}
 800a5d2:	bf00      	nop
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d11d      	bne.n	800a62e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d10b      	bne.n	800a612 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a60a:	1c9a      	adds	r2, r3, #2
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800a610:	e077      	b.n	800a702 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a616:	b29b      	uxth	r3, r3
 800a618:	121b      	asrs	r3, r3, #8
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a62c:	e069      	b.n	800a702 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a632:	2b01      	cmp	r3, #1
 800a634:	d10b      	bne.n	800a64e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a64c:	e059      	b.n	800a702 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a652:	2b02      	cmp	r3, #2
 800a654:	d152      	bne.n	800a6fc <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	2b22      	cmp	r3, #34	@ 0x22
 800a65a:	d10d      	bne.n	800a678 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a66a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a670:	1c5a      	adds	r2, r3, #1
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a676:	e044      	b.n	800a702 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d015      	beq.n	800a6ae <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	2b21      	cmp	r3, #33	@ 0x21
 800a686:	d112      	bne.n	800a6ae <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68c:	781a      	ldrb	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a6ac:	e029      	b.n	800a702 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d124      	bne.n	800a702 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	2b21      	cmp	r3, #33	@ 0x21
 800a6bc:	d121      	bne.n	800a702 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a6cc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6dc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff fe3a 	bl	800a36e <HAL_I2C_MemTxCpltCallback>
}
 800a6fa:	e002      	b.n	800a702 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff faeb 	bl	8009cd8 <I2C_Flush_DR>
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b22      	cmp	r3, #34	@ 0x22
 800a71c:	f040 80ac 	bne.w	800a878 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a724:	b29b      	uxth	r3, r3
 800a726:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d921      	bls.n	800a772 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	691a      	ldr	r2, [r3, #16]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a738:	b2d2      	uxtb	r2, r2
 800a73a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	3b01      	subs	r3, #1
 800a74e:	b29a      	uxth	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	f040 808c 	bne.w	800a878 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	685a      	ldr	r2, [r3, #4]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a76e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800a770:	e082      	b.n	800a878 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	2b02      	cmp	r3, #2
 800a778:	d075      	beq.n	800a866 <I2C_MasterReceive_RXNE+0x15c>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d002      	beq.n	800a786 <I2C_MasterReceive_RXNE+0x7c>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d16f      	bne.n	800a866 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f001 f830 	bl	800b7ec <I2C_WaitOnSTOPRequestThroughIT>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d142      	bne.n	800a818 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7a0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a7b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	691a      	ldr	r2, [r3, #16]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7bc:	b2d2      	uxtb	r2, r2
 800a7be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c4:	1c5a      	adds	r2, r3, #1
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2220      	movs	r2, #32
 800a7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ea:	d10a      	bne.n	800a802 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7ff fdc0 	bl	800a380 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a800:	e03a      	b.n	800a878 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2212      	movs	r2, #18
 800a80e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff fd91 	bl	800a338 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a816:	e02f      	b.n	800a878 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a826:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a832:	b2d2      	uxtb	r2, r2
 800a834:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a844:	b29b      	uxth	r3, r3
 800a846:	3b01      	subs	r3, #1
 800a848:	b29a      	uxth	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2220      	movs	r2, #32
 800a852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7ff fd97 	bl	800a392 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a864:	e008      	b.n	800a878 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a874:	605a      	str	r2, [r3, #4]
}
 800a876:	e7ff      	b.n	800a878 <I2C_MasterReceive_RXNE+0x16e>
 800a878:	bf00      	nop
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a88c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a892:	b29b      	uxth	r3, r3
 800a894:	2b04      	cmp	r3, #4
 800a896:	d11b      	bne.n	800a8d0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8a6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691a      	ldr	r2, [r3, #16]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a8ce:	e0bd      	b.n	800aa4c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	d129      	bne.n	800a92e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8e8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d00a      	beq.n	800a906 <I2C_MasterReceive_BTF+0x86>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d007      	beq.n	800a906 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a904:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	691a      	ldr	r2, [r3, #16]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a910:	b2d2      	uxtb	r2, r2
 800a912:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a922:	b29b      	uxth	r3, r3
 800a924:	3b01      	subs	r3, #1
 800a926:	b29a      	uxth	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a92c:	e08e      	b.n	800aa4c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a932:	b29b      	uxth	r3, r3
 800a934:	2b02      	cmp	r3, #2
 800a936:	d176      	bne.n	800aa26 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d002      	beq.n	800a944 <I2C_MasterReceive_BTF+0xc4>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2b10      	cmp	r3, #16
 800a942:	d108      	bne.n	800a956 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e019      	b.n	800a98a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b04      	cmp	r3, #4
 800a95a:	d002      	beq.n	800a962 <I2C_MasterReceive_BTF+0xe2>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d108      	bne.n	800a974 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	e00a      	b.n	800a98a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b10      	cmp	r3, #16
 800a978:	d007      	beq.n	800a98a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a988:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	691a      	ldr	r2, [r3, #16]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a994:	b2d2      	uxtb	r2, r2
 800a996:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691a      	ldr	r2, [r3, #16]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ba:	b2d2      	uxtb	r2, r2
 800a9bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a9e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2220      	movs	r2, #32
 800a9ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b40      	cmp	r3, #64	@ 0x40
 800a9f8:	d10a      	bne.n	800aa10 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7ff fcb9 	bl	800a380 <HAL_I2C_MemRxCpltCallback>
}
 800aa0e:	e01d      	b.n	800aa4c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2212      	movs	r2, #18
 800aa1c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff fc8a 	bl	800a338 <HAL_I2C_MasterRxCpltCallback>
}
 800aa24:	e012      	b.n	800aa4c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	691a      	ldr	r2, [r3, #16]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa30:	b2d2      	uxtb	r2, r2
 800aa32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	3b01      	subs	r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800aa4c:	bf00      	nop
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b40      	cmp	r3, #64	@ 0x40
 800aa66:	d117      	bne.n	800aa98 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d109      	bne.n	800aa84 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	461a      	mov	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800aa80:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800aa82:	e067      	b.n	800ab54 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	f043 0301 	orr.w	r3, r3, #1
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	611a      	str	r2, [r3, #16]
}
 800aa96:	e05d      	b.n	800ab54 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aaa0:	d133      	bne.n	800ab0a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	2b21      	cmp	r3, #33	@ 0x21
 800aaac:	d109      	bne.n	800aac2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	461a      	mov	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800aabe:	611a      	str	r2, [r3, #16]
 800aac0:	e008      	b.n	800aad4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f043 0301 	orr.w	r3, r3, #1
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d004      	beq.n	800aae6 <I2C_Master_SB+0x92>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d108      	bne.n	800aaf8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d032      	beq.n	800ab54 <I2C_Master_SB+0x100>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d02d      	beq.n	800ab54 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab06:	605a      	str	r2, [r3, #4]
}
 800ab08:	e024      	b.n	800ab54 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10e      	bne.n	800ab30 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	11db      	asrs	r3, r3, #7
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	f003 0306 	and.w	r3, r3, #6
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	f063 030f 	orn	r3, r3, #15
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	611a      	str	r2, [r3, #16]
}
 800ab2e:	e011      	b.n	800ab54 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d10d      	bne.n	800ab54 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	11db      	asrs	r3, r3, #7
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	f003 0306 	and.w	r3, r3, #6
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f063 030e 	orn	r3, r3, #14
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	611a      	str	r2, [r3, #16]
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bc80      	pop	{r7}
 800ab5c:	4770      	bx	lr

0800ab5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d004      	beq.n	800ab84 <I2C_Master_ADD10+0x26>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d108      	bne.n	800ab96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00c      	beq.n	800aba6 <I2C_Master_ADD10+0x48>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d007      	beq.n	800aba6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aba4:	605a      	str	r2, [r3, #4]
  }
}
 800aba6:	bf00      	nop
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	bc80      	pop	{r7}
 800abae:	4770      	bx	lr

0800abb0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b091      	sub	sp, #68	@ 0x44
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800abbe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abcc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b22      	cmp	r3, #34	@ 0x22
 800abd8:	f040 8174 	bne.w	800aec4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10f      	bne.n	800ac04 <I2C_Master_ADDR+0x54>
 800abe4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800abe8:	2b40      	cmp	r3, #64	@ 0x40
 800abea:	d10b      	bne.n	800ac04 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abec:	2300      	movs	r3, #0
 800abee:	633b      	str	r3, [r7, #48]	@ 0x30
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac02:	e16b      	b.n	800aedc <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d11d      	bne.n	800ac48 <I2C_Master_ADDR+0x98>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ac14:	d118      	bne.n	800ac48 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac16:	2300      	movs	r3, #0
 800ac18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac3a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	651a      	str	r2, [r3, #80]	@ 0x50
 800ac46:	e149      	b.n	800aedc <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d113      	bne.n	800ac7a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac52:	2300      	movs	r3, #0
 800ac54:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac66:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac76:	601a      	str	r2, [r3, #0]
 800ac78:	e120      	b.n	800aebc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	f040 808a 	bne.w	800ad9a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800ac86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ac8c:	d137      	bne.n	800acfe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac9c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acac:	d113      	bne.n	800acd6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800acbc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acbe:	2300      	movs	r3, #0
 800acc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800acd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd4:	e0f2      	b.n	800aebc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acd6:	2300      	movs	r3, #0
 800acd8:	623b      	str	r3, [r7, #32]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	623b      	str	r3, [r7, #32]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	623b      	str	r3, [r7, #32]
 800acea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	e0de      	b.n	800aebc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800acfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad00:	2b08      	cmp	r3, #8
 800ad02:	d02e      	beq.n	800ad62 <I2C_Master_ADDR+0x1b2>
 800ad04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad06:	2b20      	cmp	r3, #32
 800ad08:	d02b      	beq.n	800ad62 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800ad0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0c:	2b12      	cmp	r3, #18
 800ad0e:	d102      	bne.n	800ad16 <I2C_Master_ADDR+0x166>
 800ad10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d125      	bne.n	800ad62 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ad16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad18:	2b04      	cmp	r3, #4
 800ad1a:	d00e      	beq.n	800ad3a <I2C_Master_ADDR+0x18a>
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d00b      	beq.n	800ad3a <I2C_Master_ADDR+0x18a>
 800ad22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad24:	2b10      	cmp	r3, #16
 800ad26:	d008      	beq.n	800ad3a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	e007      	b.n	800ad4a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad48:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	61fb      	str	r3, [r7, #28]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	61fb      	str	r3, [r7, #28]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	e0ac      	b.n	800aebc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad70:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad72:	2300      	movs	r3, #0
 800ad74:	61bb      	str	r3, [r7, #24]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	61bb      	str	r3, [r7, #24]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	61bb      	str	r3, [r7, #24]
 800ad86:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	e090      	b.n	800aebc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d158      	bne.n	800ae56 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ada4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada6:	2b04      	cmp	r3, #4
 800ada8:	d021      	beq.n	800adee <I2C_Master_ADDR+0x23e>
 800adaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adac:	2b02      	cmp	r3, #2
 800adae:	d01e      	beq.n	800adee <I2C_Master_ADDR+0x23e>
 800adb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb2:	2b10      	cmp	r3, #16
 800adb4:	d01b      	beq.n	800adee <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adc4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adc6:	2300      	movs	r3, #0
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	617b      	str	r3, [r7, #20]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	617b      	str	r3, [r7, #20]
 800adda:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	e012      	b.n	800ae14 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800adfc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adfe:	2300      	movs	r3, #0
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	613b      	str	r3, [r7, #16]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	613b      	str	r3, [r7, #16]
 800ae12:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae22:	d14b      	bne.n	800aebc <I2C_Master_ADDR+0x30c>
 800ae24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ae2a:	d00b      	beq.n	800ae44 <I2C_Master_ADDR+0x294>
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d008      	beq.n	800ae44 <I2C_Master_ADDR+0x294>
 800ae32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae34:	2b08      	cmp	r3, #8
 800ae36:	d005      	beq.n	800ae44 <I2C_Master_ADDR+0x294>
 800ae38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3a:	2b10      	cmp	r3, #16
 800ae3c:	d002      	beq.n	800ae44 <I2C_Master_ADDR+0x294>
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae40:	2b20      	cmp	r3, #32
 800ae42:	d13b      	bne.n	800aebc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ae52:	605a      	str	r2, [r3, #4]
 800ae54:	e032      	b.n	800aebc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae64:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae74:	d117      	bne.n	800aea6 <I2C_Master_ADDR+0x2f6>
 800ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ae7c:	d00b      	beq.n	800ae96 <I2C_Master_ADDR+0x2e6>
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d008      	beq.n	800ae96 <I2C_Master_ADDR+0x2e6>
 800ae84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae86:	2b08      	cmp	r3, #8
 800ae88:	d005      	beq.n	800ae96 <I2C_Master_ADDR+0x2e6>
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	2b10      	cmp	r3, #16
 800ae8e:	d002      	beq.n	800ae96 <I2C_Master_ADDR+0x2e6>
 800ae90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae92:	2b20      	cmp	r3, #32
 800ae94:	d107      	bne.n	800aea6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aea4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	60fb      	str	r3, [r7, #12]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	60fb      	str	r3, [r7, #12]
 800aeba:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800aec2:	e00b      	b.n	800aedc <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aec4:	2300      	movs	r3, #0
 800aec6:	60bb      	str	r3, [r7, #8]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	60bb      	str	r3, [r7, #8]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	60bb      	str	r3, [r7, #8]
 800aed8:	68bb      	ldr	r3, [r7, #8]
}
 800aeda:	e7ff      	b.n	800aedc <I2C_Master_ADDR+0x32c>
 800aedc:	bf00      	nop
 800aede:	3744      	adds	r7, #68	@ 0x44
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bc80      	pop	{r7}
 800aee4:	4770      	bx	lr

0800aee6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aef4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d02b      	beq.n	800af58 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af04:	781a      	ldrb	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af10:	1c5a      	adds	r2, r3, #1
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	3b01      	subs	r3, #1
 800af1e:	b29a      	uxth	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af28:	b29b      	uxth	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d114      	bne.n	800af58 <I2C_SlaveTransmit_TXE+0x72>
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	2b29      	cmp	r3, #41	@ 0x29
 800af32:	d111      	bne.n	800af58 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685a      	ldr	r2, [r3, #4]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2221      	movs	r2, #33	@ 0x21
 800af48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2228      	movs	r2, #40	@ 0x28
 800af4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff f9f9 	bl	800a34a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800af58:	bf00      	nop
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d011      	beq.n	800af96 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af76:	781a      	ldrb	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	3b01      	subs	r3, #1
 800af90:	b29a      	uxth	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800af96:	bf00      	nop
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bc80      	pop	{r7}
 800af9e:	4770      	bx	lr

0800afa0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d02c      	beq.n	800b014 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	691a      	ldr	r2, [r3, #16]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc4:	b2d2      	uxtb	r2, r2
 800afc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afcc:	1c5a      	adds	r2, r3, #1
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	3b01      	subs	r3, #1
 800afda:	b29a      	uxth	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d114      	bne.n	800b014 <I2C_SlaveReceive_RXNE+0x74>
 800afea:	7bfb      	ldrb	r3, [r7, #15]
 800afec:	2b2a      	cmp	r3, #42	@ 0x2a
 800afee:	d111      	bne.n	800b014 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800affe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2222      	movs	r2, #34	@ 0x22
 800b004:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2228      	movs	r2, #40	@ 0x28
 800b00a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7ff f9a4 	bl	800a35c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b014:	bf00      	nop
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b028:	b29b      	uxth	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d012      	beq.n	800b054 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	691a      	ldr	r2, [r3, #16]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b038:	b2d2      	uxtb	r2, r2
 800b03a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b040:	1c5a      	adds	r2, r3, #1
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	3b01      	subs	r3, #1
 800b04e:	b29a      	uxth	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	bc80      	pop	{r7}
 800b05c:	4770      	bx	lr

0800b05e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b068:	2300      	movs	r3, #0
 800b06a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b078:	2b28      	cmp	r3, #40	@ 0x28
 800b07a:	d125      	bne.n	800b0c8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b08a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	f003 0304 	and.w	r3, r3, #4
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b096:	2301      	movs	r3, #1
 800b098:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d103      	bne.n	800b0ac <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	81bb      	strh	r3, [r7, #12]
 800b0aa:	e002      	b.n	800b0b2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b0ba:	89ba      	ldrh	r2, [r7, #12]
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7fd fc01 	bl	80088c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b0c6:	e00e      	b.n	800b0e6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60bb      	str	r3, [r7, #8]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	695b      	ldr	r3, [r3, #20]
 800b0d2:	60bb      	str	r3, [r7, #8]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	60bb      	str	r3, [r7, #8]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b0e6:	bf00      	nop
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
	...

0800b0f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b10e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b110:	2300      	movs	r3, #0
 800b112:	60bb      	str	r3, [r7, #8]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	60bb      	str	r3, [r7, #8]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0201 	orr.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b13c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b14c:	d172      	bne.n	800b234 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	2b22      	cmp	r3, #34	@ 0x22
 800b152:	d002      	beq.n	800b15a <I2C_Slave_STOPF+0x6a>
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	2b2a      	cmp	r3, #42	@ 0x2a
 800b158:	d135      	bne.n	800b1c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	b29a      	uxth	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d005      	beq.n	800b17e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b176:	f043 0204 	orr.w	r2, r3, #4
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685a      	ldr	r2, [r3, #4]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b18c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b192:	4618      	mov	r0, r3
 800b194:	f7fe f90a 	bl	80093ac <HAL_DMA_GetState>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d049      	beq.n	800b232 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a2:	4a69      	ldr	r2, [pc, #420]	@ (800b348 <I2C_Slave_STOPF+0x258>)
 800b1a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fe f886 	bl	80092bc <HAL_DMA_Abort_IT>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d03d      	beq.n	800b232 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b1c4:	e035      	b.n	800b232 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d005      	beq.n	800b1ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e2:	f043 0204 	orr.w	r2, r3, #4
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685a      	ldr	r2, [r3, #4]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b1f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe f8d4 	bl	80093ac <HAL_DMA_GetState>
 800b204:	4603      	mov	r3, r0
 800b206:	2b01      	cmp	r3, #1
 800b208:	d014      	beq.n	800b234 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b20e:	4a4e      	ldr	r2, [pc, #312]	@ (800b348 <I2C_Slave_STOPF+0x258>)
 800b210:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe f850 	bl	80092bc <HAL_DMA_Abort_IT>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d008      	beq.n	800b234 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b22c:	4610      	mov	r0, r2
 800b22e:	4798      	blx	r3
 800b230:	e000      	b.n	800b234 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b232:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b238:	b29b      	uxth	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d03e      	beq.n	800b2bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	f003 0304 	and.w	r3, r3, #4
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d112      	bne.n	800b272 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691a      	ldr	r2, [r3, #16]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b256:	b2d2      	uxtb	r2, r2
 800b258:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b268:	b29b      	uxth	r3, r3
 800b26a:	3b01      	subs	r3, #1
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b27c:	2b40      	cmp	r3, #64	@ 0x40
 800b27e:	d112      	bne.n	800b2a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691a      	ldr	r2, [r3, #16]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b28a:	b2d2      	uxtb	r2, r2
 800b28c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d005      	beq.n	800b2bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b4:	f043 0204 	orr.w	r2, r3, #4
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d003      	beq.n	800b2cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f8b7 	bl	800b438 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b2ca:	e039      	b.n	800b340 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d0:	d109      	bne.n	800b2e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2228      	movs	r2, #40	@ 0x28
 800b2dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f7ff f83b 	bl	800a35c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b28      	cmp	r3, #40	@ 0x28
 800b2f0:	d111      	bne.n	800b316 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a15      	ldr	r2, [pc, #84]	@ (800b34c <I2C_Slave_STOPF+0x25c>)
 800b2f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2220      	movs	r2, #32
 800b302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7fd face 	bl	80088b0 <HAL_I2C_ListenCpltCallback>
}
 800b314:	e014      	b.n	800b340 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b31a:	2b22      	cmp	r3, #34	@ 0x22
 800b31c:	d002      	beq.n	800b324 <I2C_Slave_STOPF+0x234>
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
 800b320:	2b22      	cmp	r3, #34	@ 0x22
 800b322:	d10d      	bne.n	800b340 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2220      	movs	r2, #32
 800b32e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7ff f80e 	bl	800a35c <HAL_I2C_SlaveRxCpltCallback>
}
 800b340:	bf00      	nop
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	0800b69d 	.word	0x0800b69d
 800b34c:	ffff0000 	.word	0xffff0000

0800b350 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b35e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b364:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2b08      	cmp	r3, #8
 800b36a:	d002      	beq.n	800b372 <I2C_Slave_AF+0x22>
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2b20      	cmp	r3, #32
 800b370:	d129      	bne.n	800b3c6 <I2C_Slave_AF+0x76>
 800b372:	7bfb      	ldrb	r3, [r7, #15]
 800b374:	2b28      	cmp	r3, #40	@ 0x28
 800b376:	d126      	bne.n	800b3c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a2e      	ldr	r2, [pc, #184]	@ (800b434 <I2C_Slave_AF+0xe4>)
 800b37c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b38c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b396:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fd fa76 	bl	80088b0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b3c4:	e031      	b.n	800b42a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
 800b3c8:	2b21      	cmp	r3, #33	@ 0x21
 800b3ca:	d129      	bne.n	800b420 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a19      	ldr	r2, [pc, #100]	@ (800b434 <I2C_Slave_AF+0xe4>)
 800b3d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2221      	movs	r2, #33	@ 0x21
 800b3d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2220      	movs	r2, #32
 800b3dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b3f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b400:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b410:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7fe fc60 	bl	8009cd8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7fe ff96 	bl	800a34a <HAL_I2C_SlaveTxCpltCallback>
}
 800b41e:	e004      	b.n	800b42a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b428:	615a      	str	r2, [r3, #20]
}
 800b42a:	bf00      	nop
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	ffff0000 	.word	0xffff0000

0800b438 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b446:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b44e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	2b10      	cmp	r3, #16
 800b454:	d002      	beq.n	800b45c <I2C_ITError+0x24>
 800b456:	7bbb      	ldrb	r3, [r7, #14]
 800b458:	2b40      	cmp	r3, #64	@ 0x40
 800b45a:	d10a      	bne.n	800b472 <I2C_ITError+0x3a>
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	2b22      	cmp	r3, #34	@ 0x22
 800b460:	d107      	bne.n	800b472 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b470:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b478:	2b28      	cmp	r3, #40	@ 0x28
 800b47a:	d107      	bne.n	800b48c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2228      	movs	r2, #40	@ 0x28
 800b486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b48a:	e015      	b.n	800b4b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b49a:	d00a      	beq.n	800b4b2 <I2C_ITError+0x7a>
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	2b60      	cmp	r3, #96	@ 0x60
 800b4a0:	d007      	beq.n	800b4b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2220      	movs	r2, #32
 800b4a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4c6:	d162      	bne.n	800b58e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b4d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d020      	beq.n	800b528 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ea:	4a6a      	ldr	r2, [pc, #424]	@ (800b694 <I2C_ITError+0x25c>)
 800b4ec:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fd fee2 	bl	80092bc <HAL_DMA_Abort_IT>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 8089 	beq.w	800b612 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f022 0201 	bic.w	r2, r2, #1
 800b50e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2220      	movs	r2, #32
 800b514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b51c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b522:	4610      	mov	r0, r2
 800b524:	4798      	blx	r3
 800b526:	e074      	b.n	800b612 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b52c:	4a59      	ldr	r2, [pc, #356]	@ (800b694 <I2C_ITError+0x25c>)
 800b52e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b534:	4618      	mov	r0, r3
 800b536:	f7fd fec1 	bl	80092bc <HAL_DMA_Abort_IT>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d068      	beq.n	800b612 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b54a:	2b40      	cmp	r3, #64	@ 0x40
 800b54c:	d10b      	bne.n	800b566 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	691a      	ldr	r2, [r3, #16]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b558:	b2d2      	uxtb	r2, r2
 800b55a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f022 0201 	bic.w	r2, r2, #1
 800b574:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2220      	movs	r2, #32
 800b57a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b588:	4610      	mov	r0, r2
 800b58a:	4798      	blx	r3
 800b58c:	e041      	b.n	800b612 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b60      	cmp	r3, #96	@ 0x60
 800b598:	d125      	bne.n	800b5e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2220      	movs	r2, #32
 800b59e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b2:	2b40      	cmp	r3, #64	@ 0x40
 800b5b4:	d10b      	bne.n	800b5ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	691a      	ldr	r2, [r3, #16]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c0:	b2d2      	uxtb	r2, r2
 800b5c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f022 0201 	bic.w	r2, r2, #1
 800b5dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7fe fee0 	bl	800a3a4 <HAL_I2C_AbortCpltCallback>
 800b5e4:	e015      	b.n	800b612 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5f0:	2b40      	cmp	r3, #64	@ 0x40
 800b5f2:	d10b      	bne.n	800b60c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	691a      	ldr	r2, [r3, #16]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7fe fec0 	bl	800a392 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b616:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	f003 0301 	and.w	r3, r3, #1
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10e      	bne.n	800b640 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d109      	bne.n	800b640 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b632:	2b00      	cmp	r3, #0
 800b634:	d104      	bne.n	800b640 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d007      	beq.n	800b650 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	685a      	ldr	r2, [r3, #4]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b64e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b656:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b65c:	f003 0304 	and.w	r3, r3, #4
 800b660:	2b04      	cmp	r3, #4
 800b662:	d113      	bne.n	800b68c <I2C_ITError+0x254>
 800b664:	7bfb      	ldrb	r3, [r7, #15]
 800b666:	2b28      	cmp	r3, #40	@ 0x28
 800b668:	d110      	bne.n	800b68c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a0a      	ldr	r2, [pc, #40]	@ (800b698 <I2C_ITError+0x260>)
 800b66e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7fd f912 	bl	80088b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b68c:	bf00      	nop
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	0800b69d 	.word	0x0800b69d
 800b698:	ffff0000 	.word	0xffff0000

0800b69c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6b4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b6b6:	4b4b      	ldr	r3, [pc, #300]	@ (800b7e4 <I2C_DMAAbort+0x148>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	08db      	lsrs	r3, r3, #3
 800b6bc:	4a4a      	ldr	r2, [pc, #296]	@ (800b7e8 <I2C_DMAAbort+0x14c>)
 800b6be:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c2:	0a1a      	lsrs	r2, r3, #8
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	00da      	lsls	r2, r3, #3
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d106      	bne.n	800b6e4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6da:	f043 0220 	orr.w	r2, r3, #32
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800b6e2:	e00a      	b.n	800b6fa <I2C_DMAAbort+0x5e>
    }
    count--;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6f8:	d0ea      	beq.n	800b6d0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b706:	2200      	movs	r2, #0
 800b708:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b716:	2200      	movs	r2, #0
 800b718:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b728:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2200      	movs	r2, #0
 800b72e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b734:	2b00      	cmp	r3, #0
 800b736:	d003      	beq.n	800b740 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b73c:	2200      	movs	r2, #0
 800b73e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b744:	2b00      	cmp	r3, #0
 800b746:	d003      	beq.n	800b750 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b74c:	2200      	movs	r2, #0
 800b74e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f022 0201 	bic.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b766:	b2db      	uxtb	r3, r3
 800b768:	2b60      	cmp	r3, #96	@ 0x60
 800b76a:	d10e      	bne.n	800b78a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2220      	movs	r2, #32
 800b770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	2200      	movs	r2, #0
 800b780:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b782:	6978      	ldr	r0, [r7, #20]
 800b784:	f7fe fe0e 	bl	800a3a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b788:	e027      	b.n	800b7da <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b78a:	7cfb      	ldrb	r3, [r7, #19]
 800b78c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b790:	2b28      	cmp	r3, #40	@ 0x28
 800b792:	d117      	bne.n	800b7c4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f042 0201 	orr.w	r2, r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b7b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2228      	movs	r2, #40	@ 0x28
 800b7be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b7c2:	e007      	b.n	800b7d4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2220      	movs	r2, #32
 800b7c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b7d4:	6978      	ldr	r0, [r7, #20]
 800b7d6:	f7fe fddc 	bl	800a392 <HAL_I2C_ErrorCallback>
}
 800b7da:	bf00      	nop
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	2000000c 	.word	0x2000000c
 800b7e8:	14f8b589 	.word	0x14f8b589

0800b7ec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800b7f8:	4b13      	ldr	r3, [pc, #76]	@ (800b848 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	08db      	lsrs	r3, r3, #3
 800b7fe:	4a13      	ldr	r2, [pc, #76]	@ (800b84c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800b800:	fba2 2303 	umull	r2, r3, r2, r3
 800b804:	0a1a      	lsrs	r2, r3, #8
 800b806:	4613      	mov	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3b01      	subs	r3, #1
 800b812:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d107      	bne.n	800b82a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b81e:	f043 0220 	orr.w	r2, r3, #32
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e008      	b.n	800b83c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b838:	d0e9      	beq.n	800b80e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	bc80      	pop	{r7}
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	2000000c 	.word	0x2000000c
 800b84c:	14f8b589 	.word	0x14f8b589

0800b850 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800b860:	d103      	bne.n	800b86a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b868:	e007      	b.n	800b87a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800b872:	d102      	bne.n	800b87a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2208      	movs	r2, #8
 800b878:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b87a:	bf00      	nop
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	bc80      	pop	{r7}
 800b882:	4770      	bx	lr

0800b884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e272      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 8087 	beq.w	800b9b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b8a4:	4b92      	ldr	r3, [pc, #584]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	f003 030c 	and.w	r3, r3, #12
 800b8ac:	2b04      	cmp	r3, #4
 800b8ae:	d00c      	beq.n	800b8ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b8b0:	4b8f      	ldr	r3, [pc, #572]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f003 030c 	and.w	r3, r3, #12
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	d112      	bne.n	800b8e2 <HAL_RCC_OscConfig+0x5e>
 800b8bc:	4b8c      	ldr	r3, [pc, #560]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b8c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8c8:	d10b      	bne.n	800b8e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8ca:	4b89      	ldr	r3, [pc, #548]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d06c      	beq.n	800b9b0 <HAL_RCC_OscConfig+0x12c>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d168      	bne.n	800b9b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e24c      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8ea:	d106      	bne.n	800b8fa <HAL_RCC_OscConfig+0x76>
 800b8ec:	4b80      	ldr	r3, [pc, #512]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a7f      	ldr	r2, [pc, #508]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b8f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	e02e      	b.n	800b958 <HAL_RCC_OscConfig+0xd4>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10c      	bne.n	800b91c <HAL_RCC_OscConfig+0x98>
 800b902:	4b7b      	ldr	r3, [pc, #492]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a7a      	ldr	r2, [pc, #488]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b90c:	6013      	str	r3, [r2, #0]
 800b90e:	4b78      	ldr	r3, [pc, #480]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a77      	ldr	r2, [pc, #476]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	e01d      	b.n	800b958 <HAL_RCC_OscConfig+0xd4>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b924:	d10c      	bne.n	800b940 <HAL_RCC_OscConfig+0xbc>
 800b926:	4b72      	ldr	r3, [pc, #456]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a71      	ldr	r2, [pc, #452]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b92c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b930:	6013      	str	r3, [r2, #0]
 800b932:	4b6f      	ldr	r3, [pc, #444]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a6e      	ldr	r2, [pc, #440]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	e00b      	b.n	800b958 <HAL_RCC_OscConfig+0xd4>
 800b940:	4b6b      	ldr	r3, [pc, #428]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a6a      	ldr	r2, [pc, #424]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	4b68      	ldr	r3, [pc, #416]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a67      	ldr	r2, [pc, #412]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d013      	beq.n	800b988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b960:	f7fd fb94 	bl	800908c <HAL_GetTick>
 800b964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b966:	e008      	b.n	800b97a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b968:	f7fd fb90 	bl	800908c <HAL_GetTick>
 800b96c:	4602      	mov	r2, r0
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	2b64      	cmp	r3, #100	@ 0x64
 800b974:	d901      	bls.n	800b97a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b976:	2303      	movs	r3, #3
 800b978:	e200      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b97a:	4b5d      	ldr	r3, [pc, #372]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b982:	2b00      	cmp	r3, #0
 800b984:	d0f0      	beq.n	800b968 <HAL_RCC_OscConfig+0xe4>
 800b986:	e014      	b.n	800b9b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b988:	f7fd fb80 	bl	800908c <HAL_GetTick>
 800b98c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b98e:	e008      	b.n	800b9a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b990:	f7fd fb7c 	bl	800908c <HAL_GetTick>
 800b994:	4602      	mov	r2, r0
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	2b64      	cmp	r3, #100	@ 0x64
 800b99c:	d901      	bls.n	800b9a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e1ec      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b9a2:	4b53      	ldr	r3, [pc, #332]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1f0      	bne.n	800b990 <HAL_RCC_OscConfig+0x10c>
 800b9ae:	e000      	b.n	800b9b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d063      	beq.n	800ba86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b9be:	4b4c      	ldr	r3, [pc, #304]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f003 030c 	and.w	r3, r3, #12
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00b      	beq.n	800b9e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b9ca:	4b49      	ldr	r3, [pc, #292]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f003 030c 	and.w	r3, r3, #12
 800b9d2:	2b08      	cmp	r3, #8
 800b9d4:	d11c      	bne.n	800ba10 <HAL_RCC_OscConfig+0x18c>
 800b9d6:	4b46      	ldr	r3, [pc, #280]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d116      	bne.n	800ba10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b9e2:	4b43      	ldr	r3, [pc, #268]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0302 	and.w	r3, r3, #2
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <HAL_RCC_OscConfig+0x176>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d001      	beq.n	800b9fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e1c0      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9fa:	4b3d      	ldr	r3, [pc, #244]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	695b      	ldr	r3, [r3, #20]
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	4939      	ldr	r1, [pc, #228]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba0e:	e03a      	b.n	800ba86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d020      	beq.n	800ba5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ba18:	4b36      	ldr	r3, [pc, #216]	@ (800baf4 <HAL_RCC_OscConfig+0x270>)
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba1e:	f7fd fb35 	bl	800908c <HAL_GetTick>
 800ba22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba24:	e008      	b.n	800ba38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba26:	f7fd fb31 	bl	800908c <HAL_GetTick>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d901      	bls.n	800ba38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e1a1      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba38:	4b2d      	ldr	r3, [pc, #180]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 0302 	and.w	r3, r3, #2
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d0f0      	beq.n	800ba26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba44:	4b2a      	ldr	r3, [pc, #168]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	695b      	ldr	r3, [r3, #20]
 800ba50:	00db      	lsls	r3, r3, #3
 800ba52:	4927      	ldr	r1, [pc, #156]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800ba54:	4313      	orrs	r3, r2
 800ba56:	600b      	str	r3, [r1, #0]
 800ba58:	e015      	b.n	800ba86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ba5a:	4b26      	ldr	r3, [pc, #152]	@ (800baf4 <HAL_RCC_OscConfig+0x270>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba60:	f7fd fb14 	bl	800908c <HAL_GetTick>
 800ba64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba66:	e008      	b.n	800ba7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba68:	f7fd fb10 	bl	800908c <HAL_GetTick>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d901      	bls.n	800ba7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e180      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba7a:	4b1d      	ldr	r3, [pc, #116]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1f0      	bne.n	800ba68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 0308 	and.w	r3, r3, #8
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d03a      	beq.n	800bb08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d019      	beq.n	800bace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba9a:	4b17      	ldr	r3, [pc, #92]	@ (800baf8 <HAL_RCC_OscConfig+0x274>)
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800baa0:	f7fd faf4 	bl	800908c <HAL_GetTick>
 800baa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800baa6:	e008      	b.n	800baba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800baa8:	f7fd faf0 	bl	800908c <HAL_GetTick>
 800baac:	4602      	mov	r2, r0
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d901      	bls.n	800baba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bab6:	2303      	movs	r3, #3
 800bab8:	e160      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800baba:	4b0d      	ldr	r3, [pc, #52]	@ (800baf0 <HAL_RCC_OscConfig+0x26c>)
 800babc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800babe:	f003 0302 	and.w	r3, r3, #2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0f0      	beq.n	800baa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bac6:	2001      	movs	r0, #1
 800bac8:	f000 faba 	bl	800c040 <RCC_Delay>
 800bacc:	e01c      	b.n	800bb08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bace:	4b0a      	ldr	r3, [pc, #40]	@ (800baf8 <HAL_RCC_OscConfig+0x274>)
 800bad0:	2200      	movs	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bad4:	f7fd fada 	bl	800908c <HAL_GetTick>
 800bad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bada:	e00f      	b.n	800bafc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800badc:	f7fd fad6 	bl	800908c <HAL_GetTick>
 800bae0:	4602      	mov	r2, r0
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d908      	bls.n	800bafc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800baea:	2303      	movs	r3, #3
 800baec:	e146      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
 800baee:	bf00      	nop
 800baf0:	40021000 	.word	0x40021000
 800baf4:	42420000 	.word	0x42420000
 800baf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bafc:	4b92      	ldr	r3, [pc, #584]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb00:	f003 0302 	and.w	r3, r3, #2
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1e9      	bne.n	800badc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f003 0304 	and.w	r3, r3, #4
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 80a6 	beq.w	800bc62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bb16:	2300      	movs	r3, #0
 800bb18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bb1a:	4b8b      	ldr	r3, [pc, #556]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10d      	bne.n	800bb42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb26:	4b88      	ldr	r3, [pc, #544]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	4a87      	ldr	r2, [pc, #540]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bb2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb30:	61d3      	str	r3, [r2, #28]
 800bb32:	4b85      	ldr	r3, [pc, #532]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb3a:	60bb      	str	r3, [r7, #8]
 800bb3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb42:	4b82      	ldr	r3, [pc, #520]	@ (800bd4c <HAL_RCC_OscConfig+0x4c8>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d118      	bne.n	800bb80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bb4e:	4b7f      	ldr	r3, [pc, #508]	@ (800bd4c <HAL_RCC_OscConfig+0x4c8>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a7e      	ldr	r2, [pc, #504]	@ (800bd4c <HAL_RCC_OscConfig+0x4c8>)
 800bb54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bb5a:	f7fd fa97 	bl	800908c <HAL_GetTick>
 800bb5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb60:	e008      	b.n	800bb74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb62:	f7fd fa93 	bl	800908c <HAL_GetTick>
 800bb66:	4602      	mov	r2, r0
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	2b64      	cmp	r3, #100	@ 0x64
 800bb6e:	d901      	bls.n	800bb74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e103      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb74:	4b75      	ldr	r3, [pc, #468]	@ (800bd4c <HAL_RCC_OscConfig+0x4c8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0f0      	beq.n	800bb62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d106      	bne.n	800bb96 <HAL_RCC_OscConfig+0x312>
 800bb88:	4b6f      	ldr	r3, [pc, #444]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	4a6e      	ldr	r2, [pc, #440]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bb8e:	f043 0301 	orr.w	r3, r3, #1
 800bb92:	6213      	str	r3, [r2, #32]
 800bb94:	e02d      	b.n	800bbf2 <HAL_RCC_OscConfig+0x36e>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10c      	bne.n	800bbb8 <HAL_RCC_OscConfig+0x334>
 800bb9e:	4b6a      	ldr	r3, [pc, #424]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	4a69      	ldr	r2, [pc, #420]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bba4:	f023 0301 	bic.w	r3, r3, #1
 800bba8:	6213      	str	r3, [r2, #32]
 800bbaa:	4b67      	ldr	r3, [pc, #412]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	4a66      	ldr	r2, [pc, #408]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbb0:	f023 0304 	bic.w	r3, r3, #4
 800bbb4:	6213      	str	r3, [r2, #32]
 800bbb6:	e01c      	b.n	800bbf2 <HAL_RCC_OscConfig+0x36e>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	2b05      	cmp	r3, #5
 800bbbe:	d10c      	bne.n	800bbda <HAL_RCC_OscConfig+0x356>
 800bbc0:	4b61      	ldr	r3, [pc, #388]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbc2:	6a1b      	ldr	r3, [r3, #32]
 800bbc4:	4a60      	ldr	r2, [pc, #384]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbc6:	f043 0304 	orr.w	r3, r3, #4
 800bbca:	6213      	str	r3, [r2, #32]
 800bbcc:	4b5e      	ldr	r3, [pc, #376]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	4a5d      	ldr	r2, [pc, #372]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbd2:	f043 0301 	orr.w	r3, r3, #1
 800bbd6:	6213      	str	r3, [r2, #32]
 800bbd8:	e00b      	b.n	800bbf2 <HAL_RCC_OscConfig+0x36e>
 800bbda:	4b5b      	ldr	r3, [pc, #364]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	4a5a      	ldr	r2, [pc, #360]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbe0:	f023 0301 	bic.w	r3, r3, #1
 800bbe4:	6213      	str	r3, [r2, #32]
 800bbe6:	4b58      	ldr	r3, [pc, #352]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	4a57      	ldr	r2, [pc, #348]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bbec:	f023 0304 	bic.w	r3, r3, #4
 800bbf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d015      	beq.n	800bc26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bbfa:	f7fd fa47 	bl	800908c <HAL_GetTick>
 800bbfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc00:	e00a      	b.n	800bc18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc02:	f7fd fa43 	bl	800908c <HAL_GetTick>
 800bc06:	4602      	mov	r2, r0
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d901      	bls.n	800bc18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e0b1      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc18:	4b4b      	ldr	r3, [pc, #300]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bc1a:	6a1b      	ldr	r3, [r3, #32]
 800bc1c:	f003 0302 	and.w	r3, r3, #2
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d0ee      	beq.n	800bc02 <HAL_RCC_OscConfig+0x37e>
 800bc24:	e014      	b.n	800bc50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bc26:	f7fd fa31 	bl	800908c <HAL_GetTick>
 800bc2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bc2c:	e00a      	b.n	800bc44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc2e:	f7fd fa2d 	bl	800908c <HAL_GetTick>
 800bc32:	4602      	mov	r2, r0
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d901      	bls.n	800bc44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bc40:	2303      	movs	r3, #3
 800bc42:	e09b      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bc44:	4b40      	ldr	r3, [pc, #256]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bc46:	6a1b      	ldr	r3, [r3, #32]
 800bc48:	f003 0302 	and.w	r3, r3, #2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1ee      	bne.n	800bc2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d105      	bne.n	800bc62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc56:	4b3c      	ldr	r3, [pc, #240]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bc58:	69db      	ldr	r3, [r3, #28]
 800bc5a:	4a3b      	ldr	r2, [pc, #236]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bc5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 8087 	beq.w	800bd7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc6c:	4b36      	ldr	r3, [pc, #216]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	f003 030c 	and.w	r3, r3, #12
 800bc74:	2b08      	cmp	r3, #8
 800bc76:	d061      	beq.n	800bd3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d146      	bne.n	800bd0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc80:	4b33      	ldr	r3, [pc, #204]	@ (800bd50 <HAL_RCC_OscConfig+0x4cc>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc86:	f7fd fa01 	bl	800908c <HAL_GetTick>
 800bc8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc8c:	e008      	b.n	800bca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc8e:	f7fd f9fd 	bl	800908c <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d901      	bls.n	800bca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e06d      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bca0:	4b29      	ldr	r3, [pc, #164]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1f0      	bne.n	800bc8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a1b      	ldr	r3, [r3, #32]
 800bcb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcb4:	d108      	bne.n	800bcc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bcb6:	4b24      	ldr	r3, [pc, #144]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	4921      	ldr	r1, [pc, #132]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bcc8:	4b1f      	ldr	r3, [pc, #124]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a19      	ldr	r1, [r3, #32]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	491b      	ldr	r1, [pc, #108]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bce0:	4b1b      	ldr	r3, [pc, #108]	@ (800bd50 <HAL_RCC_OscConfig+0x4cc>)
 800bce2:	2201      	movs	r2, #1
 800bce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bce6:	f7fd f9d1 	bl	800908c <HAL_GetTick>
 800bcea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bcec:	e008      	b.n	800bd00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcee:	f7fd f9cd 	bl	800908c <HAL_GetTick>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d901      	bls.n	800bd00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	e03d      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bd00:	4b11      	ldr	r3, [pc, #68]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d0f0      	beq.n	800bcee <HAL_RCC_OscConfig+0x46a>
 800bd0c:	e035      	b.n	800bd7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd0e:	4b10      	ldr	r3, [pc, #64]	@ (800bd50 <HAL_RCC_OscConfig+0x4cc>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd14:	f7fd f9ba 	bl	800908c <HAL_GetTick>
 800bd18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bd1a:	e008      	b.n	800bd2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd1c:	f7fd f9b6 	bl	800908c <HAL_GetTick>
 800bd20:	4602      	mov	r2, r0
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d901      	bls.n	800bd2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e026      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bd2e:	4b06      	ldr	r3, [pc, #24]	@ (800bd48 <HAL_RCC_OscConfig+0x4c4>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1f0      	bne.n	800bd1c <HAL_RCC_OscConfig+0x498>
 800bd3a:	e01e      	b.n	800bd7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d107      	bne.n	800bd54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	e019      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
 800bd48:	40021000 	.word	0x40021000
 800bd4c:	40007000 	.word	0x40007000
 800bd50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bd54:	4b0b      	ldr	r3, [pc, #44]	@ (800bd84 <HAL_RCC_OscConfig+0x500>)
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d106      	bne.n	800bd76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d001      	beq.n	800bd7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e000      	b.n	800bd7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40021000 	.word	0x40021000

0800bd88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d101      	bne.n	800bd9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e0d0      	b.n	800bf3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bd9c:	4b6a      	ldr	r3, [pc, #424]	@ (800bf48 <HAL_RCC_ClockConfig+0x1c0>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 0307 	and.w	r3, r3, #7
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d910      	bls.n	800bdcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdaa:	4b67      	ldr	r3, [pc, #412]	@ (800bf48 <HAL_RCC_ClockConfig+0x1c0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f023 0207 	bic.w	r2, r3, #7
 800bdb2:	4965      	ldr	r1, [pc, #404]	@ (800bf48 <HAL_RCC_ClockConfig+0x1c0>)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdba:	4b63      	ldr	r3, [pc, #396]	@ (800bf48 <HAL_RCC_ClockConfig+0x1c0>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 0307 	and.w	r3, r3, #7
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d001      	beq.n	800bdcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e0b8      	b.n	800bf3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 0302 	and.w	r3, r3, #2
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d020      	beq.n	800be1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 0304 	and.w	r3, r3, #4
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d005      	beq.n	800bdf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bde4:	4b59      	ldr	r3, [pc, #356]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	4a58      	ldr	r2, [pc, #352]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800bdea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bdee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 0308 	and.w	r3, r3, #8
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d005      	beq.n	800be08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bdfc:	4b53      	ldr	r3, [pc, #332]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	4a52      	ldr	r2, [pc, #328]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800be02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800be06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be08:	4b50      	ldr	r3, [pc, #320]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	494d      	ldr	r1, [pc, #308]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800be16:	4313      	orrs	r3, r2
 800be18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f003 0301 	and.w	r3, r3, #1
 800be22:	2b00      	cmp	r3, #0
 800be24:	d040      	beq.n	800bea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d107      	bne.n	800be3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be2e:	4b47      	ldr	r3, [pc, #284]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be36:	2b00      	cmp	r3, #0
 800be38:	d115      	bne.n	800be66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	e07f      	b.n	800bf3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	2b02      	cmp	r3, #2
 800be44:	d107      	bne.n	800be56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be46:	4b41      	ldr	r3, [pc, #260]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d109      	bne.n	800be66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e073      	b.n	800bf3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be56:	4b3d      	ldr	r3, [pc, #244]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0302 	and.w	r3, r3, #2
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e06b      	b.n	800bf3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be66:	4b39      	ldr	r3, [pc, #228]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f023 0203 	bic.w	r2, r3, #3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	4936      	ldr	r1, [pc, #216]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800be74:	4313      	orrs	r3, r2
 800be76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800be78:	f7fd f908 	bl	800908c <HAL_GetTick>
 800be7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be7e:	e00a      	b.n	800be96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be80:	f7fd f904 	bl	800908c <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be8e:	4293      	cmp	r3, r2
 800be90:	d901      	bls.n	800be96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e053      	b.n	800bf3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be96:	4b2d      	ldr	r3, [pc, #180]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f003 020c 	and.w	r2, r3, #12
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d1eb      	bne.n	800be80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bea8:	4b27      	ldr	r3, [pc, #156]	@ (800bf48 <HAL_RCC_ClockConfig+0x1c0>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0307 	and.w	r3, r3, #7
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d210      	bcs.n	800bed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beb6:	4b24      	ldr	r3, [pc, #144]	@ (800bf48 <HAL_RCC_ClockConfig+0x1c0>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f023 0207 	bic.w	r2, r3, #7
 800bebe:	4922      	ldr	r1, [pc, #136]	@ (800bf48 <HAL_RCC_ClockConfig+0x1c0>)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bec6:	4b20      	ldr	r3, [pc, #128]	@ (800bf48 <HAL_RCC_ClockConfig+0x1c0>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 0307 	and.w	r3, r3, #7
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d001      	beq.n	800bed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	e032      	b.n	800bf3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 0304 	and.w	r3, r3, #4
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d008      	beq.n	800bef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bee4:	4b19      	ldr	r3, [pc, #100]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	4916      	ldr	r1, [pc, #88]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800bef2:	4313      	orrs	r3, r2
 800bef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f003 0308 	and.w	r3, r3, #8
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d009      	beq.n	800bf16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bf02:	4b12      	ldr	r3, [pc, #72]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	00db      	lsls	r3, r3, #3
 800bf10:	490e      	ldr	r1, [pc, #56]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800bf12:	4313      	orrs	r3, r2
 800bf14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bf16:	f000 f821 	bl	800bf5c <HAL_RCC_GetSysClockFreq>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	4b0b      	ldr	r3, [pc, #44]	@ (800bf4c <HAL_RCC_ClockConfig+0x1c4>)
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	091b      	lsrs	r3, r3, #4
 800bf22:	f003 030f 	and.w	r3, r3, #15
 800bf26:	490a      	ldr	r1, [pc, #40]	@ (800bf50 <HAL_RCC_ClockConfig+0x1c8>)
 800bf28:	5ccb      	ldrb	r3, [r1, r3]
 800bf2a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf2e:	4a09      	ldr	r2, [pc, #36]	@ (800bf54 <HAL_RCC_ClockConfig+0x1cc>)
 800bf30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bf32:	4b09      	ldr	r3, [pc, #36]	@ (800bf58 <HAL_RCC_ClockConfig+0x1d0>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fd f866 	bl	8009008 <HAL_InitTick>

  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	40022000 	.word	0x40022000
 800bf4c:	40021000 	.word	0x40021000
 800bf50:	0800cf68 	.word	0x0800cf68
 800bf54:	2000000c 	.word	0x2000000c
 800bf58:	20000010 	.word	0x20000010

0800bf5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]
 800bf66:	2300      	movs	r3, #0
 800bf68:	60bb      	str	r3, [r7, #8]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]
 800bf6e:	2300      	movs	r3, #0
 800bf70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bf72:	2300      	movs	r3, #0
 800bf74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bf76:	4b1e      	ldr	r3, [pc, #120]	@ (800bff0 <HAL_RCC_GetSysClockFreq+0x94>)
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f003 030c 	and.w	r3, r3, #12
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	d002      	beq.n	800bf8c <HAL_RCC_GetSysClockFreq+0x30>
 800bf86:	2b08      	cmp	r3, #8
 800bf88:	d003      	beq.n	800bf92 <HAL_RCC_GetSysClockFreq+0x36>
 800bf8a:	e027      	b.n	800bfdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bf8c:	4b19      	ldr	r3, [pc, #100]	@ (800bff4 <HAL_RCC_GetSysClockFreq+0x98>)
 800bf8e:	613b      	str	r3, [r7, #16]
      break;
 800bf90:	e027      	b.n	800bfe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	0c9b      	lsrs	r3, r3, #18
 800bf96:	f003 030f 	and.w	r3, r3, #15
 800bf9a:	4a17      	ldr	r2, [pc, #92]	@ (800bff8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bf9c:	5cd3      	ldrb	r3, [r2, r3]
 800bf9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d010      	beq.n	800bfcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bfaa:	4b11      	ldr	r3, [pc, #68]	@ (800bff0 <HAL_RCC_GetSysClockFreq+0x94>)
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	0c5b      	lsrs	r3, r3, #17
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	4a11      	ldr	r2, [pc, #68]	@ (800bffc <HAL_RCC_GetSysClockFreq+0xa0>)
 800bfb6:	5cd3      	ldrb	r3, [r2, r3]
 800bfb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a0d      	ldr	r2, [pc, #52]	@ (800bff4 <HAL_RCC_GetSysClockFreq+0x98>)
 800bfbe:	fb03 f202 	mul.w	r2, r3, r2
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc8:	617b      	str	r3, [r7, #20]
 800bfca:	e004      	b.n	800bfd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a0c      	ldr	r2, [pc, #48]	@ (800c000 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bfd0:	fb02 f303 	mul.w	r3, r2, r3
 800bfd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	613b      	str	r3, [r7, #16]
      break;
 800bfda:	e002      	b.n	800bfe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bfdc:	4b05      	ldr	r3, [pc, #20]	@ (800bff4 <HAL_RCC_GetSysClockFreq+0x98>)
 800bfde:	613b      	str	r3, [r7, #16]
      break;
 800bfe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bfe2:	693b      	ldr	r3, [r7, #16]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	371c      	adds	r7, #28
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	40021000 	.word	0x40021000
 800bff4:	007a1200 	.word	0x007a1200
 800bff8:	0800cf80 	.word	0x0800cf80
 800bffc:	0800cf90 	.word	0x0800cf90
 800c000:	003d0900 	.word	0x003d0900

0800c004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c004:	b480      	push	{r7}
 800c006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c008:	4b02      	ldr	r3, [pc, #8]	@ (800c014 <HAL_RCC_GetHCLKFreq+0x10>)
 800c00a:	681b      	ldr	r3, [r3, #0]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	46bd      	mov	sp, r7
 800c010:	bc80      	pop	{r7}
 800c012:	4770      	bx	lr
 800c014:	2000000c 	.word	0x2000000c

0800c018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c01c:	f7ff fff2 	bl	800c004 <HAL_RCC_GetHCLKFreq>
 800c020:	4602      	mov	r2, r0
 800c022:	4b05      	ldr	r3, [pc, #20]	@ (800c038 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	0a1b      	lsrs	r3, r3, #8
 800c028:	f003 0307 	and.w	r3, r3, #7
 800c02c:	4903      	ldr	r1, [pc, #12]	@ (800c03c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c02e:	5ccb      	ldrb	r3, [r1, r3]
 800c030:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c034:	4618      	mov	r0, r3
 800c036:	bd80      	pop	{r7, pc}
 800c038:	40021000 	.word	0x40021000
 800c03c:	0800cf78 	.word	0x0800cf78

0800c040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c048:	4b0a      	ldr	r3, [pc, #40]	@ (800c074 <RCC_Delay+0x34>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a0a      	ldr	r2, [pc, #40]	@ (800c078 <RCC_Delay+0x38>)
 800c04e:	fba2 2303 	umull	r2, r3, r2, r3
 800c052:	0a5b      	lsrs	r3, r3, #9
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	fb02 f303 	mul.w	r3, r2, r3
 800c05a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c05c:	bf00      	nop
  }
  while (Delay --);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	1e5a      	subs	r2, r3, #1
 800c062:	60fa      	str	r2, [r7, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1f9      	bne.n	800c05c <RCC_Delay+0x1c>
}
 800c068:	bf00      	nop
 800c06a:	bf00      	nop
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	bc80      	pop	{r7}
 800c072:	4770      	bx	lr
 800c074:	2000000c 	.word	0x2000000c
 800c078:	10624dd3 	.word	0x10624dd3

0800c07c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e041      	b.n	800c112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d106      	bne.n	800c0a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7fc fed4 	bl	8008e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2202      	movs	r2, #2
 800c0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	f000 f940 	bl	800c340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c110:	2300      	movs	r3, #0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
	...

0800c11c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d001      	beq.n	800c134 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	e032      	b.n	800c19a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2202      	movs	r2, #2
 800c138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a18      	ldr	r2, [pc, #96]	@ (800c1a4 <HAL_TIM_Base_Start+0x88>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d00e      	beq.n	800c164 <HAL_TIM_Base_Start+0x48>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c14e:	d009      	beq.n	800c164 <HAL_TIM_Base_Start+0x48>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a14      	ldr	r2, [pc, #80]	@ (800c1a8 <HAL_TIM_Base_Start+0x8c>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d004      	beq.n	800c164 <HAL_TIM_Base_Start+0x48>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a13      	ldr	r2, [pc, #76]	@ (800c1ac <HAL_TIM_Base_Start+0x90>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d111      	bne.n	800c188 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	f003 0307 	and.w	r3, r3, #7
 800c16e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2b06      	cmp	r3, #6
 800c174:	d010      	beq.n	800c198 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f042 0201 	orr.w	r2, r2, #1
 800c184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c186:	e007      	b.n	800c198 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f042 0201 	orr.w	r2, r2, #1
 800c196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bc80      	pop	{r7}
 800c1a2:	4770      	bx	lr
 800c1a4:	40012c00 	.word	0x40012c00
 800c1a8:	40000400 	.word	0x40000400
 800c1ac:	40000800 	.word	0x40000800

0800c1b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d101      	bne.n	800c1cc <HAL_TIM_ConfigClockSource+0x1c>
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	e0b4      	b.n	800c336 <HAL_TIM_ConfigClockSource+0x186>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c1ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c1f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c204:	d03e      	beq.n	800c284 <HAL_TIM_ConfigClockSource+0xd4>
 800c206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c20a:	f200 8087 	bhi.w	800c31c <HAL_TIM_ConfigClockSource+0x16c>
 800c20e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c212:	f000 8086 	beq.w	800c322 <HAL_TIM_ConfigClockSource+0x172>
 800c216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c21a:	d87f      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x16c>
 800c21c:	2b70      	cmp	r3, #112	@ 0x70
 800c21e:	d01a      	beq.n	800c256 <HAL_TIM_ConfigClockSource+0xa6>
 800c220:	2b70      	cmp	r3, #112	@ 0x70
 800c222:	d87b      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x16c>
 800c224:	2b60      	cmp	r3, #96	@ 0x60
 800c226:	d050      	beq.n	800c2ca <HAL_TIM_ConfigClockSource+0x11a>
 800c228:	2b60      	cmp	r3, #96	@ 0x60
 800c22a:	d877      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x16c>
 800c22c:	2b50      	cmp	r3, #80	@ 0x50
 800c22e:	d03c      	beq.n	800c2aa <HAL_TIM_ConfigClockSource+0xfa>
 800c230:	2b50      	cmp	r3, #80	@ 0x50
 800c232:	d873      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x16c>
 800c234:	2b40      	cmp	r3, #64	@ 0x40
 800c236:	d058      	beq.n	800c2ea <HAL_TIM_ConfigClockSource+0x13a>
 800c238:	2b40      	cmp	r3, #64	@ 0x40
 800c23a:	d86f      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x16c>
 800c23c:	2b30      	cmp	r3, #48	@ 0x30
 800c23e:	d064      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x15a>
 800c240:	2b30      	cmp	r3, #48	@ 0x30
 800c242:	d86b      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x16c>
 800c244:	2b20      	cmp	r3, #32
 800c246:	d060      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x15a>
 800c248:	2b20      	cmp	r3, #32
 800c24a:	d867      	bhi.n	800c31c <HAL_TIM_ConfigClockSource+0x16c>
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d05c      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x15a>
 800c250:	2b10      	cmp	r3, #16
 800c252:	d05a      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x15a>
 800c254:	e062      	b.n	800c31c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c266:	f000 f944 	bl	800c4f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	609a      	str	r2, [r3, #8]
      break;
 800c282:	e04f      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c294:	f000 f92d 	bl	800c4f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	689a      	ldr	r2, [r3, #8]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c2a6:	609a      	str	r2, [r3, #8]
      break;
 800c2a8:	e03c      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f000 f8a4 	bl	800c404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2150      	movs	r1, #80	@ 0x50
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f000 f8fb 	bl	800c4be <TIM_ITRx_SetConfig>
      break;
 800c2c8:	e02c      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f000 f8c2 	bl	800c460 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2160      	movs	r1, #96	@ 0x60
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f000 f8eb 	bl	800c4be <TIM_ITRx_SetConfig>
      break;
 800c2e8:	e01c      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f000 f884 	bl	800c404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2140      	movs	r1, #64	@ 0x40
 800c302:	4618      	mov	r0, r3
 800c304:	f000 f8db 	bl	800c4be <TIM_ITRx_SetConfig>
      break;
 800c308:	e00c      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f000 f8d2 	bl	800c4be <TIM_ITRx_SetConfig>
      break;
 800c31a:	e003      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	73fb      	strb	r3, [r7, #15]
      break;
 800c320:	e000      	b.n	800c324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c334:	7bfb      	ldrb	r3, [r7, #15]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4a29      	ldr	r2, [pc, #164]	@ (800c3f8 <TIM_Base_SetConfig+0xb8>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d00b      	beq.n	800c370 <TIM_Base_SetConfig+0x30>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c35e:	d007      	beq.n	800c370 <TIM_Base_SetConfig+0x30>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a26      	ldr	r2, [pc, #152]	@ (800c3fc <TIM_Base_SetConfig+0xbc>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d003      	beq.n	800c370 <TIM_Base_SetConfig+0x30>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a25      	ldr	r2, [pc, #148]	@ (800c400 <TIM_Base_SetConfig+0xc0>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d108      	bne.n	800c382 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	4313      	orrs	r3, r2
 800c380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a1c      	ldr	r2, [pc, #112]	@ (800c3f8 <TIM_Base_SetConfig+0xb8>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d00b      	beq.n	800c3a2 <TIM_Base_SetConfig+0x62>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c390:	d007      	beq.n	800c3a2 <TIM_Base_SetConfig+0x62>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4a19      	ldr	r2, [pc, #100]	@ (800c3fc <TIM_Base_SetConfig+0xbc>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d003      	beq.n	800c3a2 <TIM_Base_SetConfig+0x62>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4a18      	ldr	r2, [pc, #96]	@ (800c400 <TIM_Base_SetConfig+0xc0>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d108      	bne.n	800c3b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	689a      	ldr	r2, [r3, #8]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a07      	ldr	r2, [pc, #28]	@ (800c3f8 <TIM_Base_SetConfig+0xb8>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d103      	bne.n	800c3e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	691a      	ldr	r2, [r3, #16]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	615a      	str	r2, [r3, #20]
}
 800c3ee:	bf00      	nop
 800c3f0:	3714      	adds	r7, #20
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bc80      	pop	{r7}
 800c3f6:	4770      	bx	lr
 800c3f8:	40012c00 	.word	0x40012c00
 800c3fc:	40000400 	.word	0x40000400
 800c400:	40000800 	.word	0x40000800

0800c404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c404:	b480      	push	{r7}
 800c406:	b087      	sub	sp, #28
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6a1b      	ldr	r3, [r3, #32]
 800c414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	f023 0201 	bic.w	r2, r3, #1
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c42e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	011b      	lsls	r3, r3, #4
 800c434:	693a      	ldr	r2, [r7, #16]
 800c436:	4313      	orrs	r3, r2
 800c438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f023 030a 	bic.w	r3, r3, #10
 800c440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c442:	697a      	ldr	r2, [r7, #20]
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	4313      	orrs	r3, r2
 800c448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	621a      	str	r2, [r3, #32]
}
 800c456:	bf00      	nop
 800c458:	371c      	adds	r7, #28
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bc80      	pop	{r7}
 800c45e:	4770      	bx	lr

0800c460 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c460:	b480      	push	{r7}
 800c462:	b087      	sub	sp, #28
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6a1b      	ldr	r3, [r3, #32]
 800c470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	f023 0210 	bic.w	r2, r3, #16
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c48a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	031b      	lsls	r3, r3, #12
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	4313      	orrs	r3, r2
 800c494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c49c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	011b      	lsls	r3, r3, #4
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	693a      	ldr	r2, [r7, #16]
 800c4ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	697a      	ldr	r2, [r7, #20]
 800c4b2:	621a      	str	r2, [r3, #32]
}
 800c4b4:	bf00      	nop
 800c4b6:	371c      	adds	r7, #28
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bc80      	pop	{r7}
 800c4bc:	4770      	bx	lr

0800c4be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4be:	b480      	push	{r7}
 800c4c0:	b085      	sub	sp, #20
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4d6:	683a      	ldr	r2, [r7, #0]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	f043 0307 	orr.w	r3, r3, #7
 800c4e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	609a      	str	r2, [r3, #8]
}
 800c4e8:	bf00      	nop
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bc80      	pop	{r7}
 800c4f0:	4770      	bx	lr

0800c4f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	b087      	sub	sp, #28
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	607a      	str	r2, [r7, #4]
 800c4fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c50c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	021a      	lsls	r2, r3, #8
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	431a      	orrs	r2, r3
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	4313      	orrs	r3, r2
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	697a      	ldr	r2, [r7, #20]
 800c524:	609a      	str	r2, [r3, #8]
}
 800c526:	bf00      	nop
 800c528:	371c      	adds	r7, #28
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bc80      	pop	{r7}
 800c52e:	4770      	bx	lr

0800c530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c540:	2b01      	cmp	r3, #1
 800c542:	d101      	bne.n	800c548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c544:	2302      	movs	r3, #2
 800c546:	e046      	b.n	800c5d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2202      	movs	r2, #2
 800c554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c56e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a16      	ldr	r2, [pc, #88]	@ (800c5e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d00e      	beq.n	800c5aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c594:	d009      	beq.n	800c5aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a12      	ldr	r2, [pc, #72]	@ (800c5e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d004      	beq.n	800c5aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a10      	ldr	r2, [pc, #64]	@ (800c5e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d10c      	bne.n	800c5c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bc80      	pop	{r7}
 800c5de:	4770      	bx	lr
 800c5e0:	40012c00 	.word	0x40012c00
 800c5e4:	40000400 	.word	0x40000400
 800c5e8:	40000800 	.word	0x40000800

0800c5ec <siprintf>:
 800c5ec:	b40e      	push	{r1, r2, r3}
 800c5ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c5f2:	b500      	push	{lr}
 800c5f4:	b09c      	sub	sp, #112	@ 0x70
 800c5f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800c5f8:	9002      	str	r0, [sp, #8]
 800c5fa:	9006      	str	r0, [sp, #24]
 800c5fc:	9107      	str	r1, [sp, #28]
 800c5fe:	9104      	str	r1, [sp, #16]
 800c600:	4808      	ldr	r0, [pc, #32]	@ (800c624 <siprintf+0x38>)
 800c602:	4909      	ldr	r1, [pc, #36]	@ (800c628 <siprintf+0x3c>)
 800c604:	f853 2b04 	ldr.w	r2, [r3], #4
 800c608:	9105      	str	r1, [sp, #20]
 800c60a:	6800      	ldr	r0, [r0, #0]
 800c60c:	a902      	add	r1, sp, #8
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	f000 f992 	bl	800c938 <_svfiprintf_r>
 800c614:	2200      	movs	r2, #0
 800c616:	9b02      	ldr	r3, [sp, #8]
 800c618:	701a      	strb	r2, [r3, #0]
 800c61a:	b01c      	add	sp, #112	@ 0x70
 800c61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c620:	b003      	add	sp, #12
 800c622:	4770      	bx	lr
 800c624:	20000018 	.word	0x20000018
 800c628:	ffff0208 	.word	0xffff0208

0800c62c <memset>:
 800c62c:	4603      	mov	r3, r0
 800c62e:	4402      	add	r2, r0
 800c630:	4293      	cmp	r3, r2
 800c632:	d100      	bne.n	800c636 <memset+0xa>
 800c634:	4770      	bx	lr
 800c636:	f803 1b01 	strb.w	r1, [r3], #1
 800c63a:	e7f9      	b.n	800c630 <memset+0x4>

0800c63c <__errno>:
 800c63c:	4b01      	ldr	r3, [pc, #4]	@ (800c644 <__errno+0x8>)
 800c63e:	6818      	ldr	r0, [r3, #0]
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	20000018 	.word	0x20000018

0800c648 <__libc_init_array>:
 800c648:	b570      	push	{r4, r5, r6, lr}
 800c64a:	2600      	movs	r6, #0
 800c64c:	4d0c      	ldr	r5, [pc, #48]	@ (800c680 <__libc_init_array+0x38>)
 800c64e:	4c0d      	ldr	r4, [pc, #52]	@ (800c684 <__libc_init_array+0x3c>)
 800c650:	1b64      	subs	r4, r4, r5
 800c652:	10a4      	asrs	r4, r4, #2
 800c654:	42a6      	cmp	r6, r4
 800c656:	d109      	bne.n	800c66c <__libc_init_array+0x24>
 800c658:	f000 fc78 	bl	800cf4c <_init>
 800c65c:	2600      	movs	r6, #0
 800c65e:	4d0a      	ldr	r5, [pc, #40]	@ (800c688 <__libc_init_array+0x40>)
 800c660:	4c0a      	ldr	r4, [pc, #40]	@ (800c68c <__libc_init_array+0x44>)
 800c662:	1b64      	subs	r4, r4, r5
 800c664:	10a4      	asrs	r4, r4, #2
 800c666:	42a6      	cmp	r6, r4
 800c668:	d105      	bne.n	800c676 <__libc_init_array+0x2e>
 800c66a:	bd70      	pop	{r4, r5, r6, pc}
 800c66c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c670:	4798      	blx	r3
 800c672:	3601      	adds	r6, #1
 800c674:	e7ee      	b.n	800c654 <__libc_init_array+0xc>
 800c676:	f855 3b04 	ldr.w	r3, [r5], #4
 800c67a:	4798      	blx	r3
 800c67c:	3601      	adds	r6, #1
 800c67e:	e7f2      	b.n	800c666 <__libc_init_array+0x1e>
 800c680:	0800cfc8 	.word	0x0800cfc8
 800c684:	0800cfc8 	.word	0x0800cfc8
 800c688:	0800cfc8 	.word	0x0800cfc8
 800c68c:	0800cfcc 	.word	0x0800cfcc

0800c690 <__retarget_lock_acquire_recursive>:
 800c690:	4770      	bx	lr

0800c692 <__retarget_lock_release_recursive>:
 800c692:	4770      	bx	lr

0800c694 <_free_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4605      	mov	r5, r0
 800c698:	2900      	cmp	r1, #0
 800c69a:	d040      	beq.n	800c71e <_free_r+0x8a>
 800c69c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a0:	1f0c      	subs	r4, r1, #4
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	bfb8      	it	lt
 800c6a6:	18e4      	addlt	r4, r4, r3
 800c6a8:	f000 f8de 	bl	800c868 <__malloc_lock>
 800c6ac:	4a1c      	ldr	r2, [pc, #112]	@ (800c720 <_free_r+0x8c>)
 800c6ae:	6813      	ldr	r3, [r2, #0]
 800c6b0:	b933      	cbnz	r3, 800c6c0 <_free_r+0x2c>
 800c6b2:	6063      	str	r3, [r4, #4]
 800c6b4:	6014      	str	r4, [r2, #0]
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6bc:	f000 b8da 	b.w	800c874 <__malloc_unlock>
 800c6c0:	42a3      	cmp	r3, r4
 800c6c2:	d908      	bls.n	800c6d6 <_free_r+0x42>
 800c6c4:	6820      	ldr	r0, [r4, #0]
 800c6c6:	1821      	adds	r1, r4, r0
 800c6c8:	428b      	cmp	r3, r1
 800c6ca:	bf01      	itttt	eq
 800c6cc:	6819      	ldreq	r1, [r3, #0]
 800c6ce:	685b      	ldreq	r3, [r3, #4]
 800c6d0:	1809      	addeq	r1, r1, r0
 800c6d2:	6021      	streq	r1, [r4, #0]
 800c6d4:	e7ed      	b.n	800c6b2 <_free_r+0x1e>
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	b10b      	cbz	r3, 800c6e0 <_free_r+0x4c>
 800c6dc:	42a3      	cmp	r3, r4
 800c6de:	d9fa      	bls.n	800c6d6 <_free_r+0x42>
 800c6e0:	6811      	ldr	r1, [r2, #0]
 800c6e2:	1850      	adds	r0, r2, r1
 800c6e4:	42a0      	cmp	r0, r4
 800c6e6:	d10b      	bne.n	800c700 <_free_r+0x6c>
 800c6e8:	6820      	ldr	r0, [r4, #0]
 800c6ea:	4401      	add	r1, r0
 800c6ec:	1850      	adds	r0, r2, r1
 800c6ee:	4283      	cmp	r3, r0
 800c6f0:	6011      	str	r1, [r2, #0]
 800c6f2:	d1e0      	bne.n	800c6b6 <_free_r+0x22>
 800c6f4:	6818      	ldr	r0, [r3, #0]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	4408      	add	r0, r1
 800c6fa:	6010      	str	r0, [r2, #0]
 800c6fc:	6053      	str	r3, [r2, #4]
 800c6fe:	e7da      	b.n	800c6b6 <_free_r+0x22>
 800c700:	d902      	bls.n	800c708 <_free_r+0x74>
 800c702:	230c      	movs	r3, #12
 800c704:	602b      	str	r3, [r5, #0]
 800c706:	e7d6      	b.n	800c6b6 <_free_r+0x22>
 800c708:	6820      	ldr	r0, [r4, #0]
 800c70a:	1821      	adds	r1, r4, r0
 800c70c:	428b      	cmp	r3, r1
 800c70e:	bf01      	itttt	eq
 800c710:	6819      	ldreq	r1, [r3, #0]
 800c712:	685b      	ldreq	r3, [r3, #4]
 800c714:	1809      	addeq	r1, r1, r0
 800c716:	6021      	streq	r1, [r4, #0]
 800c718:	6063      	str	r3, [r4, #4]
 800c71a:	6054      	str	r4, [r2, #4]
 800c71c:	e7cb      	b.n	800c6b6 <_free_r+0x22>
 800c71e:	bd38      	pop	{r3, r4, r5, pc}
 800c720:	2000032c 	.word	0x2000032c

0800c724 <sbrk_aligned>:
 800c724:	b570      	push	{r4, r5, r6, lr}
 800c726:	4e0f      	ldr	r6, [pc, #60]	@ (800c764 <sbrk_aligned+0x40>)
 800c728:	460c      	mov	r4, r1
 800c72a:	6831      	ldr	r1, [r6, #0]
 800c72c:	4605      	mov	r5, r0
 800c72e:	b911      	cbnz	r1, 800c736 <sbrk_aligned+0x12>
 800c730:	f000 fbaa 	bl	800ce88 <_sbrk_r>
 800c734:	6030      	str	r0, [r6, #0]
 800c736:	4621      	mov	r1, r4
 800c738:	4628      	mov	r0, r5
 800c73a:	f000 fba5 	bl	800ce88 <_sbrk_r>
 800c73e:	1c43      	adds	r3, r0, #1
 800c740:	d103      	bne.n	800c74a <sbrk_aligned+0x26>
 800c742:	f04f 34ff 	mov.w	r4, #4294967295
 800c746:	4620      	mov	r0, r4
 800c748:	bd70      	pop	{r4, r5, r6, pc}
 800c74a:	1cc4      	adds	r4, r0, #3
 800c74c:	f024 0403 	bic.w	r4, r4, #3
 800c750:	42a0      	cmp	r0, r4
 800c752:	d0f8      	beq.n	800c746 <sbrk_aligned+0x22>
 800c754:	1a21      	subs	r1, r4, r0
 800c756:	4628      	mov	r0, r5
 800c758:	f000 fb96 	bl	800ce88 <_sbrk_r>
 800c75c:	3001      	adds	r0, #1
 800c75e:	d1f2      	bne.n	800c746 <sbrk_aligned+0x22>
 800c760:	e7ef      	b.n	800c742 <sbrk_aligned+0x1e>
 800c762:	bf00      	nop
 800c764:	20000328 	.word	0x20000328

0800c768 <_malloc_r>:
 800c768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c76c:	1ccd      	adds	r5, r1, #3
 800c76e:	f025 0503 	bic.w	r5, r5, #3
 800c772:	3508      	adds	r5, #8
 800c774:	2d0c      	cmp	r5, #12
 800c776:	bf38      	it	cc
 800c778:	250c      	movcc	r5, #12
 800c77a:	2d00      	cmp	r5, #0
 800c77c:	4606      	mov	r6, r0
 800c77e:	db01      	blt.n	800c784 <_malloc_r+0x1c>
 800c780:	42a9      	cmp	r1, r5
 800c782:	d904      	bls.n	800c78e <_malloc_r+0x26>
 800c784:	230c      	movs	r3, #12
 800c786:	6033      	str	r3, [r6, #0]
 800c788:	2000      	movs	r0, #0
 800c78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c78e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c864 <_malloc_r+0xfc>
 800c792:	f000 f869 	bl	800c868 <__malloc_lock>
 800c796:	f8d8 3000 	ldr.w	r3, [r8]
 800c79a:	461c      	mov	r4, r3
 800c79c:	bb44      	cbnz	r4, 800c7f0 <_malloc_r+0x88>
 800c79e:	4629      	mov	r1, r5
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	f7ff ffbf 	bl	800c724 <sbrk_aligned>
 800c7a6:	1c43      	adds	r3, r0, #1
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	d158      	bne.n	800c85e <_malloc_r+0xf6>
 800c7ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c7b0:	4627      	mov	r7, r4
 800c7b2:	2f00      	cmp	r7, #0
 800c7b4:	d143      	bne.n	800c83e <_malloc_r+0xd6>
 800c7b6:	2c00      	cmp	r4, #0
 800c7b8:	d04b      	beq.n	800c852 <_malloc_r+0xea>
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	4639      	mov	r1, r7
 800c7be:	4630      	mov	r0, r6
 800c7c0:	eb04 0903 	add.w	r9, r4, r3
 800c7c4:	f000 fb60 	bl	800ce88 <_sbrk_r>
 800c7c8:	4581      	cmp	r9, r0
 800c7ca:	d142      	bne.n	800c852 <_malloc_r+0xea>
 800c7cc:	6821      	ldr	r1, [r4, #0]
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	1a6d      	subs	r5, r5, r1
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	f7ff ffa6 	bl	800c724 <sbrk_aligned>
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d03a      	beq.n	800c852 <_malloc_r+0xea>
 800c7dc:	6823      	ldr	r3, [r4, #0]
 800c7de:	442b      	add	r3, r5
 800c7e0:	6023      	str	r3, [r4, #0]
 800c7e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	bb62      	cbnz	r2, 800c844 <_malloc_r+0xdc>
 800c7ea:	f8c8 7000 	str.w	r7, [r8]
 800c7ee:	e00f      	b.n	800c810 <_malloc_r+0xa8>
 800c7f0:	6822      	ldr	r2, [r4, #0]
 800c7f2:	1b52      	subs	r2, r2, r5
 800c7f4:	d420      	bmi.n	800c838 <_malloc_r+0xd0>
 800c7f6:	2a0b      	cmp	r2, #11
 800c7f8:	d917      	bls.n	800c82a <_malloc_r+0xc2>
 800c7fa:	1961      	adds	r1, r4, r5
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	6025      	str	r5, [r4, #0]
 800c800:	bf18      	it	ne
 800c802:	6059      	strne	r1, [r3, #4]
 800c804:	6863      	ldr	r3, [r4, #4]
 800c806:	bf08      	it	eq
 800c808:	f8c8 1000 	streq.w	r1, [r8]
 800c80c:	5162      	str	r2, [r4, r5]
 800c80e:	604b      	str	r3, [r1, #4]
 800c810:	4630      	mov	r0, r6
 800c812:	f000 f82f 	bl	800c874 <__malloc_unlock>
 800c816:	f104 000b 	add.w	r0, r4, #11
 800c81a:	1d23      	adds	r3, r4, #4
 800c81c:	f020 0007 	bic.w	r0, r0, #7
 800c820:	1ac2      	subs	r2, r0, r3
 800c822:	bf1c      	itt	ne
 800c824:	1a1b      	subne	r3, r3, r0
 800c826:	50a3      	strne	r3, [r4, r2]
 800c828:	e7af      	b.n	800c78a <_malloc_r+0x22>
 800c82a:	6862      	ldr	r2, [r4, #4]
 800c82c:	42a3      	cmp	r3, r4
 800c82e:	bf0c      	ite	eq
 800c830:	f8c8 2000 	streq.w	r2, [r8]
 800c834:	605a      	strne	r2, [r3, #4]
 800c836:	e7eb      	b.n	800c810 <_malloc_r+0xa8>
 800c838:	4623      	mov	r3, r4
 800c83a:	6864      	ldr	r4, [r4, #4]
 800c83c:	e7ae      	b.n	800c79c <_malloc_r+0x34>
 800c83e:	463c      	mov	r4, r7
 800c840:	687f      	ldr	r7, [r7, #4]
 800c842:	e7b6      	b.n	800c7b2 <_malloc_r+0x4a>
 800c844:	461a      	mov	r2, r3
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	42a3      	cmp	r3, r4
 800c84a:	d1fb      	bne.n	800c844 <_malloc_r+0xdc>
 800c84c:	2300      	movs	r3, #0
 800c84e:	6053      	str	r3, [r2, #4]
 800c850:	e7de      	b.n	800c810 <_malloc_r+0xa8>
 800c852:	230c      	movs	r3, #12
 800c854:	4630      	mov	r0, r6
 800c856:	6033      	str	r3, [r6, #0]
 800c858:	f000 f80c 	bl	800c874 <__malloc_unlock>
 800c85c:	e794      	b.n	800c788 <_malloc_r+0x20>
 800c85e:	6005      	str	r5, [r0, #0]
 800c860:	e7d6      	b.n	800c810 <_malloc_r+0xa8>
 800c862:	bf00      	nop
 800c864:	2000032c 	.word	0x2000032c

0800c868 <__malloc_lock>:
 800c868:	4801      	ldr	r0, [pc, #4]	@ (800c870 <__malloc_lock+0x8>)
 800c86a:	f7ff bf11 	b.w	800c690 <__retarget_lock_acquire_recursive>
 800c86e:	bf00      	nop
 800c870:	20000324 	.word	0x20000324

0800c874 <__malloc_unlock>:
 800c874:	4801      	ldr	r0, [pc, #4]	@ (800c87c <__malloc_unlock+0x8>)
 800c876:	f7ff bf0c 	b.w	800c692 <__retarget_lock_release_recursive>
 800c87a:	bf00      	nop
 800c87c:	20000324 	.word	0x20000324

0800c880 <__ssputs_r>:
 800c880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c884:	461f      	mov	r7, r3
 800c886:	688e      	ldr	r6, [r1, #8]
 800c888:	4682      	mov	sl, r0
 800c88a:	42be      	cmp	r6, r7
 800c88c:	460c      	mov	r4, r1
 800c88e:	4690      	mov	r8, r2
 800c890:	680b      	ldr	r3, [r1, #0]
 800c892:	d82d      	bhi.n	800c8f0 <__ssputs_r+0x70>
 800c894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c898:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c89c:	d026      	beq.n	800c8ec <__ssputs_r+0x6c>
 800c89e:	6965      	ldr	r5, [r4, #20]
 800c8a0:	6909      	ldr	r1, [r1, #16]
 800c8a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8a6:	eba3 0901 	sub.w	r9, r3, r1
 800c8aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8ae:	1c7b      	adds	r3, r7, #1
 800c8b0:	444b      	add	r3, r9
 800c8b2:	106d      	asrs	r5, r5, #1
 800c8b4:	429d      	cmp	r5, r3
 800c8b6:	bf38      	it	cc
 800c8b8:	461d      	movcc	r5, r3
 800c8ba:	0553      	lsls	r3, r2, #21
 800c8bc:	d527      	bpl.n	800c90e <__ssputs_r+0x8e>
 800c8be:	4629      	mov	r1, r5
 800c8c0:	f7ff ff52 	bl	800c768 <_malloc_r>
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	b360      	cbz	r0, 800c922 <__ssputs_r+0xa2>
 800c8c8:	464a      	mov	r2, r9
 800c8ca:	6921      	ldr	r1, [r4, #16]
 800c8cc:	f000 fafa 	bl	800cec4 <memcpy>
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8da:	81a3      	strh	r3, [r4, #12]
 800c8dc:	6126      	str	r6, [r4, #16]
 800c8de:	444e      	add	r6, r9
 800c8e0:	6026      	str	r6, [r4, #0]
 800c8e2:	463e      	mov	r6, r7
 800c8e4:	6165      	str	r5, [r4, #20]
 800c8e6:	eba5 0509 	sub.w	r5, r5, r9
 800c8ea:	60a5      	str	r5, [r4, #8]
 800c8ec:	42be      	cmp	r6, r7
 800c8ee:	d900      	bls.n	800c8f2 <__ssputs_r+0x72>
 800c8f0:	463e      	mov	r6, r7
 800c8f2:	4632      	mov	r2, r6
 800c8f4:	4641      	mov	r1, r8
 800c8f6:	6820      	ldr	r0, [r4, #0]
 800c8f8:	f000 faac 	bl	800ce54 <memmove>
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	1b9b      	subs	r3, r3, r6
 800c902:	60a3      	str	r3, [r4, #8]
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	4433      	add	r3, r6
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90e:	462a      	mov	r2, r5
 800c910:	f000 fae6 	bl	800cee0 <_realloc_r>
 800c914:	4606      	mov	r6, r0
 800c916:	2800      	cmp	r0, #0
 800c918:	d1e0      	bne.n	800c8dc <__ssputs_r+0x5c>
 800c91a:	4650      	mov	r0, sl
 800c91c:	6921      	ldr	r1, [r4, #16]
 800c91e:	f7ff feb9 	bl	800c694 <_free_r>
 800c922:	230c      	movs	r3, #12
 800c924:	f8ca 3000 	str.w	r3, [sl]
 800c928:	89a3      	ldrh	r3, [r4, #12]
 800c92a:	f04f 30ff 	mov.w	r0, #4294967295
 800c92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c932:	81a3      	strh	r3, [r4, #12]
 800c934:	e7e9      	b.n	800c90a <__ssputs_r+0x8a>
	...

0800c938 <_svfiprintf_r>:
 800c938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93c:	4698      	mov	r8, r3
 800c93e:	898b      	ldrh	r3, [r1, #12]
 800c940:	4607      	mov	r7, r0
 800c942:	061b      	lsls	r3, r3, #24
 800c944:	460d      	mov	r5, r1
 800c946:	4614      	mov	r4, r2
 800c948:	b09d      	sub	sp, #116	@ 0x74
 800c94a:	d510      	bpl.n	800c96e <_svfiprintf_r+0x36>
 800c94c:	690b      	ldr	r3, [r1, #16]
 800c94e:	b973      	cbnz	r3, 800c96e <_svfiprintf_r+0x36>
 800c950:	2140      	movs	r1, #64	@ 0x40
 800c952:	f7ff ff09 	bl	800c768 <_malloc_r>
 800c956:	6028      	str	r0, [r5, #0]
 800c958:	6128      	str	r0, [r5, #16]
 800c95a:	b930      	cbnz	r0, 800c96a <_svfiprintf_r+0x32>
 800c95c:	230c      	movs	r3, #12
 800c95e:	603b      	str	r3, [r7, #0]
 800c960:	f04f 30ff 	mov.w	r0, #4294967295
 800c964:	b01d      	add	sp, #116	@ 0x74
 800c966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96a:	2340      	movs	r3, #64	@ 0x40
 800c96c:	616b      	str	r3, [r5, #20]
 800c96e:	2300      	movs	r3, #0
 800c970:	9309      	str	r3, [sp, #36]	@ 0x24
 800c972:	2320      	movs	r3, #32
 800c974:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c978:	2330      	movs	r3, #48	@ 0x30
 800c97a:	f04f 0901 	mov.w	r9, #1
 800c97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c982:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cb1c <_svfiprintf_r+0x1e4>
 800c986:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c98a:	4623      	mov	r3, r4
 800c98c:	469a      	mov	sl, r3
 800c98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c992:	b10a      	cbz	r2, 800c998 <_svfiprintf_r+0x60>
 800c994:	2a25      	cmp	r2, #37	@ 0x25
 800c996:	d1f9      	bne.n	800c98c <_svfiprintf_r+0x54>
 800c998:	ebba 0b04 	subs.w	fp, sl, r4
 800c99c:	d00b      	beq.n	800c9b6 <_svfiprintf_r+0x7e>
 800c99e:	465b      	mov	r3, fp
 800c9a0:	4622      	mov	r2, r4
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f7ff ff6b 	bl	800c880 <__ssputs_r>
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	f000 80a7 	beq.w	800cafe <_svfiprintf_r+0x1c6>
 800c9b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9b2:	445a      	add	r2, fp
 800c9b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 809f 	beq.w	800cafe <_svfiprintf_r+0x1c6>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9ca:	f10a 0a01 	add.w	sl, sl, #1
 800c9ce:	9304      	str	r3, [sp, #16]
 800c9d0:	9307      	str	r3, [sp, #28]
 800c9d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9d8:	4654      	mov	r4, sl
 800c9da:	2205      	movs	r2, #5
 800c9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e0:	484e      	ldr	r0, [pc, #312]	@ (800cb1c <_svfiprintf_r+0x1e4>)
 800c9e2:	f000 fa61 	bl	800cea8 <memchr>
 800c9e6:	9a04      	ldr	r2, [sp, #16]
 800c9e8:	b9d8      	cbnz	r0, 800ca22 <_svfiprintf_r+0xea>
 800c9ea:	06d0      	lsls	r0, r2, #27
 800c9ec:	bf44      	itt	mi
 800c9ee:	2320      	movmi	r3, #32
 800c9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9f4:	0711      	lsls	r1, r2, #28
 800c9f6:	bf44      	itt	mi
 800c9f8:	232b      	movmi	r3, #43	@ 0x2b
 800c9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9fe:	f89a 3000 	ldrb.w	r3, [sl]
 800ca02:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca04:	d015      	beq.n	800ca32 <_svfiprintf_r+0xfa>
 800ca06:	4654      	mov	r4, sl
 800ca08:	2000      	movs	r0, #0
 800ca0a:	f04f 0c0a 	mov.w	ip, #10
 800ca0e:	9a07      	ldr	r2, [sp, #28]
 800ca10:	4621      	mov	r1, r4
 800ca12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca16:	3b30      	subs	r3, #48	@ 0x30
 800ca18:	2b09      	cmp	r3, #9
 800ca1a:	d94b      	bls.n	800cab4 <_svfiprintf_r+0x17c>
 800ca1c:	b1b0      	cbz	r0, 800ca4c <_svfiprintf_r+0x114>
 800ca1e:	9207      	str	r2, [sp, #28]
 800ca20:	e014      	b.n	800ca4c <_svfiprintf_r+0x114>
 800ca22:	eba0 0308 	sub.w	r3, r0, r8
 800ca26:	fa09 f303 	lsl.w	r3, r9, r3
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	46a2      	mov	sl, r4
 800ca2e:	9304      	str	r3, [sp, #16]
 800ca30:	e7d2      	b.n	800c9d8 <_svfiprintf_r+0xa0>
 800ca32:	9b03      	ldr	r3, [sp, #12]
 800ca34:	1d19      	adds	r1, r3, #4
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	9103      	str	r1, [sp, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	bfbb      	ittet	lt
 800ca3e:	425b      	neglt	r3, r3
 800ca40:	f042 0202 	orrlt.w	r2, r2, #2
 800ca44:	9307      	strge	r3, [sp, #28]
 800ca46:	9307      	strlt	r3, [sp, #28]
 800ca48:	bfb8      	it	lt
 800ca4a:	9204      	strlt	r2, [sp, #16]
 800ca4c:	7823      	ldrb	r3, [r4, #0]
 800ca4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca50:	d10a      	bne.n	800ca68 <_svfiprintf_r+0x130>
 800ca52:	7863      	ldrb	r3, [r4, #1]
 800ca54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca56:	d132      	bne.n	800cabe <_svfiprintf_r+0x186>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	3402      	adds	r4, #2
 800ca5c:	1d1a      	adds	r2, r3, #4
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	9203      	str	r2, [sp, #12]
 800ca62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca66:	9305      	str	r3, [sp, #20]
 800ca68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cb20 <_svfiprintf_r+0x1e8>
 800ca6c:	2203      	movs	r2, #3
 800ca6e:	4650      	mov	r0, sl
 800ca70:	7821      	ldrb	r1, [r4, #0]
 800ca72:	f000 fa19 	bl	800cea8 <memchr>
 800ca76:	b138      	cbz	r0, 800ca88 <_svfiprintf_r+0x150>
 800ca78:	2240      	movs	r2, #64	@ 0x40
 800ca7a:	9b04      	ldr	r3, [sp, #16]
 800ca7c:	eba0 000a 	sub.w	r0, r0, sl
 800ca80:	4082      	lsls	r2, r0
 800ca82:	4313      	orrs	r3, r2
 800ca84:	3401      	adds	r4, #1
 800ca86:	9304      	str	r3, [sp, #16]
 800ca88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca8c:	2206      	movs	r2, #6
 800ca8e:	4825      	ldr	r0, [pc, #148]	@ (800cb24 <_svfiprintf_r+0x1ec>)
 800ca90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca94:	f000 fa08 	bl	800cea8 <memchr>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	d036      	beq.n	800cb0a <_svfiprintf_r+0x1d2>
 800ca9c:	4b22      	ldr	r3, [pc, #136]	@ (800cb28 <_svfiprintf_r+0x1f0>)
 800ca9e:	bb1b      	cbnz	r3, 800cae8 <_svfiprintf_r+0x1b0>
 800caa0:	9b03      	ldr	r3, [sp, #12]
 800caa2:	3307      	adds	r3, #7
 800caa4:	f023 0307 	bic.w	r3, r3, #7
 800caa8:	3308      	adds	r3, #8
 800caaa:	9303      	str	r3, [sp, #12]
 800caac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caae:	4433      	add	r3, r6
 800cab0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cab2:	e76a      	b.n	800c98a <_svfiprintf_r+0x52>
 800cab4:	460c      	mov	r4, r1
 800cab6:	2001      	movs	r0, #1
 800cab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cabc:	e7a8      	b.n	800ca10 <_svfiprintf_r+0xd8>
 800cabe:	2300      	movs	r3, #0
 800cac0:	f04f 0c0a 	mov.w	ip, #10
 800cac4:	4619      	mov	r1, r3
 800cac6:	3401      	adds	r4, #1
 800cac8:	9305      	str	r3, [sp, #20]
 800caca:	4620      	mov	r0, r4
 800cacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cad0:	3a30      	subs	r2, #48	@ 0x30
 800cad2:	2a09      	cmp	r2, #9
 800cad4:	d903      	bls.n	800cade <_svfiprintf_r+0x1a6>
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d0c6      	beq.n	800ca68 <_svfiprintf_r+0x130>
 800cada:	9105      	str	r1, [sp, #20]
 800cadc:	e7c4      	b.n	800ca68 <_svfiprintf_r+0x130>
 800cade:	4604      	mov	r4, r0
 800cae0:	2301      	movs	r3, #1
 800cae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cae6:	e7f0      	b.n	800caca <_svfiprintf_r+0x192>
 800cae8:	ab03      	add	r3, sp, #12
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	462a      	mov	r2, r5
 800caee:	4638      	mov	r0, r7
 800caf0:	4b0e      	ldr	r3, [pc, #56]	@ (800cb2c <_svfiprintf_r+0x1f4>)
 800caf2:	a904      	add	r1, sp, #16
 800caf4:	f3af 8000 	nop.w
 800caf8:	1c42      	adds	r2, r0, #1
 800cafa:	4606      	mov	r6, r0
 800cafc:	d1d6      	bne.n	800caac <_svfiprintf_r+0x174>
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	065b      	lsls	r3, r3, #25
 800cb02:	f53f af2d 	bmi.w	800c960 <_svfiprintf_r+0x28>
 800cb06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb08:	e72c      	b.n	800c964 <_svfiprintf_r+0x2c>
 800cb0a:	ab03      	add	r3, sp, #12
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	462a      	mov	r2, r5
 800cb10:	4638      	mov	r0, r7
 800cb12:	4b06      	ldr	r3, [pc, #24]	@ (800cb2c <_svfiprintf_r+0x1f4>)
 800cb14:	a904      	add	r1, sp, #16
 800cb16:	f000 f87d 	bl	800cc14 <_printf_i>
 800cb1a:	e7ed      	b.n	800caf8 <_svfiprintf_r+0x1c0>
 800cb1c:	0800cf92 	.word	0x0800cf92
 800cb20:	0800cf98 	.word	0x0800cf98
 800cb24:	0800cf9c 	.word	0x0800cf9c
 800cb28:	00000000 	.word	0x00000000
 800cb2c:	0800c881 	.word	0x0800c881

0800cb30 <_printf_common>:
 800cb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb34:	4616      	mov	r6, r2
 800cb36:	4698      	mov	r8, r3
 800cb38:	688a      	ldr	r2, [r1, #8]
 800cb3a:	690b      	ldr	r3, [r1, #16]
 800cb3c:	4607      	mov	r7, r0
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	bfb8      	it	lt
 800cb42:	4613      	movlt	r3, r2
 800cb44:	6033      	str	r3, [r6, #0]
 800cb46:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb4a:	460c      	mov	r4, r1
 800cb4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb50:	b10a      	cbz	r2, 800cb56 <_printf_common+0x26>
 800cb52:	3301      	adds	r3, #1
 800cb54:	6033      	str	r3, [r6, #0]
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	0699      	lsls	r1, r3, #26
 800cb5a:	bf42      	ittt	mi
 800cb5c:	6833      	ldrmi	r3, [r6, #0]
 800cb5e:	3302      	addmi	r3, #2
 800cb60:	6033      	strmi	r3, [r6, #0]
 800cb62:	6825      	ldr	r5, [r4, #0]
 800cb64:	f015 0506 	ands.w	r5, r5, #6
 800cb68:	d106      	bne.n	800cb78 <_printf_common+0x48>
 800cb6a:	f104 0a19 	add.w	sl, r4, #25
 800cb6e:	68e3      	ldr	r3, [r4, #12]
 800cb70:	6832      	ldr	r2, [r6, #0]
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	42ab      	cmp	r3, r5
 800cb76:	dc2b      	bgt.n	800cbd0 <_printf_common+0xa0>
 800cb78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb7c:	6822      	ldr	r2, [r4, #0]
 800cb7e:	3b00      	subs	r3, #0
 800cb80:	bf18      	it	ne
 800cb82:	2301      	movne	r3, #1
 800cb84:	0692      	lsls	r2, r2, #26
 800cb86:	d430      	bmi.n	800cbea <_printf_common+0xba>
 800cb88:	4641      	mov	r1, r8
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb90:	47c8      	blx	r9
 800cb92:	3001      	adds	r0, #1
 800cb94:	d023      	beq.n	800cbde <_printf_common+0xae>
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	6922      	ldr	r2, [r4, #16]
 800cb9a:	f003 0306 	and.w	r3, r3, #6
 800cb9e:	2b04      	cmp	r3, #4
 800cba0:	bf14      	ite	ne
 800cba2:	2500      	movne	r5, #0
 800cba4:	6833      	ldreq	r3, [r6, #0]
 800cba6:	f04f 0600 	mov.w	r6, #0
 800cbaa:	bf08      	it	eq
 800cbac:	68e5      	ldreq	r5, [r4, #12]
 800cbae:	f104 041a 	add.w	r4, r4, #26
 800cbb2:	bf08      	it	eq
 800cbb4:	1aed      	subeq	r5, r5, r3
 800cbb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cbba:	bf08      	it	eq
 800cbbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	bfc4      	itt	gt
 800cbc4:	1a9b      	subgt	r3, r3, r2
 800cbc6:	18ed      	addgt	r5, r5, r3
 800cbc8:	42b5      	cmp	r5, r6
 800cbca:	d11a      	bne.n	800cc02 <_printf_common+0xd2>
 800cbcc:	2000      	movs	r0, #0
 800cbce:	e008      	b.n	800cbe2 <_printf_common+0xb2>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	4652      	mov	r2, sl
 800cbd4:	4641      	mov	r1, r8
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	47c8      	blx	r9
 800cbda:	3001      	adds	r0, #1
 800cbdc:	d103      	bne.n	800cbe6 <_printf_common+0xb6>
 800cbde:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe6:	3501      	adds	r5, #1
 800cbe8:	e7c1      	b.n	800cb6e <_printf_common+0x3e>
 800cbea:	2030      	movs	r0, #48	@ 0x30
 800cbec:	18e1      	adds	r1, r4, r3
 800cbee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbf2:	1c5a      	adds	r2, r3, #1
 800cbf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbf8:	4422      	add	r2, r4
 800cbfa:	3302      	adds	r3, #2
 800cbfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc00:	e7c2      	b.n	800cb88 <_printf_common+0x58>
 800cc02:	2301      	movs	r3, #1
 800cc04:	4622      	mov	r2, r4
 800cc06:	4641      	mov	r1, r8
 800cc08:	4638      	mov	r0, r7
 800cc0a:	47c8      	blx	r9
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	d0e6      	beq.n	800cbde <_printf_common+0xae>
 800cc10:	3601      	adds	r6, #1
 800cc12:	e7d9      	b.n	800cbc8 <_printf_common+0x98>

0800cc14 <_printf_i>:
 800cc14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc18:	7e0f      	ldrb	r7, [r1, #24]
 800cc1a:	4691      	mov	r9, r2
 800cc1c:	2f78      	cmp	r7, #120	@ 0x78
 800cc1e:	4680      	mov	r8, r0
 800cc20:	460c      	mov	r4, r1
 800cc22:	469a      	mov	sl, r3
 800cc24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc2a:	d807      	bhi.n	800cc3c <_printf_i+0x28>
 800cc2c:	2f62      	cmp	r7, #98	@ 0x62
 800cc2e:	d80a      	bhi.n	800cc46 <_printf_i+0x32>
 800cc30:	2f00      	cmp	r7, #0
 800cc32:	f000 80d3 	beq.w	800cddc <_printf_i+0x1c8>
 800cc36:	2f58      	cmp	r7, #88	@ 0x58
 800cc38:	f000 80ba 	beq.w	800cdb0 <_printf_i+0x19c>
 800cc3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc44:	e03a      	b.n	800ccbc <_printf_i+0xa8>
 800cc46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc4a:	2b15      	cmp	r3, #21
 800cc4c:	d8f6      	bhi.n	800cc3c <_printf_i+0x28>
 800cc4e:	a101      	add	r1, pc, #4	@ (adr r1, 800cc54 <_printf_i+0x40>)
 800cc50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc54:	0800ccad 	.word	0x0800ccad
 800cc58:	0800ccc1 	.word	0x0800ccc1
 800cc5c:	0800cc3d 	.word	0x0800cc3d
 800cc60:	0800cc3d 	.word	0x0800cc3d
 800cc64:	0800cc3d 	.word	0x0800cc3d
 800cc68:	0800cc3d 	.word	0x0800cc3d
 800cc6c:	0800ccc1 	.word	0x0800ccc1
 800cc70:	0800cc3d 	.word	0x0800cc3d
 800cc74:	0800cc3d 	.word	0x0800cc3d
 800cc78:	0800cc3d 	.word	0x0800cc3d
 800cc7c:	0800cc3d 	.word	0x0800cc3d
 800cc80:	0800cdc3 	.word	0x0800cdc3
 800cc84:	0800cceb 	.word	0x0800cceb
 800cc88:	0800cd7d 	.word	0x0800cd7d
 800cc8c:	0800cc3d 	.word	0x0800cc3d
 800cc90:	0800cc3d 	.word	0x0800cc3d
 800cc94:	0800cde5 	.word	0x0800cde5
 800cc98:	0800cc3d 	.word	0x0800cc3d
 800cc9c:	0800cceb 	.word	0x0800cceb
 800cca0:	0800cc3d 	.word	0x0800cc3d
 800cca4:	0800cc3d 	.word	0x0800cc3d
 800cca8:	0800cd85 	.word	0x0800cd85
 800ccac:	6833      	ldr	r3, [r6, #0]
 800ccae:	1d1a      	adds	r2, r3, #4
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6032      	str	r2, [r6, #0]
 800ccb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e09e      	b.n	800cdfe <_printf_i+0x1ea>
 800ccc0:	6833      	ldr	r3, [r6, #0]
 800ccc2:	6820      	ldr	r0, [r4, #0]
 800ccc4:	1d19      	adds	r1, r3, #4
 800ccc6:	6031      	str	r1, [r6, #0]
 800ccc8:	0606      	lsls	r6, r0, #24
 800ccca:	d501      	bpl.n	800ccd0 <_printf_i+0xbc>
 800cccc:	681d      	ldr	r5, [r3, #0]
 800ccce:	e003      	b.n	800ccd8 <_printf_i+0xc4>
 800ccd0:	0645      	lsls	r5, r0, #25
 800ccd2:	d5fb      	bpl.n	800cccc <_printf_i+0xb8>
 800ccd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ccd8:	2d00      	cmp	r5, #0
 800ccda:	da03      	bge.n	800cce4 <_printf_i+0xd0>
 800ccdc:	232d      	movs	r3, #45	@ 0x2d
 800ccde:	426d      	negs	r5, r5
 800cce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cce4:	230a      	movs	r3, #10
 800cce6:	4859      	ldr	r0, [pc, #356]	@ (800ce4c <_printf_i+0x238>)
 800cce8:	e011      	b.n	800cd0e <_printf_i+0xfa>
 800ccea:	6821      	ldr	r1, [r4, #0]
 800ccec:	6833      	ldr	r3, [r6, #0]
 800ccee:	0608      	lsls	r0, r1, #24
 800ccf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ccf4:	d402      	bmi.n	800ccfc <_printf_i+0xe8>
 800ccf6:	0649      	lsls	r1, r1, #25
 800ccf8:	bf48      	it	mi
 800ccfa:	b2ad      	uxthmi	r5, r5
 800ccfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccfe:	6033      	str	r3, [r6, #0]
 800cd00:	bf14      	ite	ne
 800cd02:	230a      	movne	r3, #10
 800cd04:	2308      	moveq	r3, #8
 800cd06:	4851      	ldr	r0, [pc, #324]	@ (800ce4c <_printf_i+0x238>)
 800cd08:	2100      	movs	r1, #0
 800cd0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd0e:	6866      	ldr	r6, [r4, #4]
 800cd10:	2e00      	cmp	r6, #0
 800cd12:	bfa8      	it	ge
 800cd14:	6821      	ldrge	r1, [r4, #0]
 800cd16:	60a6      	str	r6, [r4, #8]
 800cd18:	bfa4      	itt	ge
 800cd1a:	f021 0104 	bicge.w	r1, r1, #4
 800cd1e:	6021      	strge	r1, [r4, #0]
 800cd20:	b90d      	cbnz	r5, 800cd26 <_printf_i+0x112>
 800cd22:	2e00      	cmp	r6, #0
 800cd24:	d04b      	beq.n	800cdbe <_printf_i+0x1aa>
 800cd26:	4616      	mov	r6, r2
 800cd28:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd2c:	fb03 5711 	mls	r7, r3, r1, r5
 800cd30:	5dc7      	ldrb	r7, [r0, r7]
 800cd32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd36:	462f      	mov	r7, r5
 800cd38:	42bb      	cmp	r3, r7
 800cd3a:	460d      	mov	r5, r1
 800cd3c:	d9f4      	bls.n	800cd28 <_printf_i+0x114>
 800cd3e:	2b08      	cmp	r3, #8
 800cd40:	d10b      	bne.n	800cd5a <_printf_i+0x146>
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	07df      	lsls	r7, r3, #31
 800cd46:	d508      	bpl.n	800cd5a <_printf_i+0x146>
 800cd48:	6923      	ldr	r3, [r4, #16]
 800cd4a:	6861      	ldr	r1, [r4, #4]
 800cd4c:	4299      	cmp	r1, r3
 800cd4e:	bfde      	ittt	le
 800cd50:	2330      	movle	r3, #48	@ 0x30
 800cd52:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd56:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd5a:	1b92      	subs	r2, r2, r6
 800cd5c:	6122      	str	r2, [r4, #16]
 800cd5e:	464b      	mov	r3, r9
 800cd60:	4621      	mov	r1, r4
 800cd62:	4640      	mov	r0, r8
 800cd64:	f8cd a000 	str.w	sl, [sp]
 800cd68:	aa03      	add	r2, sp, #12
 800cd6a:	f7ff fee1 	bl	800cb30 <_printf_common>
 800cd6e:	3001      	adds	r0, #1
 800cd70:	d14a      	bne.n	800ce08 <_printf_i+0x1f4>
 800cd72:	f04f 30ff 	mov.w	r0, #4294967295
 800cd76:	b004      	add	sp, #16
 800cd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	f043 0320 	orr.w	r3, r3, #32
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	2778      	movs	r7, #120	@ 0x78
 800cd86:	4832      	ldr	r0, [pc, #200]	@ (800ce50 <_printf_i+0x23c>)
 800cd88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd8c:	6823      	ldr	r3, [r4, #0]
 800cd8e:	6831      	ldr	r1, [r6, #0]
 800cd90:	061f      	lsls	r7, r3, #24
 800cd92:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd96:	d402      	bmi.n	800cd9e <_printf_i+0x18a>
 800cd98:	065f      	lsls	r7, r3, #25
 800cd9a:	bf48      	it	mi
 800cd9c:	b2ad      	uxthmi	r5, r5
 800cd9e:	6031      	str	r1, [r6, #0]
 800cda0:	07d9      	lsls	r1, r3, #31
 800cda2:	bf44      	itt	mi
 800cda4:	f043 0320 	orrmi.w	r3, r3, #32
 800cda8:	6023      	strmi	r3, [r4, #0]
 800cdaa:	b11d      	cbz	r5, 800cdb4 <_printf_i+0x1a0>
 800cdac:	2310      	movs	r3, #16
 800cdae:	e7ab      	b.n	800cd08 <_printf_i+0xf4>
 800cdb0:	4826      	ldr	r0, [pc, #152]	@ (800ce4c <_printf_i+0x238>)
 800cdb2:	e7e9      	b.n	800cd88 <_printf_i+0x174>
 800cdb4:	6823      	ldr	r3, [r4, #0]
 800cdb6:	f023 0320 	bic.w	r3, r3, #32
 800cdba:	6023      	str	r3, [r4, #0]
 800cdbc:	e7f6      	b.n	800cdac <_printf_i+0x198>
 800cdbe:	4616      	mov	r6, r2
 800cdc0:	e7bd      	b.n	800cd3e <_printf_i+0x12a>
 800cdc2:	6833      	ldr	r3, [r6, #0]
 800cdc4:	6825      	ldr	r5, [r4, #0]
 800cdc6:	1d18      	adds	r0, r3, #4
 800cdc8:	6961      	ldr	r1, [r4, #20]
 800cdca:	6030      	str	r0, [r6, #0]
 800cdcc:	062e      	lsls	r6, r5, #24
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	d501      	bpl.n	800cdd6 <_printf_i+0x1c2>
 800cdd2:	6019      	str	r1, [r3, #0]
 800cdd4:	e002      	b.n	800cddc <_printf_i+0x1c8>
 800cdd6:	0668      	lsls	r0, r5, #25
 800cdd8:	d5fb      	bpl.n	800cdd2 <_printf_i+0x1be>
 800cdda:	8019      	strh	r1, [r3, #0]
 800cddc:	2300      	movs	r3, #0
 800cdde:	4616      	mov	r6, r2
 800cde0:	6123      	str	r3, [r4, #16]
 800cde2:	e7bc      	b.n	800cd5e <_printf_i+0x14a>
 800cde4:	6833      	ldr	r3, [r6, #0]
 800cde6:	2100      	movs	r1, #0
 800cde8:	1d1a      	adds	r2, r3, #4
 800cdea:	6032      	str	r2, [r6, #0]
 800cdec:	681e      	ldr	r6, [r3, #0]
 800cdee:	6862      	ldr	r2, [r4, #4]
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	f000 f859 	bl	800cea8 <memchr>
 800cdf6:	b108      	cbz	r0, 800cdfc <_printf_i+0x1e8>
 800cdf8:	1b80      	subs	r0, r0, r6
 800cdfa:	6060      	str	r0, [r4, #4]
 800cdfc:	6863      	ldr	r3, [r4, #4]
 800cdfe:	6123      	str	r3, [r4, #16]
 800ce00:	2300      	movs	r3, #0
 800ce02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce06:	e7aa      	b.n	800cd5e <_printf_i+0x14a>
 800ce08:	4632      	mov	r2, r6
 800ce0a:	4649      	mov	r1, r9
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	6923      	ldr	r3, [r4, #16]
 800ce10:	47d0      	blx	sl
 800ce12:	3001      	adds	r0, #1
 800ce14:	d0ad      	beq.n	800cd72 <_printf_i+0x15e>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	079b      	lsls	r3, r3, #30
 800ce1a:	d413      	bmi.n	800ce44 <_printf_i+0x230>
 800ce1c:	68e0      	ldr	r0, [r4, #12]
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	4298      	cmp	r0, r3
 800ce22:	bfb8      	it	lt
 800ce24:	4618      	movlt	r0, r3
 800ce26:	e7a6      	b.n	800cd76 <_printf_i+0x162>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	4632      	mov	r2, r6
 800ce2c:	4649      	mov	r1, r9
 800ce2e:	4640      	mov	r0, r8
 800ce30:	47d0      	blx	sl
 800ce32:	3001      	adds	r0, #1
 800ce34:	d09d      	beq.n	800cd72 <_printf_i+0x15e>
 800ce36:	3501      	adds	r5, #1
 800ce38:	68e3      	ldr	r3, [r4, #12]
 800ce3a:	9903      	ldr	r1, [sp, #12]
 800ce3c:	1a5b      	subs	r3, r3, r1
 800ce3e:	42ab      	cmp	r3, r5
 800ce40:	dcf2      	bgt.n	800ce28 <_printf_i+0x214>
 800ce42:	e7eb      	b.n	800ce1c <_printf_i+0x208>
 800ce44:	2500      	movs	r5, #0
 800ce46:	f104 0619 	add.w	r6, r4, #25
 800ce4a:	e7f5      	b.n	800ce38 <_printf_i+0x224>
 800ce4c:	0800cfa3 	.word	0x0800cfa3
 800ce50:	0800cfb4 	.word	0x0800cfb4

0800ce54 <memmove>:
 800ce54:	4288      	cmp	r0, r1
 800ce56:	b510      	push	{r4, lr}
 800ce58:	eb01 0402 	add.w	r4, r1, r2
 800ce5c:	d902      	bls.n	800ce64 <memmove+0x10>
 800ce5e:	4284      	cmp	r4, r0
 800ce60:	4623      	mov	r3, r4
 800ce62:	d807      	bhi.n	800ce74 <memmove+0x20>
 800ce64:	1e43      	subs	r3, r0, #1
 800ce66:	42a1      	cmp	r1, r4
 800ce68:	d008      	beq.n	800ce7c <memmove+0x28>
 800ce6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce72:	e7f8      	b.n	800ce66 <memmove+0x12>
 800ce74:	4601      	mov	r1, r0
 800ce76:	4402      	add	r2, r0
 800ce78:	428a      	cmp	r2, r1
 800ce7a:	d100      	bne.n	800ce7e <memmove+0x2a>
 800ce7c:	bd10      	pop	{r4, pc}
 800ce7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce86:	e7f7      	b.n	800ce78 <memmove+0x24>

0800ce88 <_sbrk_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	4d05      	ldr	r5, [pc, #20]	@ (800cea4 <_sbrk_r+0x1c>)
 800ce8e:	4604      	mov	r4, r0
 800ce90:	4608      	mov	r0, r1
 800ce92:	602b      	str	r3, [r5, #0]
 800ce94:	f7fc f838 	bl	8008f08 <_sbrk>
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	d102      	bne.n	800cea2 <_sbrk_r+0x1a>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	b103      	cbz	r3, 800cea2 <_sbrk_r+0x1a>
 800cea0:	6023      	str	r3, [r4, #0]
 800cea2:	bd38      	pop	{r3, r4, r5, pc}
 800cea4:	20000320 	.word	0x20000320

0800cea8 <memchr>:
 800cea8:	4603      	mov	r3, r0
 800ceaa:	b510      	push	{r4, lr}
 800ceac:	b2c9      	uxtb	r1, r1
 800ceae:	4402      	add	r2, r0
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	d101      	bne.n	800ceba <memchr+0x12>
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	e003      	b.n	800cec2 <memchr+0x1a>
 800ceba:	7804      	ldrb	r4, [r0, #0]
 800cebc:	3301      	adds	r3, #1
 800cebe:	428c      	cmp	r4, r1
 800cec0:	d1f6      	bne.n	800ceb0 <memchr+0x8>
 800cec2:	bd10      	pop	{r4, pc}

0800cec4 <memcpy>:
 800cec4:	440a      	add	r2, r1
 800cec6:	4291      	cmp	r1, r2
 800cec8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cecc:	d100      	bne.n	800ced0 <memcpy+0xc>
 800cece:	4770      	bx	lr
 800ced0:	b510      	push	{r4, lr}
 800ced2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ced6:	4291      	cmp	r1, r2
 800ced8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cedc:	d1f9      	bne.n	800ced2 <memcpy+0xe>
 800cede:	bd10      	pop	{r4, pc}

0800cee0 <_realloc_r>:
 800cee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee4:	4680      	mov	r8, r0
 800cee6:	4615      	mov	r5, r2
 800cee8:	460c      	mov	r4, r1
 800ceea:	b921      	cbnz	r1, 800cef6 <_realloc_r+0x16>
 800ceec:	4611      	mov	r1, r2
 800ceee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cef2:	f7ff bc39 	b.w	800c768 <_malloc_r>
 800cef6:	b92a      	cbnz	r2, 800cf04 <_realloc_r+0x24>
 800cef8:	f7ff fbcc 	bl	800c694 <_free_r>
 800cefc:	2400      	movs	r4, #0
 800cefe:	4620      	mov	r0, r4
 800cf00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf04:	f000 f81a 	bl	800cf3c <_malloc_usable_size_r>
 800cf08:	4285      	cmp	r5, r0
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	d802      	bhi.n	800cf14 <_realloc_r+0x34>
 800cf0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cf12:	d8f4      	bhi.n	800cefe <_realloc_r+0x1e>
 800cf14:	4629      	mov	r1, r5
 800cf16:	4640      	mov	r0, r8
 800cf18:	f7ff fc26 	bl	800c768 <_malloc_r>
 800cf1c:	4607      	mov	r7, r0
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d0ec      	beq.n	800cefc <_realloc_r+0x1c>
 800cf22:	42b5      	cmp	r5, r6
 800cf24:	462a      	mov	r2, r5
 800cf26:	4621      	mov	r1, r4
 800cf28:	bf28      	it	cs
 800cf2a:	4632      	movcs	r2, r6
 800cf2c:	f7ff ffca 	bl	800cec4 <memcpy>
 800cf30:	4621      	mov	r1, r4
 800cf32:	4640      	mov	r0, r8
 800cf34:	f7ff fbae 	bl	800c694 <_free_r>
 800cf38:	463c      	mov	r4, r7
 800cf3a:	e7e0      	b.n	800cefe <_realloc_r+0x1e>

0800cf3c <_malloc_usable_size_r>:
 800cf3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf40:	1f18      	subs	r0, r3, #4
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	bfbc      	itt	lt
 800cf46:	580b      	ldrlt	r3, [r1, r0]
 800cf48:	18c0      	addlt	r0, r0, r3
 800cf4a:	4770      	bx	lr

0800cf4c <_init>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	bf00      	nop
 800cf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf52:	bc08      	pop	{r3}
 800cf54:	469e      	mov	lr, r3
 800cf56:	4770      	bx	lr

0800cf58 <_fini>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	bf00      	nop
 800cf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5e:	bc08      	pop	{r3}
 800cf60:	469e      	mov	lr, r3
 800cf62:	4770      	bx	lr
